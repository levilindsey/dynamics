{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/gamex/index.js","node_modules/gamex/src/index.js","node_modules/gamex/src/src/collidable-physics-model-controller.js","node_modules/gamex/src/src/config-controller.js","node_modules/gamex/src/src/game-controller.js","node_modules/gamex/src/src/game-scene.js","node_modules/gamex/src/src/input-controller.js","node_modules/gamex/src/src/physics-model-controller.js","node_modules/gamex/src/src/spring-follow-camera.js","node_modules/gamex/src/wall/index.js","node_modules/gamex/src/wall/src/wall-collidable.js","node_modules/gamex/src/wall/src/wall-controller.js","node_modules/grafx/src/cameras/index.js","node_modules/grafx/src/cameras/src/camera.js","node_modules/grafx/src/cameras/src/first-person-camera.js","node_modules/grafx/src/cameras/src/fixed-camera.js","node_modules/grafx/src/cameras/src/fixed-follow-camera.js","node_modules/grafx/src/cameras/src/follow-camera.js","node_modules/grafx/src/cameras/src/overhead-camera.js","node_modules/grafx/src/cameras/src/third-person-camera.js","node_modules/grafx/src/index.js","node_modules/grafx/src/models/index.js","node_modules/grafx/src/models/src/default-model.js","node_modules/grafx/src/models/src/invisible-model-controller.js","node_modules/grafx/src/models/src/model-controller.js","node_modules/grafx/src/models/src/model-group-controller.js","node_modules/grafx/src/models/src/model.js","node_modules/grafx/src/models/src/standard-model-controller.js","node_modules/grafx/src/program-wrapper/index.js","node_modules/grafx/src/program-wrapper/src/group-program-wrapper.js","node_modules/grafx/src/program-wrapper/src/program-wrapper-store.js","node_modules/grafx/src/program-wrapper/src/program-wrapper.js","node_modules/grafx/src/program-wrapper/src/texture-store.js","node_modules/grafx/src/program-wrapper/src/uniform-setter.js","node_modules/grafx/src/renderable-shapes/index.js","node_modules/grafx/src/renderable-shapes/src/renderable-shape-factory.js","node_modules/grafx/src/renderable-shapes/src/renderable-shape-store.js","node_modules/grafx/src/renderable-shapes/src/shape-configs/capsule-renderable-shape.js","node_modules/grafx/src/renderable-shapes/src/shape-configs/cube-renderable-shape.js","node_modules/grafx/src/renderable-shapes/src/shape-configs/icosahedron-renderable-shape.js","node_modules/grafx/src/renderable-shapes/src/shape-configs/icosphere-renderable-shape.js","node_modules/grafx/src/renderable-shapes/src/shape-configs/lat-long-sphere-renderable-shape.js","node_modules/grafx/src/renderable-shapes/src/shape-configs/tetrahedron-renderable-shape.js","node_modules/grafx/src/src/grafx-controller.js","node_modules/grafx/src/src/light.js","node_modules/grafx/src/src/scene.js","node_modules/grafx/src/util/index.js","node_modules/grafx/src/util/src/geometry.js","node_modules/grafx/src/util/src/gl-util.js","node_modules/grafx/src/util/src/hash-map.js","node_modules/grafx/src/util/src/util.js","node_modules/lsl-animatex/src/animation-job.js","node_modules/lsl-animatex/src/animator.js","node_modules/lsl-animatex/src/frame-latency-profiler.js","node_modules/lsl-animatex/src/index.js","node_modules/lsl-animatex/src/persistent-animation-job.js","node_modules/lsl-animatex/src/transient-animation-job.js","node_modules/lsl-animatex/src/util.js","node_modules/lsl-physx/src/collisions/collidables/index.js","node_modules/lsl-physx/src/collisions/collidables/src/aabb-collidable.js","node_modules/lsl-physx/src/collisions/collidables/src/capsule-collidable.js","node_modules/lsl-physx/src/collisions/collidables/src/collidable.js","node_modules/lsl-physx/src/collisions/collidables/src/line-segment.js","node_modules/lsl-physx/src/collisions/collidables/src/obb-collidable.js","node_modules/lsl-physx/src/collisions/collidables/src/sphere-collidable.js","node_modules/lsl-physx/src/collisions/collision-detection/index.js","node_modules/lsl-physx/src/collisions/collision-detection/src/aabb-collision-detection.js","node_modules/lsl-physx/src/collisions/collision-detection/src/capsule-collision-detection.js","node_modules/lsl-physx/src/collisions/collision-detection/src/obb-collision-detection.js","node_modules/lsl-physx/src/collisions/collision-detection/src/sphere-collision-detection.js","node_modules/lsl-physx/src/collisions/contact-calculation/index.js","node_modules/lsl-physx/src/collisions/contact-calculation/src/aabb-contact-calculation.js","node_modules/lsl-physx/src/collisions/contact-calculation/src/capsule-contact-calculation.js","node_modules/lsl-physx/src/collisions/contact-calculation/src/obb-contact-calculation.js","node_modules/lsl-physx/src/collisions/contact-calculation/src/sphere-contact-calculation.js","node_modules/lsl-physx/src/collisions/index.js","node_modules/lsl-physx/src/collisions/src/collidable-factories.js","node_modules/lsl-physx/src/collisions/src/collidable-physics-job.js","node_modules/lsl-physx/src/collisions/src/collidable-store.js","node_modules/lsl-physx/src/collisions/src/collision-handler.js","node_modules/lsl-physx/src/collisions/src/collision-utils.js","node_modules/lsl-physx/src/index.js","node_modules/lsl-physx/src/integrator/index.js","node_modules/lsl-physx/src/integrator/src/integrator.js","node_modules/lsl-physx/src/integrator/src/rk4-integrator.js","node_modules/lsl-physx/src/src/physics-engine.js","node_modules/lsl-physx/src/src/physics-job.js","node_modules/lsl-physx/src/src/physics-state.js","node_modules/lsl-physx/src/util/index.js","node_modules/lsl-physx/src/util/src/force-utils.js","node_modules/lsl-physx/src/util/src/geometry.js","node_modules/lsl-physx/src/util/src/inertia-tensor-utils.js","node_modules/lsl-physx/src/util/src/util.js","src/config/index.js","src/config/src/box-config.js","src/config/src/camera-config.js","src/config/src/camera-folder-config.js","src/config/src/capsule-config.js","src/config/src/general-config.js","src/config/src/physics-config.js","src/config/src/physics-folder-config.js","src/config/src/sphere-config.js","src/config/src/wall-config.js","src/main.js","src/model-controllers/drop-object/drop-object-config-controller.js","src/model-controllers/drop-object/drop-object-config.js","src/model-controllers/scene/scene-config.js","src/model-controllers/scene/scene-impl.js","src/model-controllers/simulation-config-controller.js","src/model-controllers/single-object/single-object-controller.js","src/model-controllers/trigger-collision/trigger-collision-config-controller.js","src/model-controllers/trigger-collision/trigger-collision-config.js","src/programs/general-model-program/general-model-program-config.js","src/programs/index.js"],"names":[],"mappings":"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","file":"dynamics-example.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","export * from './src';\n","/**\n * This module re-exports all of the exports in the grafx framework. This makes the entire framework\n * conveniently accessible via this single module.\n */\n\nexport * from 'lsl-animatex';\nexport * from 'grafx';\nexport * from 'lsl-physx';\n\nexport * from './src/collidable-physics-model-controller';\nexport * from './src/config-controller';\nexport * from './src/game-controller';\nexport * from './src/game-scene';\nexport * from './src/input-controller';\nexport * from './src/physics-model-controller';\nexport * from './src/spring-follow-camera';\n\nexport * from './wall';\n","import {PhysicsModelController} from './physics-model-controller';\nimport {CollidablePhysicsJob, PhysicsJob, PhysicsState} from 'lsl-physx';\n\n/**\n * This class represents a collidable physics-based model-controller.\n *\n * @abstract\n */\nclass CollidablePhysicsModelController extends PhysicsModelController {\n  /**\n   * @param {ModelController|ModelControllerConfig} modelControllerOrParams\n   * @param {CollidablePhysicsJob|DynamicsConfig} physicsJobOrDynamicsParams\n   * @param {RenderableShapeConfig} [shapeParams]\n   * @param {Array.<ForceApplier>} forceAppliers\n   */\n  constructor(modelControllerOrParams, physicsJobOrDynamicsParams, shapeParams, forceAppliers) {\n    super(modelControllerOrParams, physicsJobOrDynamicsParams, shapeParams, forceAppliers);\n\n    if (physicsJobOrDynamicsParams instanceof CollidablePhysicsJob) {\n      this.physicsJob = physicsJobOrDynamicsParams;\n    } else {\n      const state = new PhysicsState(physicsJobOrDynamicsParams);\n      this.physicsJob = new CollidablePhysicsJob(shapeParams, state, forceAppliers, this,\n          collision => this.handleCollision(collision));\n    }\n\n    // CollidablePhysicsModelController is an abstract class. It should not be instantiated directly.\n    if (new.target === CollidablePhysicsModelController) {\n      throw new TypeError('Cannot construct CollidablePhysicsModelController instances directly');\n    }\n  }\n\n  /**\n   * This callback is triggered in response to a collision.\n   *\n   * @param {Collision} collision\n   * @returns {boolean} True if this needs the standard collision restitution to proceed.\n   * @abstract\n   */\n  handleCollision(collision) {\n    // Extending classes should implement this method.\n    throw new TypeError('Method not implemented');\n  }\n}\n\nexport {CollidablePhysicsModelController};\n\n/**\n * @typedef {RenderableShapeConfig&CollidableShapeConfig} RenderableAndCollidableShapeConfig\n */\n","import {\n  createHslColorString,\n  debounce,\n  find,\n  getViewportSize,\n  hslToHsv,\n  hsvToHsl,\n  hslToRgb,\n  isInt,\n} from 'grafx';\n\nconst _SMALL_SCREEN_WIDTH_THRESHOLD = 800;\n\n/**\n * This top-level ConfigController class wraps the dat.GUI library and provides higher-level\n * configuration functionality.\n *\n * ## Configuring Parameters\n *\n * Consumers of this module will need to specify configuration parameters with a certain form. For\n * each property on a config object, an item will be created in the corresponding dat.GUI folder.\n * The type and specifics of the menu item depends on the value assigned to the config property:\n *\n * - Toggle item:\n *   - Created if the config property is a boolean.\n * - Trigger item:\n *   - Created if the config property is a function.\n * - Slider item:\n *   - Created if the config property is an object with 'min', 'max', and 'start' properties.\n *   - When the config object is parsed, this initial config object will be removed and replaced\n *     with only the current actual value.\n *   - The intervals of the slider are automatically determined by the dat.GUI library and depend on\n *     the type of the 'min'/'max'/'value' properties (int vs float). See the dat.GUI documentation\n *     for more info.\n * - Color item:\n *   - Created if the config property is an object with 'h'/'s'/'l' properties.\n *   - When the config object is parsed, this initial config object will be replaced with a new\n *     object that has 'h'/'s'/'v' properties and an 'hsl' property, which is an object containing\n *     'h'/'s'/'l' properties and a 'colorString' property that contains a valid color string to\n *     assign to a CSS property.\n *   - All 'h'/'s'/'l' and 'h'/'s'/'v' values should be in the range of [0,1].\n * - Text item:\n *   - Created if the config property is a String.\n */\nclass ConfigController {\n  constructor() {\n    this._datGuiWidth = 300;\n    this._gui = null;\n  }\n\n  /**\n   * Sets up the dat.GUI controller.\n   */\n  initialize() {\n    // Create the dat.GUI menu.\n    this._createGuiIfNotCreated(true);\n    this._gui.width = this._datGuiWidth;\n\n    // Automatically close the menu on smaller screens.\n    // TODO: Check that the menu is closed initially (with no resize event) if the page loads at too small a width.\n    const debouncedResize = debounce(() => this._onResize(), 300);\n    window.addEventListener('resize', debouncedResize, false);\n  }\n\n  /**\n   * Clears the dat.GUI menu.\n   */\n  destroy() {\n    this._gui.destroy();\n  }\n\n  /**\n   * @param {boolean} isGuiVisible\n   * @private\n   */\n  _createGuiIfNotCreated(isGuiVisible) {\n    if (this._gui) {\n      if (isGuiVisible) {\n        this._gui.domElement.style.display = 'block';\n      }\n    } else {\n      this._gui = new dat.GUI();\n      if (!isGuiVisible) {\n        this._gui.domElement.style.display = 'none';\n      }\n    }\n  }\n\n  /**\n   * Creates a folder with the given configuration underneath the given parent folder.\n   *\n   * @param {MenuFolderConfig} folderConfig\n   * @param {dat.gui.GUI} [parentFolder] If not given, the folder is created at the top level.\n   * @param {Object} [onChangeListeners] A map from labels to on-change handlers.\n   */\n  createFolder(folderConfig, parentFolder, onChangeListeners) {\n    this._createGuiIfNotCreated(false);\n\n    parentFolder = parentFolder || this._gui;\n\n    // TODO: Copy the original config and store it somehow on the dat.GUI menu item? This is important for resetting configs later (from the other controller).\n    const folder = parentFolder.addFolder(folderConfig.label);\n\n    folderConfig.folder = folder;\n\n    this._createItems(folderConfig);\n\n    // Add listeners from the config file.\n    this._addOnChangeListeners(folderConfig, folderConfig.onChangeListeners, true);\n\n    // Add listeners from the caller of this method.\n    this._addOnChangeListeners(folderConfig, onChangeListeners, false);\n\n    if (folderConfig.isOpen) {\n      folder.open();\n    }\n\n    // Recursively create descendant folders.\n    if (folderConfig.childFolders) {\n      this.createFolders(folderConfig.childFolders, folder);\n    }\n  }\n\n  /**\n   * @param {Array.<MenuFolderConfig>} folderConfigs\n   * @param {dat.gui.GUI} parentFolder\n   */\n  createFolders(folderConfigs, parentFolder) {\n    folderConfigs.forEach(folderConfig => this.createFolder(folderConfig, parentFolder));\n  }\n\n  /**\n   * @param {MenuFolderConfig} folderConfig\n   * @param {string} label\n   * @param {Function} callback\n   */\n  addOnChangeListener(folderConfig, label, callback) {\n    if (folderConfig.items[label]) {\n      folderConfig.items[label].onChangeListeners.push(callback);\n    } else {\n      console.warn('Attempting to add on-change listener for a non-existent config', label,\n          folderConfig);\n    }\n  }\n\n  hideMenu() {\n    console.info('Hide Menu clicked');\n    document.querySelector('body > .dg').style.display = 'none';\n  }\n\n  /**\n   * NOTE: This is not idempotent. This modifies the original folderConfig.config object.\n   *\n   * @param {MenuFolderConfig} folderConfig\n   * @private\n   */\n  _createItems(folderConfig) {\n    folderConfig.items = {};\n\n    Object.keys(folderConfig.config).forEach((itemConfigKey) => {\n      // Do not expose internal configurations to the user.\n      if (itemConfigKey.substr(0, 1) === '_') return;\n\n      const itemConfig = folderConfig.config[itemConfigKey];\n\n      // Determine which method to use to create the menu item.\n      const pair = find([\n        [ConfigController.isToggleItem, ConfigController._createToggleItem],\n        [ConfigController.isTriggerItem, ConfigController._createTriggerItem],\n        [ConfigController.isSliderItem, ConfigController._createSliderItem],\n        [ConfigController.isNumberItem, ConfigController._createNumberItem],\n        [ConfigController.isHslColorItem, ConfigController._createHslColorItem],\n        [ConfigController.isTextItem, ConfigController._createTextItem],\n        [ConfigController.isStringSelectorItem, ConfigController._createStringSelectorItem],\n        [ConfigController.isVec3NumberItem, ConfigController._createVec3NumberItems],\n        [ConfigController.isVec3SliderItem, ConfigController._createVec3SliderItems],\n      ], (pair) => pair[0](itemConfig));\n      if (!pair) {\n        console.warn('Unrecognized config type', itemConfig);\n        return;\n      }\n      const menuItemCreator = pair[1];\n\n      // Create the actual dat.GUI menu item and save a reference to it.\n      const menuItemData = menuItemCreator.call(this, folderConfig.config,\n          itemConfigKey, itemConfig, folderConfig.folder);\n      if (menuItemData instanceof Array) {\n        const parentMenuItemData = {onChangeListeners: []};\n\n        // Record the individual sub-items.\n        menuItemData.forEach(data => {\n          folderConfig.items[data.label] = data;\n\n          // Hook up the (parent item's) onChange listeners.\n          data.menuItem.onChange(() => {\n            data.onChangeListeners.forEach(callback => callback());\n            parentMenuItemData.onChangeListeners.forEach(callback => callback());\n          });\n        });\n\n        // Record the parent item.\n        folderConfig.items[itemConfigKey] = parentMenuItemData;\n      } else {\n        folderConfig.items[itemConfigKey] = menuItemData;\n\n        // Hook up the onChange listeners.\n        menuItemData.menuItem.onChange(() =>\n            menuItemData.onChangeListeners.forEach(callback => callback()));\n      }\n    });\n  }\n\n  /**\n   * @param {MenuFolderConfig} folderConfig\n   * @param {Object} onChangeListeners A map from labels to on-change event handlers.\n   * @param {boolean} makeInitialCallToListeners\n   * @private\n   */\n  _addOnChangeListeners(folderConfig, onChangeListeners, makeInitialCallToListeners) {\n    if (onChangeListeners) {\n      Object.keys(onChangeListeners).forEach(key => {\n        const onChangeHandler = onChangeListeners[key];\n        configController.addOnChangeListener(folderConfig, key, onChangeHandler);\n        if (makeInitialCallToListeners) {\n          onChangeHandler();\n        }\n      });\n    }\n  }\n\n  /**\n   * Close the menu on smaller screens.\n   */\n  _onResize() {\n    setTimeout(() => {\n      if (getViewportSize() < _SMALL_SCREEN_WIDTH_THRESHOLD) {\n        this._gui.close();\n      }\n    }, 10);\n  }\n\n  /**\n   * @param {Object} configObject\n   * @param {string} label\n   * @param {ToggleMenuItemConfig} itemConfig\n   * @param {dat.gui.GUI} folder\n   * @returns {MenuItemData}\n   * @private\n   */\n  static _createToggleItem(configObject, label, itemConfig, folder) {\n    return {\n      menuItem: folder.add(configObject, label),\n      onChangeListeners: []\n    };\n  }\n\n  /**\n   * @param {Object} configObject\n   * @param {string} label\n   * @param {TriggerMenuItemConfig} itemConfig\n   * @param {dat.gui.GUI} folder\n   * @returns {MenuItemData}\n   * @private\n   */\n  static _createTriggerItem(configObject, label, itemConfig, folder) {\n    return {\n      menuItem: folder.add(configObject, label),\n      onChangeListeners: []\n    };\n  }\n\n  /**\n   * @param {Object} configObject\n   * @param {string} label\n   * @param {SliderMenuItemConfig} itemConfig\n   * @param {dat.gui.GUI} folder\n   * @returns {MenuItemData}\n   * @private\n   */\n  static _createSliderItem(configObject, label, itemConfig, folder) {\n    // Replace the original itemConfig on the configObject with the actual starting value.\n    configObject[label] = itemConfig.start;\n\n    const listeners = isInt(itemConfig.min) && isInt(itemConfig.max)\n        ? [ConfigController._truncateToInt.bind(null, configObject, label)]\n        : [];\n\n    // Create the menu item.\n    return {\n      menuItem: folder.add(configObject, label, itemConfig.min, itemConfig.max),\n      onChangeListeners: listeners\n    };\n  }\n\n  /**\n   * @param {Object} configObject\n   * @param {string} label\n   * @param {NumberMenuItemConfig} itemConfig\n   * @param {dat.gui.GUI} folder\n   * @returns {MenuItemData}\n   * @private\n   */\n  static _createNumberItem(configObject, label, itemConfig, folder) {\n    // Create the menu item.\n    return {\n      menuItem: folder.add(configObject, label),\n      onChangeListeners: []\n    };\n  }\n\n  /**\n   * This is used to force int sliders to only produce ints.\n   *\n   * This shouldn't be needed, but dat.GUI doesn't seem to be behaving consistently.\n   *\n   * @param configObject\n   * @param label\n   * @private\n   */\n  static _truncateToInt(configObject, label) {\n    configObject[label] = parseInt(configObject[label]);\n  }\n\n  /**\n   * @param {Object} configObject\n   * @param {string} label\n   * @param {HslColorMenuItemConfig} itemConfig\n   * @param {dat.gui.GUI} folder\n   * @returns {MenuItemData}\n   * @private\n   */\n  static _createHslColorItem(configObject, label, itemConfig, folder) {\n    // Create the property that the menu item will use.\n    itemConfig = hslToHsv(itemConfig);\n    configObject[label] = itemConfig;\n\n    // Set up a listener that will keep derived HSL values in sync with the native HSV values used\n    // by the dat.GUI menu item.\n    const calculateHslValues = () => {\n      const hsl = hsvToHsl(configObject[label]);\n      const rgb = hslToRgb(hsl);\n      itemConfig.hsl = hsl;\n      itemConfig.rgb = rgb;\n      itemConfig.rgbVec = vec3.fromValues(rgb.r, rgb.g, rgb.b);\n      itemConfig.hsl.colorString = createHslColorString(hsl);\n    };\n    calculateHslValues();\n\n    // Create the menu item.\n    return {\n      menuItem: folder.addColor(configObject, label),\n      onChangeListeners: [calculateHslValues]\n    };\n  }\n\n  /**\n   * @param {Object} configObject\n   * @param {string} label\n   * @param {TextMenuItemConfig} itemConfig\n   * @param {dat.gui.GUI} folder\n   * @returns {MenuItemData}\n   * @private\n   */\n  static _createTextItem(configObject, label, itemConfig, folder) {\n    return {\n      menuItem: folder.add(configObject, label),\n      onChangeListeners: []\n    };\n  }\n\n  /**\n   * @param {Object} configObject\n   * @param {string} label\n   * @param {Vec3NumberMenuItemConfig} itemConfig\n   * @param {dat.gui.GUI} folder\n   * @returns {Array.<MenuItemData>}\n   * @private\n   */\n  static _createVec3NumberItems(configObject, label, itemConfig, folder) {\n    const xLabel = `${label}X`;\n    const yLabel = `${label}Y`;\n    const zLabel = `${label}Z`;\n\n    // Set up a listener that will keep the derived vec3 in sync with its individual coordinates.\n    const _updateVec3 = () => vec3.set(itemConfig, configObject[xLabel], configObject[yLabel],\n        configObject[zLabel]);\n\n    return [\n      [0, xLabel],\n      [1, yLabel],\n      [2, zLabel]\n    ].map(indexAndLabel => {\n      const index = indexAndLabel[0];\n      const label = indexAndLabel[1];\n\n      // Create the individual vec3 coordinate property and initial value.\n      configObject[label] = itemConfig[index];\n\n      // Create the individual vec3 coordinate menu item.\n      return {\n        menuItem: folder.add(configObject, label),\n        onChangeListeners: [_updateVec3],\n        label: label\n      };\n    });\n  }\n\n  /**\n   * @param {Object} configObject\n   * @param {string} label\n   * @param {Vec3SliderMenuItemConfig} itemConfig\n   * @param {dat.gui.GUI} folder\n   * @returns {Array.<MenuItemData>}\n   * @private\n   */\n  static _createVec3SliderItems(configObject, label, itemConfig, folder) {\n    // Replace the original itemConfig on the configObject with the actual starting value.\n    configObject[label] = itemConfig.start;\n\n    const xLabel = `${label}X`;\n    const yLabel = `${label}Y`;\n    const zLabel = `${label}Z`;\n\n    // Set up a listener that will keep the derived vec3 in sync with its individual coordinates.\n    const _updateVec3 = () => vec3.set(configObject[label], configObject[xLabel],\n        configObject[yLabel], configObject[zLabel]);\n\n    return [\n      [0, xLabel],\n      [1, yLabel],\n      [2, zLabel]\n    ].map(indexAndLabel => {\n      const index = indexAndLabel[0];\n      const label = indexAndLabel[1];\n      const start = itemConfig.start[index];\n      const min = itemConfig.min[index];\n      const max = itemConfig.max[index];\n\n      // Create the individual vec3 coordinate property and initial value.\n      configObject[label] = start;\n\n      // Create the individual vec3 coordinate menu item.\n      return {\n        menuItem: folder.add(configObject, label, min, max),\n        onChangeListeners: [_updateVec3],\n        label: label\n      };\n    });\n  }\n\n  /**\n   * @param {Object} configObject\n   * @param {string} label\n   * @param {StringSelectorMenuItemConfig} itemConfig\n   * @param {dat.gui.GUI} folder\n   * @returns {MenuItemData}\n   * @private\n   */\n  static _createStringSelectorItem(configObject, label, itemConfig, folder) {\n    // Replace the original itemConfig on the configObject with the actual starting value.\n    configObject[label] = itemConfig.start;\n\n    return {\n      menuItem: folder.add(configObject, label, itemConfig.options),\n      onChangeListeners: []\n    };\n  }\n\n  /**\n   * @param {MenuItemConfig} itemConfig\n   * @returns {boolean}\n   */\n  static isToggleItem(itemConfig) {\n    return typeof itemConfig === 'boolean';\n  }\n\n  /**\n   * @param {MenuItemConfig} itemConfig\n   * @returns {boolean}\n   */\n  static isTriggerItem(itemConfig) {\n    return typeof itemConfig === 'function';\n  }\n\n  /**\n   * @param {MenuItemConfig} itemConfig\n   * @returns {boolean}\n   */\n  static isSliderItem(itemConfig) {\n    return typeof itemConfig === 'object' &&\n        typeof itemConfig.start === 'number' &&\n        typeof itemConfig.min === 'number' &&\n        typeof itemConfig.max === 'number';\n  }\n\n  /**\n   * @param {MenuItemConfig} itemConfig\n   * @returns {boolean}\n   */\n  static isNumberItem(itemConfig) {\n    return typeof itemConfig === 'number';\n  }\n\n  /**\n   * @param {MenuItemConfig} itemConfig\n   * @returns {boolean}\n   */\n  static isHslColorItem(itemConfig) {\n    return typeof itemConfig === 'object' &&\n        typeof itemConfig.h === 'number' &&\n        typeof itemConfig.s === 'number' &&\n        typeof itemConfig.l === 'number';\n  }\n\n  /**\n   * @param {MenuItemConfig} itemConfig\n   * @returns {boolean}\n   */\n  static isTextItem(itemConfig) {\n    return typeof itemConfig === 'string';\n  }\n\n  /**\n   * @param {MenuItemConfig} itemConfig\n   * @returns {boolean}\n   */\n  static isStringSelectorItem(itemConfig) {\n    return typeof itemConfig === 'object' &&\n        typeof itemConfig.start === 'string' &&\n        itemConfig.options instanceof Array;\n  }\n\n  /**\n   * @param {MenuItemConfig} itemConfig\n   * @returns {boolean}\n   */\n  static isVec3NumberItem(itemConfig) {\n    return (itemConfig instanceof Float32Array || itemConfig instanceof Array) &&\n        itemConfig.length === 3;\n  }\n\n  /**\n   * @param {MenuItemConfig} itemConfig\n   * @returns {boolean}\n   */\n  static isVec3SliderItem(itemConfig) {\n    return typeof itemConfig === 'object' &&\n        ConfigController.isVec3NumberItem(itemConfig.start) &&\n        ConfigController.isVec3NumberItem(itemConfig.min) &&\n        ConfigController.isVec3NumberItem(itemConfig.max);\n  }\n}\n\nconst configController = new ConfigController();\n\nexport {configController};\n\n/**\n * @typedef {Object} MenuItemData\n * @property {dat.gui.controller} menuItem The actual dat.GUI menu item.\n * @property {Array.<Function>} onChangeListeners onChange listeners for the menu item.\n * @property {string} [label] The label used for the menu item.\n */\n\n/**\n * @typedef {Object} MenuFolderConfig\n * @property {string} label\n * @property {Object} config A map from labels to MenuItemConfigs. Any config item whose label\n * starts with '_' will be treated as internal and will not be exposed to the user.\n * @property {boolean} [isOpen=false]\n * @property {Object} [onChangeListeners] A map from labels to on-change event handlers.\n * @property {Array.<MenuFolderConfig>} [childFolders]\n * @property {Object} [items] A map from labels to MenuItemDatas.\n * @property {dat.gui.GUI} [folder] Created and added by the ConfigController after registering the\n * folder.\n */\n\n/**\n * @typedef {ToggleMenuItemConfig|TriggerMenuItemConfig|SliderMenuItemConfig|NumberMenuItemConfig|HslColorMenuItemConfig|TextMenuItemConfig|StringSelectorMenuItemConfig|Vec3NumberMenuItemConfig|Vec3SliderMenuItemConfig} MenuItemConfig\n */\n\n/**\n * @typedef {boolean} ToggleMenuItemConfig\n */\n\n/**\n * @typedef {Function} TriggerMenuItemConfig\n */\n\n/**\n * @typedef {Object} SliderMenuItemConfig\n * @property {number} start\n * @property {number} min\n * @property {number} max\n */\n\n/**\n * @typedef {number} NumberMenuItemConfig\n */\n\n/**\n * @typedef {Object} HslColorMenuItemConfig\n * @property {number} h A value from 0 to 1.\n * @property {number} s A value from 0 to 1.\n * @property {number} l A value from 0 to 1.\n */\n\n/**\n * @typedef {string} TextMenuItemConfig\n */\n\n/**\n * @typedef {Object} StringSelectorMenuItemConfig\n * @property {string} start\n * @property {Array.<String>} options\n */\n\n/**\n * @typedef {vec3} Vec3NumberMenuItemConfig\n */\n\n/**\n * @typedef {Object} Vec3SliderMenuItemConfig\n * @property {vec3} start\n * @property {vec3} min\n * @property {vec3} max\n */\n","import { animator } from 'lsl-animatex';\nimport {\n  GrafxController,\n  handlePageFocusChange,\n}\nfrom 'grafx';\nimport { configController } from './config-controller';\nimport { InputController } from './input-controller';\n\n/**\n * This top-level Controller class initializes and runs the rest of the app.\n */\nclass GameController extends GrafxController {\n  constructor() {\n    super();\n\n    this.isGameOver = true;\n    this._inputCtrl = null;\n  }\n\n  /**\n   * Initializes the app. After this completes successfully, call run to actually start the app.\n   *\n   * @param {HTMLCanvasElement} canvas\n   * @param {Array.<ProgramWrapperConfig>} programConfigs Configurations for program wrappers that\n   * should be pre-cached before starting the rest of the app.\n   * @param {Array.<String>} texturePaths Texture images that should be pre-cached before\n   * starting the rest of the app.\n   * @param {Function.<Scene>} SceneImpl A class that extends GameScene.\n   * @returns {Promise}\n   */\n  initialize(canvas, programConfigs, texturePaths, SceneImpl) {\n    this._canvas = canvas;\n\n    configController.initialize();\n    this._setUpInput();\n\n    return super.initialize(canvas, programConfigs, texturePaths, SceneImpl);\n  }\n\n  destroy() {\n    this._inputCtrl.destroy();\n  }\n\n  /**\n   * Runs the app. This should be called after initialize.\n   *\n   * A few things happen if this is run in dev mode:\n   * - The draw and update steps of each frame are wrapped in a try/catch block.\n   * - This method returns a Promise that rejects if an error is throw during any update or draw\n   *   step and resolves when this controller has finished (currently never)\n   */\n  run() {\n    handlePageFocusChange(hasFocus => this._onPageFocusChange(hasFocus));\n    super.run();\n  }\n\n  pause() {\n    animator.pause();\n  }\n\n  unpause() {\n    animator.unpause();\n  }\n\n  /**\n   * @returns {boolean}\n   */\n  get isPaused() {\n    return animator.isPaused;\n  }\n\n  /**\n   * @param {boolean} hasFocus\n   * @private\n   */\n  _onPageFocusChange(hasFocus) {\n    if (!hasFocus) {\n      this.pause();\n    }\n  }\n\n  /**\n   * @private\n   */\n  _setUpInput() {\n    this._inputCtrl = new InputController();\n    this._inputCtrl.preventDefaultBrowserBehaviorForKey('SPACE');\n  }\n\n  /**\n   * Initializes the scene.\n   *\n   * @param {Function.<Scene>} SceneImpl A class that extends GameScene.\n   * @returns {Promise}\n   * @protected\n   */\n  _setUpScene(SceneImpl) {\n    this._scene = new SceneImpl({\n      gl: this._gl,\n      getViewMatrix: () => this._getViewMatrix(),\n      getProjectionMatrix: () => this._getProjectionMatrix(),\n    }, this, this._inputCtrl);\n    return this._scene.getIsReady().then(() => {\n      this._scene.reset();\n      this._updateAspectRatio(); // TODO: This should NOT happen here or using the glUtil globals.\n    });\n  }\n}\n\nexport { GameController };\n","import { Scene } from 'grafx';\nimport { Aabb } from 'lsl-physx';\n\n/**\n * This class handles the overall scene.\n *\n * @abstract\n */\nclass GameScene extends Scene {\n  /**\n   * @param {ModelGroupControllerConfig} modelControllerParams\n   * @param {GameController} gameCtrl\n   * @param {InputController} inputCtrl\n   * @param {number} renderDistance\n   */\n  constructor(modelControllerParams, gameCtrl, inputCtrl, renderDistance) {\n    super(modelControllerParams);\n\n    // GameScene is an abstract class. It should not be instantiated directly.\n    if (new.target === GameScene) {\n      throw new TypeError('Cannot construct GameScene instances directly');\n    }\n\n    this._gameCtrl = gameCtrl;\n    this._inputCtrl = inputCtrl;\n    this._renderDistance = renderDistance;\n    this._bounds = Aabb.createAsUniformAroundCenter(\n      vec3.fromValues(0, 0, 0), this._renderDistance);\n  }\n\n  reset() {\n    this.centerOfVolume = vec3.fromValues(0, 0, 0);\n    super.reset();\n  }\n\n  /** @returns {Aabb} */\n  get bounds() {\n    return this._bounds;\n  }\n  /** @returns {vec3} */\n  get centerOfVolume() {\n    return this._bounds.centerOfVolume;\n  }\n  /** @param {vec3} value */\n  set centerOfVolume(value) {\n    this._bounds.setAsUniformAroundCenter(value, this._renderDistance);\n  }\n}\n\nexport { GameScene };\n","import {keyCodes} from 'grafx';\n\n// TODO: Figure out how to capture: tab, space, escape, enter; prevent their default behaviors when\n// listeners have been registered for them.\n\n/**\n * This class handles user input.\n */\nclass InputController {\n  constructor() {\n    this._keyDownListeners = {};\n    this._keyUpListeners = {};\n    this._currentlyPressedKeys = {};\n    this._keysToPreventDefaultBrowserBehaviorFor = {};\n\n    this._mainKeyDownListener = event => this._handleKeyDown(event);\n    this._mainKeyUpListener = event => this._handleKeyUp(event);\n    this._mainKeyPressListener = event => this._handleKeyPress(event);\n\n    window.addEventListener('keydown', this._mainKeyDownListener, false);\n    window.addEventListener('keyup', this._mainKeyUpListener, false);\n    window.addEventListener('keypress', this._mainKeyPressListener, false);\n  }\n\n  destroy() {\n    window.removeEventListener('keydown', this._mainKeyDownListener);\n    window.removeEventListener('keyup', this._mainKeyUpListener);\n    window.removeEventListener('keypress', this._mainKeyPressListener);\n  }\n\n  /**\n   * Registers a callback to be called whenever the given key is pressed.\n   *\n   * @param {string} key\n   * @param {Function} callback\n   */\n  addKeyDownListener(key, callback) {\n    let listenersForKey = this._keyDownListeners[keyCodes[key]];\n\n    // Make sure the listener list is initialized for this key.\n    if (!listenersForKey) {\n      listenersForKey = new Set();\n      this._keyDownListeners[keyCodes[key]] = listenersForKey;\n    }\n\n    listenersForKey.add(callback);\n  }\n\n  /**\n   * Registers a callback to be called whenever the given key is lifted.\n   *\n   * @param {string} key\n   * @param {Function} callback\n   */\n  addKeyUpListener(key, callback) {\n    let listenersForKey = this._keyUpListeners[keyCodes[key]];\n\n    // Make sure the listener list is initialized for this key.\n    if (!listenersForKey) {\n      listenersForKey = new Set();\n      this._keyUpListeners[keyCodes[key]] = listenersForKey;\n    }\n\n    listenersForKey.add(callback);\n  }\n\n  /**\n   * Un-registers a callback to be called whenever the given key is pressed.\n   *\n   * @param {string} key\n   * @param {Function} callback\n   */\n  removeKeyDownListener(key, callback) {\n    this._keyDownListeners[keyCodes[key]].delete(callback);\n  }\n\n  /**\n   * Un-registers a callback to be called whenever the given key is lifted.\n   *\n   * @param {string} key\n   * @param {Function} callback\n   */\n  removeKeyUpListener(key, callback) {\n    this._keyUpListeners[keyCodes[key]].delete(callback);\n  }\n\n  /**\n   * Registers the given key to prevent the default browser behavior when it is pressed.\n   *\n   * @param {string} key\n   */\n  preventDefaultBrowserBehaviorForKey(key) {\n    this._keysToPreventDefaultBrowserBehaviorFor[keyCodes[key]] = true;\n  }\n\n  /**\n   * Un-registers the given key to prevent the default browser behavior when it is pressed.\n   *\n   * @param {string} key\n   */\n  allowDefaultBrowserBehaviorForKey(key) {\n    delete this._keysToPreventDefaultBrowserBehaviorFor[keyCodes[key]];\n  }\n\n  /**\n   * Determines whether the given key is currently pressed down.\n   *\n   * @param {string} key\n   * @returns {boolean}\n   */\n  isKeyCurrentlyPressed(key) {\n    return !!this._currentlyPressedKeys[keyCodes[key]];\n  }\n\n  /**\n   * Saves the given key as being pressed.\n   *\n   * @param {KeyboardEvent} event\n   * @private\n   */\n  _handleKeyDown(event) {\n    // If this key was already being pressed down, then do nothing (when a key is held down, many\n    // keydown events are actually triggered).\n    if (this._currentlyPressedKeys[event.keyCode]) {\n      return;\n    }\n\n    // Mark this key as being pressed down.\n    this._currentlyPressedKeys[event.keyCode] = true;\n\n    // Call any registered key-down listeners for this key.\n    const listeners = this._keyDownListeners[event.keyCode];\n    if (listeners) {\n      listeners.forEach(listener => listener());\n    }\n  }\n\n  /**\n   * Calls all key-up listeners that have been registered for the given key.\n   *\n   * @param {KeyboardEvent} event\n   * @private\n   */\n  _handleKeyUp(event) {\n    // Mark this key as no longer being pressed down.\n    delete this._currentlyPressedKeys[event.keyCode];\n\n    // Call any registered key-up listeners for this key.\n    const listeners = this._keyUpListeners[event.keyCode];\n    if (listeners) {\n      listeners.forEach(listener => listener());\n    }\n  }\n\n  /**\n   * Prevents the default browser behavior for keys that have been registered to prevent.\n   *\n   * @param {KeyboardEvent} event\n   * @private\n   */\n  _handleKeyPress(event) {\n    if (this._keysToPreventDefaultBrowserBehaviorFor[event.keyCode]) {\n      event.preventDefault();\n    }\n  }\n}\n\nexport {InputController};\n","import {isInDevMode, ModelController, StandardModelController, vec3ToString} from 'grafx';\nimport {PhysicsJob, PhysicsState} from 'lsl-physx';\n\n/**\n * This class represents a non-collidable physics-based model-controller.\n *\n * It uses composition to control an instance of a ModelController along with a corresponding\n * instance of a PhysicsJob.\n *\n * @implements {ModelControllerInterface}\n * @abstract\n */\nclass PhysicsModelController {\n  /**\n   * @param {ModelController|ModelControllerConfig} modelControllerOrParams\n   * @param {PhysicsJob|DynamicsConfig} physicsJobOrDynamicsParams\n   * @param {RenderableShapeConfig} [shapeParams]\n   * @param {Array.<ForceApplier>} [forceAppliers]\n   */\n  constructor(modelControllerOrParams, physicsJobOrDynamicsParams, shapeParams, forceAppliers) {\n    // PhysicsModelController is an abstract class. It should not be instantiated directly.\n    if (new.target === PhysicsModelController) {\n      throw new TypeError('Cannot construct PhysicsModelController instances directly');\n    }\n\n    this.modelCtrl = modelControllerOrParams instanceof ModelController\n        ? modelControllerOrParams\n        : new StandardModelController(modelControllerOrParams, shapeParams);\n\n    if (physicsJobOrDynamicsParams instanceof PhysicsJob) {\n      this.physicsJob = physicsJobOrDynamicsParams;\n    } else {\n      const state = new PhysicsState(physicsJobOrDynamicsParams);\n      this.physicsJob = new PhysicsJob(forceAppliers, state);\n    }\n\n    this._originalPosition = vec3.clone(this.physicsJob.currentState.position);\n\n    this._patchModelController({\n      /**\n       * Patches the ModelController's updateTransforms method in order to keep it's local-transform\n       * matrix in-sync with the PhysicsJob's position and orientation.\n       */\n      updateTransforms: (superVersion) => {\n        // Update the ModelController's local-transform matrix according to the PhysicsJob's\n        // current position and orientation.\n        mat4.fromRotationTranslationScale(this.modelCtrl._localTransform,\n            this.renderOrientation, this.renderPosition,\n            this.modelCtrl.scale);\n        superVersion();\n      },\n    });\n\n    if (isInDevMode) {\n      const controllerName = this.constructor.name.replace('Controller', '');\n      console.debug(`${controllerName} created @ ${vec3ToString(this.position)}`);\n    }\n  }\n\n  /**\n   * Patches the given methods on the underlying ModelController.\n   *\n   * The patched methods are passed the original or \"super\" version of the method as the first\n   * argument; the normal method arguments are provided after.\n   *\n   * @protected\n   */\n  _patchModelController(patches) {\n    Object.keys(patches).forEach((methodName) => {\n      const newMethod = patches[methodName];\n      const superVersion = this.modelCtrl[methodName].bind(this.modelCtrl);\n      this.modelCtrl[methodName] = newMethod.bind(this.modelCtrl, superVersion);\n    });\n  }\n\n  /**\n   * Registers this controller's PhysicsJob(s) with the physics engine.\n   */\n  reset() {\n    this.modelCtrl.reset();\n    this.physicsJob.position = this._originalPosition;\n    this.physicsJob.finish();\n    this.physicsJob.start();\n  }\n\n  /**\n   * Unregisters this controller's PhysicsJob(s) with the physics engine.\n   */\n  destroy() {\n    this.modelCtrl.destroy();\n    this.physicsJob.finish();\n    if (isInDevMode) {\n      const controllerName = this.constructor.name.replace('Controller', '');\n      console.debug(`${controllerName} destroyed @ ${vec3ToString(this.position)}`);\n    }\n  }\n\n  /** @param {vec3} value */\n  set position(value) {\n    this.physicsJob.position = value;\n  }\n  /** @returns {vec3} */\n  get position() {\n    return this.physicsJob.currentState.position;\n  }\n  /** @returns {quat} */\n  get orientation() {\n    return this.physicsJob.currentState.orientation;\n  }\n  // FIXME: Can I remove this?\n  /** @returns {vec3} */\n  get velocity() {\n    return this.physicsJob.currentState.velocity;\n  }\n\n  /** @returns {vec3} */\n  get renderPosition() {\n    return this.physicsJob.renderState.position;\n  }\n  /** @returns {quat} */\n  get renderOrientation() {\n    return this.physicsJob.renderState.orientation;\n  }\n  // FIXME: Can I remove this?\n  /** @returns {vec3} */\n  get renderVelocity() {\n    return this.physicsJob.renderState.velocity;\n  }\n\n  /**\n   * @returns {DefaultModel}\n   * @protected\n   */\n  get _model() {\n    return this.modelCtrl._model;\n  }\n  /**\n   * @returns {vec3}\n   */\n  get scale() {\n    return this.modelCtrl.scale;\n  }\n  /**\n   * Returns a promise that resolves when this model controller is ready for the app to run.\n   *\n   * @returns {Promise}\n   */\n  getIsReady() {\n    return this.modelCtrl.getIsReady();\n  }\n  /**\n   * Gets the model transform matrix, in local coordinates.\n   *\n   * @returns {mat4}\n   */\n  get localTransform() {\n    return this.modelCtrl.localTransform;\n  }\n  /**\n   * Gets the model transform matrix, in world coordinates.\n   *\n   * @returns {mat4}\n   */\n  get worldTransform() {\n    return this.modelCtrl.worldTransform;\n  }\n  /**\n   * Calls update, updateTransforms, and updateChildren.\n   *\n   * @param {DOMHighResTimeStamp} currentTime\n   * @param {DOMHighResTimeStamp} deltaTime\n   */\n  updateSelfAndChildren(currentTime, deltaTime) {\n    this.modelCtrl.updateSelfAndChildren(currentTime, deltaTime);\n  }\n}\n\nexport {PhysicsModelController};\n","import {FollowCamera} from 'grafx';\n\n// TODO: Ideally, this would use the built-in physics engine; however, we I tried integrating it\n// before, I noticed some instability when moving at high speeds. This probably had something to do\n// with accessing different versions of the target position (previousState vs currentState vs\n// renderState)for force/position calculations\n\n/**\n * This class defines a spring-based follow camera.\n *\n * This camera is positioned at a relative, flexible distance and rotation from the observed target\n * and follows the target's position and orientation with a spring force tying the camera to the\n * desired position.\n *\n * A follow camera rotates in all three dimensions; it does not have a fixed roll.\n */\nclass SpringFollowCamera extends FollowCamera {\n  /**\n   * If oldCamera is given, then the state of the new camera will be initialized to match that of\n   * the old camera. This enables a smooth transition when changing cameras.\n   *\n   * @param {CameraTarget} cameraTarget\n   * @param {FollowCameraConfig} followCameraParams\n   * @param {CameraConfig} cameraParams\n   * @param {Camera} [oldCamera]\n   */\n  constructor(cameraTarget, followCameraParams, cameraParams, oldCamera) {\n    super(cameraTarget, followCameraParams, cameraParams, oldCamera);\n    // These could have been set in _matchOldCamera.\n    this._velocity = this._velocity || vec3.create();\n    this._acceleration = this._acceleration || vec3.create();\n  }\n\n  reset() {\n    super.reset();\n    vec3.copy(this._position, this._followCameraParams._intendedTranslationFromTarget);\n  }\n\n  /**\n   * @param {DOMHighResTimeStamp} currentTime\n   * @param {DOMHighResTimeStamp} deltaTime\n   */\n  update(currentTime, deltaTime) {\n    this._updateAccelerationVelocityAndPosition(deltaTime);\n    this._updateOrientation();\n  }\n\n  /**\n   * @param {DOMHighResTimeStamp} deltaTime\n   * @private\n   */\n  _updateAccelerationVelocityAndPosition(deltaTime) {\n    this._updateAcceleration();\n    this._updatePosition(deltaTime);\n    this._updateVelocity(deltaTime);\n  }\n\n  /**\n   * Update the camera's acceleration using Hooke's law and drag.\n   *\n   * @private\n   */\n  _updateAcceleration() {\n    this._applySpringAcceleration();\n    this._applySpringDamping();\n  }\n\n  /**\n   * Update the camera's acceleration using Hooke's law.\n   *\n   * acceleration = displacement * coefficient\n   *\n   * @private\n   */\n  _applySpringAcceleration() {\n    const displacement = vec3.create();\n    vec3.subtract(displacement, this._getIntendedPosition(), this._position);\n    vec3.scale(this._acceleration, displacement, this._followCameraParams.springCoefficient);\n  }\n\n  /**\n   * @private\n   */\n  _applySpringDamping() {\n    const damping = vec3.create();\n    vec3.scale(damping, this._velocity, -this._followCameraParams.dampingCoefficient);\n    vec3.add(this._acceleration, this._acceleration, damping);\n  }\n\n  /**\n   * Update the camera's velocity according to its current acceleration.\n   *\n   * @param {DOMHighResTimeStamp} deltaTime\n   * @private\n   */\n  _updateVelocity(deltaTime) {\n    vec3.scaleAndAdd(this._velocity, this._velocity, this._acceleration, deltaTime);\n  }\n\n  /**\n   * Update the camera's position according to its current velocity.\n   *\n   * @param {DOMHighResTimeStamp} deltaTime\n   * @private\n   */\n  _updatePosition(deltaTime) {\n    vec3.scaleAndAdd(this._position, this._position, this._velocity, deltaTime);\n  }\n\n  /**\n   * @param {Camera} oldCamera\n   * @protected\n   */\n  _matchOldCamera(oldCamera) {\n    super._matchOldCamera(oldCamera);\n    if (oldCamera instanceof SpringFollowCamera) {\n      this._velocity = this._velocity || vec3.create();\n      this._acceleration = this._acceleration || vec3.create();\n      vec3.copy(this._velocity, oldCamera._velocity);\n      vec3.copy(this._acceleration, oldCamera._acceleration);\n    }\n  }\n}\n\nexport {SpringFollowCamera};\n","export * from './src/wall-collidable';\nexport * from './src/wall-controller';\n","import { Aabb } from 'lsl-physx';\n\n/**\n * This class represents a wall or floor.\n *\n * This is just a convenience class that extends Aabb.\n */\nclass Wall extends Aabb {\n  /**\n   * - If the x parameter is given, then a wall will be constructed along the y-z plane with its\n   * surface at the x coordinate. The y and z parameters are handled similarly.\n   * - Only one of the x/y/z parameters should be specified.\n   * - If isOpenOnPositiveSide is true, then the wall will be open toward the positive direction.\n   *\n   * @param {WallParams} wallParams\n   */\n  constructor(wallParams) {\n    let minX;\n    let minY;\n    let minZ;\n    let maxX;\n    let maxY;\n    let maxZ;\n\n    let { x, y, z, isOpenOnPositiveSide, thickness, halfSideLength } = wallParams;\n    thickness = thickness || 80000;\n    halfSideLength = halfSideLength || 80000;\n\n    if (typeof x === 'number') {\n      if (isOpenOnPositiveSide) {\n        minX = x - thickness;\n        maxX = x;\n      }\n      else {\n        minX = x;\n        maxX = x + thickness;\n      }\n      minY = -halfSideLength;\n      minZ = -halfSideLength;\n      maxY = halfSideLength;\n      maxZ = halfSideLength;\n    }\n    else if (typeof y === 'number') {\n      if (isOpenOnPositiveSide) {\n        minY = y - thickness;\n        maxY = y;\n      }\n      else {\n        minY = y;\n        maxY = y + thickness;\n      }\n      minX = -halfSideLength;\n      minZ = -halfSideLength;\n      maxX = halfSideLength;\n      maxZ = halfSideLength;\n    }\n    else {\n      if (isOpenOnPositiveSide) {\n        minZ = z - thickness;\n        maxZ = z;\n      }\n      else {\n        minZ = z;\n        maxZ = z + thickness;\n      }\n      minX = -halfSideLength;\n      minY = -halfSideLength;\n      maxX = halfSideLength;\n      maxY = halfSideLength;\n    }\n\n    super(minX, minY, minZ, maxX, maxY, maxZ, true);\n  }\n\n  /**\n   * @returns {vec3}\n   * @override\n   */\n  get scale() {\n    // Reuse the same object when this is called multiple times.\n    this._scale = this._scale || vec3.create();\n    vec3.set(this._scale, this.rangeX, this.rangeY, this.rangeZ);\n    return this._scale;\n  }\n}\n\nexport { Wall };\n","import {StandardModelController} from 'grafx';\nimport {collidableStore} from 'lsl-physx';\n\nimport {Wall} from './wall-collidable';\n\n/**\n * This class defines a wall-controller.\n */\nclass WallController extends StandardModelController {\n  /**\n   * @param {ModelControllerConfig} modelControllerParams\n   * @param {WallParams} wallParams\n   */\n  constructor(modelControllerParams, wallParams) {\n    const shapeParams = {\n      shapeId: 'CUBE',\n      isUsingSphericalNormals: wallParams.useSmoothShading,\n      textureSpan: wallParams.textureSpan\n    };\n\n    super(modelControllerParams, shapeParams);\n\n    this._collidable = new Wall(wallParams);\n    collidableStore.registerCollidable(this._collidable);\n  }\n\n  reset() {\n    // Re-size and re-position the wall.\n    mat4.fromTranslation(this._localTransform, this._collidable.centerOfVolume);\n    mat4.scale(this._localTransform, this._localTransform, this._collidable.scale);\n\n    super.reset();\n  }\n\n  /**\n   * Called when this is done being used, and is being destroyed from memory.\n   */\n  destroy() {\n    super.destroy();\n    collidableStore.unregisterCollidable(this._collidable);\n  }\n\n  /**\n   * @param {DOMHighResTimeStamp} currentTime\n   * @param {DOMHighResTimeStamp} deltaTime\n   * @protected\n   */\n  update(currentTime, deltaTime) {}\n}\n\nexport {WallController};\n\n/**\n * @typedef {Object} WallParams\n * @property {number} x\n * @property {number} y\n * @property {number} z\n * @property {boolean} isOpenOnPositiveSide\n * @property {number} thickness\n * @property {number} halfSideLength\n * @property {boolean} useSmoothShading\n * @property {TextureSpan} textureSpan\n */\n","export * from './src/camera';\nexport * from './src/first-person-camera';\nexport * from './src/fixed-camera';\nexport * from './src/fixed-follow-camera';\nexport * from './src/follow-camera';\nexport * from './src/third-person-camera';\nexport * from './src/overhead-camera';\n","import { PersistentAnimationJob } from 'lsl-animatex';\n\n// TODO: Make the rotation quaternion based with 6DoF.\n\n// TODO: Add support for scripting the camera to follow a curve:\n// (https://msdn.microsoft.com/en-us/library/bb203908(v=xnagamestudio.31).aspx)\n\n/**\n * This class defines common camera logic.\n *\n * @abstract\n */\nclass Camera extends PersistentAnimationJob {\n  /**\n   * If oldCamera is given, then the state of the new camera will be initialized to match that of\n   * the old camera. This enables a smooth transition when changing cameras.\n   *\n   * @param {CameraConfig} cameraParams\n   * @param {Camera} [oldCamera]\n   */\n  constructor(cameraParams, oldCamera) {\n    super();\n\n    // Camera is an abstract class. It should not be instantiated directly.\n    if (new.target === Camera) {\n      throw new TypeError('Cannot construct Camera instances directly');\n    }\n\n    this._cameraParams = cameraParams;\n    this._fovY = null;\n    this._aspectRatio = null;\n    this._zNear = null;\n    this._zFar = null;\n    this._position = vec3.create();\n    this._orientation = quat.create(); // TODO: Use this.\n    this._viewMatrix = mat4.create();\n    this._projectionMatrix = mat4.create();\n    this._viewProjectionMatrix = mat4.create();\n\n    this._matchOldCamera(oldCamera);\n  }\n\n  reset() {\n    this._setPerspective(this._cameraParams.fovY, this._cameraParams.defaultAspectRatio,\n      this._cameraParams.zNear, this._cameraParams.zFar);\n  }\n\n  // TODO: Call this after adding support for dynamically switching cameras.\n  destroy() {}\n\n  /**\n   * Set this camera's orientation and position.\n   *\n   * @param {vec3} eye The camera position.\n   * @param {vec3} target The focal point.\n   * @param {vec3} up The local up direction.\n   * @param {vec3} viewDirection The (normalized) direction the camera is looking.\n   * @protected\n   */\n  _setPositionAndLookAt(eye, target, up, viewDirection) {\n    vec3.copy(this._position, eye);\n    this._setLookAtFromCurrentPosition(target, up, viewDirection);\n  }\n\n  /**\n   * Set this camera's orientation, but do not change its position.\n   *\n   * @param {vec3} target The focal point.\n   * @param {vec3} up The local up direction.\n   * @param {vec3} viewDirection The (normalized) direction the camera is looking.\n   * @protected\n   */\n  _setLookAtFromCurrentPosition(target, up, viewDirection) {\n    mat4.lookAt(this._viewMatrix, this._position, target, up);\n    quat.rotationTo(this._orientation, this._cameraParams._defaultLookAtDirection, viewDirection); // TODO: Check this; might need to swap arguments.\n    this._updateViewProjectionMatrix();\n  }\n\n  /**\n   * Translate this camera by the given amount from its current position.\n   *\n   * @param {vec3} translation\n   * @protected\n   */\n  _translate(translation) {\n    vec3.add(this._position, this._position, translation);\n  }\n\n  /**\n   * Rotate this camera by the given amount from its current orientation.\n   *\n   * @param {quat} rotation\n   * @protected\n   */\n  _rotate(rotation) {\n    // TODO\n  }\n\n  /**\n   * @param {number} fovY In radians.\n   * @param {number} aspectRatio Width / height.\n   * @param {number} zNear\n   * @param {number} zFar\n   * @protected\n   */\n  _setPerspective(fovY, aspectRatio, zNear, zFar) {\n    this._fovY = fovY;\n    this._aspectRatio = aspectRatio;\n    this._zNear = zNear;\n    this._zFar = zFar;\n    this._updateProjectionMatrix();\n  }\n\n  /**\n   * Re-calculates the view-projection matrix. This should be called any time either the view or\n   * projection matrices is updated.\n   *\n   * @protected\n   */\n  _updateProjectionMatrix() {\n    mat4.perspective(\n      this._projectionMatrix, this._fovY, this._aspectRatio, this._zNear, this._zFar);\n    this._updateViewProjectionMatrix();\n  }\n\n  /**\n   * Re-calculates the view-projection matrix. This should be called any time either the view or\n   * projection matrices is updated.\n   *\n   * @protected\n   */\n  _updateViewProjectionMatrix() {\n    mat4.multiply(this._viewProjectionMatrix, this._projectionMatrix, this._viewMatrix);\n  }\n\n  /**\n   * @param {DOMHighResTimeStamp} currentTime\n   * @param {DOMHighResTimeStamp} deltaTime\n   * @abstract\n   */\n  update(currentTime, deltaTime) {\n    // Extending classes should implement this method.\n    throw new TypeError('Method not implemented');\n  }\n\n  draw() {}\n\n  /**\n   * @param {number} fovY The vertical field of view, in radians.\n   * @protected\n   */\n  set fov(fovY) {\n    this._fovY = fovY;\n    this._updateProjectionMatrix();\n  }\n\n  /**\n   * @param {number} aspectRatio Width / height.\n   */\n  set aspectRatio(aspectRatio) {\n    this._setPerspective(this._cameraParams.fovY, aspectRatio, this._cameraParams.zNear,\n      this._cameraParams.zFar);\n  }\n\n  /** @returns {vec3} */\n  get position() {\n    return this._position;\n  }\n  /** @returns {quat} */\n  get orientation() {\n    return this._orientation;\n  }\n  /** @returns {mat4} */\n  get viewMatrix() {\n    return this._viewMatrix;\n  }\n  /** @returns {mat4} */\n  get projectionMatrix() {\n    return this._projectionMatrix;\n  }\n  /** @returns {mat4} */\n  get viewProjectionMatrix() { // TODO: Stop using the above two getters and use this instead?\n    return this._viewProjectionMatrix;\n  }\n\n  /**\n   * Update this camera's state to match the given old camera.\n   *\n   * @param {Camera} oldCamera\n   * @protected\n   */\n  _matchOldCamera(oldCamera) {\n    if (!oldCamera) {\n      return;\n    }\n    this._fovY = oldCamera._fovY;\n    this._aspectRatio = oldCamera._aspectRatio;\n    this._zNear = oldCamera._zNear;\n    this._zFar = oldCamera._zFar;\n    vec3.copy(this._position, oldCamera._position);\n    vec3.copy(this._orientation, oldCamera._orientation);\n    mat4.copy(this._viewMatrix, oldCamera._viewMatrix);\n    mat4.copy(this._projectionMatrix, oldCamera._projectionMatrix);\n    mat4.copy(this._viewProjectionMatrix, oldCamera._viewProjectionMatrix);\n  }\n}\n\nexport { Camera };\n\n/**\n * @typedef {Function} CameraConfig\n * @property {number} fovY\n * @property {number} zNear\n * @property {number} zFar\n * @property {number} defaultAspectRatio\n * @property {vec3} _defaultLookAtDirection\n */\n\n/**\n * @typedef {Object} FollowCameraConfig\n * @property {number} springCoefficient\n * @property {number} dampingCoefficient\n * @property {number} intendedDistanceFromTarget\n * @property {number} intendedRotationAngleFromTarget\n * @property {vec3} intendedRotationAxisFromTarget\n * @property {vec3} _intendedTranslationFromTarget\n */\n\n/**\n * @typedef {Object} FirstPersonCameraConfig\n * @property {vec3} intendedDisplacementFromTarget\n * @property {vec3} viewDirection\n * @property {number} targetDistance\n */\n\n/**\n * @typedef {Object} FixedCameraConfig\n * @property {vec3} position\n * @property {vec3} viewDirection\n * @property {vec3} _up\n */\n","import { Camera } from './camera';\n\n/**\n * This class defines a first-person camera.\n *\n * A first-person camera is positioned at a character and moves and rotates with the character.\n */\nclass FirstPersonCamera extends Camera {\n  /**\n   * @param {CameraTarget} cameraTarget\n   * @param {FirstPersonCameraConfig} firstPersonCameraParams\n   * @param {CameraConfig} cameraParams\n   * @param {Camera} [oldCamera]\n   */\n  constructor(cameraTarget, firstPersonCameraParams, cameraParams, oldCamera) {\n    super(cameraParams, oldCamera);\n    this._cameraTarget = cameraTarget;\n    this._firstPersonCameraParams = firstPersonCameraParams;\n    this._cameraTarget = cameraTarget;\n  }\n\n  /**\n   * @param {DOMHighResTimeStamp} currentTime\n   * @param {DOMHighResTimeStamp} deltaTime\n   */\n  update(currentTime, deltaTime) {\n    this._updatePosition();\n    this._updateOrientation();\n  }\n\n  /**\n   * @private\n   */\n  _updatePosition() {\n    const intendedPosition = this._getIntendedPosition();\n    vec3.copy(this._position, intendedPosition);\n  }\n\n  /**\n   * Update the camera's orientation using the \"look at\" method according to its position and the\n   * position of its target.\n   *\n   * @protected\n   */\n  _updateOrientation() {\n    // Get the view direction, and transform it to align with the target's orientation.\n    const viewDirection = vec3.create();\n    vec3.copy(viewDirection, this._firstPersonCameraParams.viewDirection);\n    vec3.transformQuat(viewDirection, viewDirection, this._cameraTarget.orientation);\n\n    const target = vec3.create();\n    vec3.scaleAndAdd(target, this._position, viewDirection,\n      this._firstPersonCameraParams.targetDistance);\n\n    // Initialize \"up\" as the world z-axis.\n    const up = vec3.fromValues(0, 1, 0);\n\n    // Transform \"up\" to align with the camera target's local z-axis.\n    vec3.transformQuat(up, up, this._cameraTarget.orientation);\n\n    const right = vec3.create();\n    vec3.cross(right, viewDirection, up);\n\n    // Transform \"up\" to align with the camera's local z-axis.\n    vec3.cross(up, right, viewDirection);\n\n    this._setPositionAndLookAt(this._position, target, up, viewDirection);\n  }\n\n  /**\n   * The intended position for this camera to be in according to the position and orientation of the\n   * camera target.\n   *\n   * @returns {vec3}\n   * @protected\n   * @abstract\n   */\n  _getIntendedPosition() {\n    const intendedPosition = vec3.create();\n    vec3.transformMat4(\n      intendedPosition,\n      this._firstPersonCameraParams.intendedDisplacementFromTarget,\n      this._cameraTarget.worldTransform);\n    return intendedPosition;\n  }\n}\n\nexport { FirstPersonCamera };\n","import {Camera} from './camera';\n\n/**\n * This class defines a fixed camera.\n *\n * A fixed camera's position and orientation are updated manually and remain fixed until a later\n * update.\n */\nclass FixedCamera extends Camera {\n  /**\n   * If oldCamera is given, then the state of the new camera will be initialized to match that of\n   * the old camera. This enables a smooth transition when changing cameras.\n   *\n   * @param {FixedCameraConfig} fixedCameraParams\n   * @param {CameraConfig} cameraParams\n   * @param {Camera} [oldCamera]\n   */\n  constructor(fixedCameraParams, cameraParams, oldCamera) {\n    super(cameraParams, oldCamera);\n\n    this._position = fixedCameraParams.position;\n    this._viewDirection = fixedCameraParams.viewDirection;\n    this._up = fixedCameraParams._up;\n    this.__target = vec3.create();\n  }\n\n  reset() {\n    super.reset();\n    this._update();\n  }\n\n  /**\n   * @param {DOMHighResTimeStamp} currentTime\n   * @param {DOMHighResTimeStamp} deltaTime\n   */\n  update(currentTime, deltaTime) {}\n\n  _update() {\n    vec3.normalize(this._viewDirection, this._viewDirection);\n    vec3.normalize(this._up, this._up);\n\n    // Transform \"up\" to align with the camera's local z-axis.\n    const right = vec3.create();\n    vec3.cross(right, this._viewDirection, this._up);\n    vec3.cross(this._up, right, this._viewDirection);\n\n    this._setPositionAndLookAt(this._position, this._target, this._up, this._viewDirection);\n  }\n\n  /** @param {vec3} newDirection */\n  set viewDirection(newDirection) {\n    vec3.copy(this._viewDirection, newDirection);\n    this._update();\n  }\n\n  /** @param {vec3} newUp */\n  set up(newUp) {\n    vec3.copy(this._up, newUp);\n    this._update();\n  }\n\n  /** @param {vec3} newPosition */\n  set position(newPosition) {\n    vec3.copy(this._position, newPosition);\n    this._update();\n  }\n\n  /** @returns {vec3} */\n  // TODO: Look into whatever bug prevents the parent-class getter from working.\n  get position() {\n    return this._position;\n  }\n\n  /** @returns {vec3} */\n  get viewDirection() {\n    return this._viewDirection;\n  }\n  /** @returns {vec3} */\n  get up() {\n    return this._up;\n  }\n  /**\n   * @returns {vec3}\n   * @private\n   */\n  get _target() {\n    return vec3.add(this.__target, this._position, this._viewDirection);\n  }\n\n  /**\n   * @param {Camera} oldCamera\n   * @protected\n   */\n  _matchOldCamera(oldCamera) {\n    super._matchOldCamera(oldCamera);\n    if (oldCamera instanceof FixedCamera) {\n      vec3.copy(this._viewDirection, oldCamera._viewDirection);\n      vec3.copy(this._up, oldCamera._up);\n    }\n  }\n}\n\nexport {FixedCamera};\n","import {FollowCamera} from './follow-camera';\n\n/**\n * This class defines a fixed-offset follow camera.\n *\n * This camera is positioned at a relative, fixed distance and rotation from the observed target\n * and follows the target's position and orientation at this fixed distance.\n *\n * A follow camera rotates in all three dimensions; it does not have a fixed roll.\n */\nclass FixedFollowCamera extends FollowCamera {\n  /**\n   * @param {DOMHighResTimeStamp} currentTime\n   * @param {DOMHighResTimeStamp} deltaTime\n   */\n  update(currentTime, deltaTime) {\n    this._updatePosition();\n    this._updateOrientation();\n  }\n\n  /**\n   * @private\n   */\n  _updatePosition() {\n    const intendedPosition = this._getIntendedPosition();\n    vec3.copy(this._position, intendedPosition);\n  }\n}\n\nexport {FixedFollowCamera};\n","import {ThirdPersonCamera} from './third-person-camera';\n\n/**\n * This class defines an abstract follow camera.\n *\n * This is a third-person type of camera whose roll always matches that of the target.\n */\nclass FollowCamera extends ThirdPersonCamera {\n  /**\n   * Update the camera's orientation using the \"look at\" method according to its position and the\n   * position of its target.\n   *\n   * @protected\n   */\n  _updateOrientation() {\n    const target = this._cameraTarget.position;\n\n    const viewDirection = vec3.create();\n    vec3.subtract(viewDirection, target, this._position);\n    vec3.normalize(viewDirection, viewDirection);\n\n    // Initialize \"up\" as the world z-axis.\n    const up = vec3.fromValues(0, 1, 0);\n\n    // Transform \"up\" to align with the camera target's local z-axis.\n    vec3.transformQuat(up, up, this._cameraTarget.orientation);\n\n    const right = vec3.create();\n    vec3.cross(right, viewDirection, up);\n\n    // Transform \"up\" to align with the camera's local z-axis.\n    vec3.cross(up, right, viewDirection);\n\n    this._setPositionAndLookAt(this._position, target, up, viewDirection);\n  }\n}\n\nexport {FollowCamera};\n","import {ThirdPersonCamera} from './third-person-camera';\n\n/**\n * This class defines an overhead camera.\n *\n * An overhead camera sits above the observed character and moves relative to the character without\n * rotating.\n *\n * An overhead camera's rotation with the character includes only yaw; it has a fixed pitch and\n * roll.\n */\nclass OverheadCamera extends ThirdPersonCamera {\n  /**\n   * If oldCamera is given, then the state of the new camera will be initialized to match that of\n   * the old camera. This enables a smooth transition when changing cameras.\n   *\n   * @param {CameraTarget} cameraTarget\n   * @param {FollowCameraConfig} followCameraParams\n   * @param {CameraConfig} cameraParams\n   * @param {Camera} [oldCamera]\n   */\n  constructor(cameraTarget, followCameraParams, cameraParams, oldCamera) {\n    super(cameraTarget, followCameraParams, cameraParams, oldCamera);\n\n    this.reset();\n  }\n\n  reset() {\n    super.reset();\n  }\n\n  // TODO: Implement this!\n}\n\nexport {OverheadCamera};\n","import {Camera} from './camera';\n\n/**\n * This class defines an abstract third-person camera.\n *\n * A third-person camera follows a target from a distance.\n *\n * @abstract\n */\nclass ThirdPersonCamera extends Camera {\n  /**\n   * If oldCamera is given, then the state of the new camera will be initialized to match that of\n   * the old camera. This enables a smooth transition when changing cameras.\n   *\n   * @param {CameraTarget} cameraTarget\n   * @param {FollowCameraConfig} followCameraParams\n   * @param {CameraConfig} cameraParams\n   * @param {Camera} [oldCamera]\n   */\n  constructor(cameraTarget, followCameraParams, cameraParams, oldCamera) {\n    super(cameraParams, oldCamera);\n\n    // ThirdPersonCamera is an abstract class. It should not be instantiated directly.\n    if (new.target === ThirdPersonCamera) {\n      throw new TypeError('Cannot construct ThirdPersonCamera instances directly');\n    }\n\n    this._followCameraParams = followCameraParams;\n    this._cameraTarget = cameraTarget;\n  }\n\n  /**\n   * The intended position for this camera to be in according to the position and orientation of the\n   * camera target.\n   *\n   * @returns {vec3}\n   * @protected\n   * @abstract\n   */\n  _getIntendedPosition() {\n    const intendedPosition = vec3.create();\n    vec3.transformMat4(\n        intendedPosition,\n        this._followCameraParams._intendedTranslationFromTarget,\n        this._cameraTarget.worldTransform);\n    return intendedPosition;\n  }\n\n  /** @param {CameraTarget} cameraTarget */\n  set cameraTarget(cameraTarget) {\n    this._cameraTarget = cameraTarget;\n  }\n}\n\nexport {ThirdPersonCamera};\n\n/**\n * @typedef {Object} CameraTarget\n * @property {vec3} position In world coordinates.\n * @property {quat} orientation Relative to the world axes.\n * @property {mat4} worldTransform The model transform matrix, in world coordinates.\n */\n","/**\n * This module re-exports all of the exports in the grafx framework. This makes the entire framework\n * conveniently accessible via this single module.\n */\n\nexport * from './cameras';\nexport * from './models';\nexport * from './program-wrapper';\nexport * from './renderable-shapes';\nexport * from './util';\n\nexport * from './src/grafx-controller';\nexport * from './src/light';\nexport * from './src/scene';\n","export * from './src/default-model';\nexport * from './src/invisible-model-controller';\nexport * from './src/model';\nexport * from './src/model-controller';\nexport * from './src/model-group-controller';\nexport * from './src/standard-model-controller';\n","import {createBufferFromData} from '../../util';\nimport {Model} from './model';\n\n/**\n * This class defines a default implementation of the rigid model.\n *\n * This implementation accepts a RenderableShape and applies standard OpenGL binding logic on top\n * of it.\n */\nclass DefaultModel extends Model {\n  /**\n   * @param {WebGLRenderingContext} gl\n   * @param {RenderableShape} shapeConfig\n   */\n  constructor(gl, shapeConfig) {\n    super(gl);\n    this._shapeConfig = shapeConfig;\n    this._initializeBuffers();\n    this._initializeConfigs();\n  }\n\n  _initializeBuffers() {\n    // Create, bind, and move data into buffers for the vertex positions, normals, texture\n    // coordinates, and element array.\n    this._vertexPositionsBuffer = createBufferFromData(this._gl, this._shapeConfig.vertexPositions);\n    this._vertexNormalsBuffer = createBufferFromData(this._gl, this._shapeConfig.vertexNormals);\n    this._textureCoordinatesBuffer =\n        createBufferFromData(this._gl, this._shapeConfig.textureCoordinates);\n    if (this._shapeConfig.vertexIndices) {\n      this._vertexIndicesBuffer = createBufferFromData(this._gl, this._shapeConfig.vertexIndices,\n          this._gl.ELEMENT_ARRAY_BUFFER);\n    }\n  }\n\n  _initializeConfigs() {\n    this._vertexPositionsConfig = {\n      buffer: this._vertexPositionsBuffer,\n      size: 3,\n      type: this._gl.FLOAT,\n      normalized: false,\n      stride: 0,\n      offset: 0\n    };\n    this._textureCoordinatesConfig = {\n      buffer: this._textureCoordinatesBuffer,\n      size: 2,\n      type: this._gl.FLOAT,\n      normalized: false,\n      stride: 0,\n      offset: 0\n    };\n    this._vertexNormalsConfig = {\n      buffer: this._vertexNormalsBuffer,\n      size: 3,\n      type: this._gl.FLOAT,\n      normalized: false,\n      stride: 0,\n      offset: 0\n    };\n  }\n\n  /** @returns {number} */\n  get elementCount() {\n    return this._shapeConfig.elementCount;\n  }\n\n  /** @returns {number} */\n  get mode() {\n    return this._gl.TRIANGLES;\n    //return this._gl.LINE_STRIP;// TODO: REMOVE ME\n  }\n}\n\nexport {DefaultModel};\n","import {ModelController} from './model-controller';\n\n/**\n * This class defines an extension of the model-controller class that will maintain state but will\n * never render anything.\n */\nclass InvisibleModelController extends ModelController {\n  /**\n   * @param {ModelControllerConfig} params\n   */\n  constructor(params) {\n    super(params);\n  }\n\n  destroy() {}\n\n  update(currentTime, deltaTime) {}\n\n  draw() {}\n\n  /**\n   * Initializes the program variables configuration.\n   *\n   * @protected\n   */\n  _setUpProgramVariablesConfig() {\n    this._programVariablesConfig = {};\n  }\n\n  /**\n   * Overrides the default method to instead do nothing.\n   *\n   * @param {string} id\n   * @returns {Promise}\n   */\n  _setUpProgramWrapper(id) {\n    this._programWrapperId = id;\n    this._programWrapperPromise = Promise.resolve(null);\n    return this._programWrapperPromise;\n  }\n}\n\nexport {InvisibleModelController};\n","import {PersistentAnimationJob} from 'lsl-animatex';\nimport {\n  programWrapperStore,\n  textureStore,\n} from '../../program-wrapper';\n\n/**\n * This class defines a model-controller class.\n *\n * This should be extended by all components that handle models--i.e., anything that will be\n * rendering shapes.\n *\n * @implements {ModelControllerInterface}\n * @abstract\n */\nclass ModelController extends PersistentAnimationJob {\n  /**\n   * PRECONDITION: The ProgramWrapper referenced by the given params must have already been\n   * registered.\n   *\n   * @param {ModelControllerConfig} params\n   */\n  constructor(params) {\n    super();\n\n    // ModelController is an abstract class. It should not be instantiated directly.\n    if (new.target === ModelController) {\n      throw new TypeError('Cannot construct ModelController instances directly');\n    }\n\n    this._gl = params.gl;\n    this._getViewMatrix = params.getViewMatrix;\n    this._getProjectionMatrix = params.getProjectionMatrix;\n    this._getParentWorldTransform = params.getParentWorldTransform;\n    this._localTransform = mat4.create();\n    this._worldTransform = mat4.create();\n    this._texture = null;\n    this._programWrapper = null;\n    this._programWrapperId = null;\n    this._drawFrameHandler = () => this.draw();\n    this._programVariablesConfig = null;\n\n    this.position = vec3.create();\n    this.scale = vec3.fromValues(1, 1, 1);\n\n    this._setUpTexture(params.texturePath);\n    this._setUpProgramWrapper(params.programWrapperId);\n\n    this._isReadyPromise = Promise.all([\n      this._texturePromise,\n      this._programWrapperPromise,\n    ]);\n  }\n\n  reset() {}\n\n  /**\n   * Called when this is done being used, and is being destroyed from memory.\n   */\n  destroy() {\n    programWrapperStore.unregisterDrawFrameHandler(this._programWrapperId, this._drawFrameHandler);\n  }\n\n  /**\n   * Calls update, updateTransforms, and updateChildren.\n   *\n   * @param {DOMHighResTimeStamp} currentTime\n   * @param {DOMHighResTimeStamp} deltaTime\n   */\n  updateSelfAndChildren(currentTime, deltaTime) {\n    this.update(currentTime, deltaTime);\n    this.updateTransforms();\n    this.updateChildren(currentTime, deltaTime);\n  }\n\n  /**\n   * Updates relevant state for the sub-class.\n   *\n   * - This does not recursively update descendant model controllers; that's handled by\n   *   updateChildren.\n   * - This does not update the local or world-coordinate transforms; that's handled by\n   *   updateTransforms.\n   * - This is called before updateLocalTransform and updateChildren.\n   *\n   * @param {DOMHighResTimeStamp} currentTime\n   * @param {DOMHighResTimeStamp} deltaTime\n   */\n  update(currentTime, deltaTime) {\n    // Extending classes should implement this method.\n    throw new TypeError('Method not implemented');\n  }\n\n  /**\n   * Updates the world-coordinate and local-coordinate model matrices.\n   *\n   * This is called after update and before updateChildren.\n   *\n   * NOTE: All overrides of this method should update [this._localTransform].\n   */\n  updateTransforms() {\n    mat4.multiply(this._worldTransform, this._getParentWorldTransform(), this._localTransform);\n  }\n\n  /**\n   * Updates relevant state for any children model controllers.\n   *\n   * This is called after update and updateLocalTransform.\n   *\n   * @param {DOMHighResTimeStamp} currentTime\n   * @param {DOMHighResTimeStamp} deltaTime\n   */\n  updateChildren(currentTime, deltaTime) {}\n\n  /**\n   * @abstract\n   */\n  draw() {\n    // Extending classes should implement this method.\n    throw new TypeError('Method not implemented');\n  }\n\n  /**\n   * Gets the model transform matrix, in local coordinates.\n   *\n   * @returns {mat4}\n   */\n  get localTransform() {\n    return this._localTransform;\n  }\n\n  /**\n   * Gets the model transform matrix, in world coordinates.\n   *\n   * @returns {mat4}\n   */\n  get worldTransform() {\n    return this._worldTransform;\n  }\n\n  /**\n   * Returns a promise that resolves when this model controller is ready for the app to run.\n   *\n   * @returns {Promise}\n   */\n  getIsReady() {\n    return this._isReadyPromise;\n  }\n\n  /** @param {string} id */\n  set programWrapperId(id) {\n    programWrapperStore.unregisterDrawFrameHandler(this._programWrapperId, this._drawFrameHandler);\n    this._setUpProgramWrapper(id);\n  }\n\n  /** @param {string} value */\n  set texturePath(value) {\n    this._setUpTexture(value);\n  }\n\n  /**\n   * Initializes the program variables configuration.\n   *\n   * @protected\n   * @abstract\n   */\n  _setUpProgramVariablesConfig() {\n    // Extending classes should implement this method.\n    throw new TypeError('Method not implemented');\n  }\n\n  /**\n   * @param {string} [texturePath]\n   * @returns {Promise}\n   * @private\n   */\n  _setUpTexture(texturePath) {\n    this._texturePromise = texturePath\n        ? textureStore.loadTexture(this._gl, texturePath)\n        : Promise.resolve(null);\n\n    // Assign the actual texture.\n    this._texturePromise = this._texturePromise\n        .then(texture => this._texture = texture)\n        .then(() => this._setUpProgramVariablesConfig());\n\n    return this._texturePromise;\n  }\n\n  /**\n   * @param {string} id\n   * @returns {Promise}\n   * @private\n   */\n  _setUpProgramWrapper(id) {\n    this._programWrapperId = id;\n    this._programWrapperPromise = programWrapperStore.getProgramWrapperPromise(id)\n        .then(programWrapper => this._programWrapper = programWrapper);\n    Promise.all([this._programWrapperPromise, this._texturePromise])\n        .then(() => programWrapperStore.registerDrawFrameHandler(id, this._drawFrameHandler));\n    return this._programWrapperPromise;\n  }\n}\n\nexport {ModelController};\n\n/**\n * @typedef {Object} ModelControllerInterface\n * @property {Function.<Promise>} getIsReady\n * @property {Function} reset\n * @property {Function} destroy\n * @property {mat4} localTransform\n * @property {mat4} worldTransform\n * @property {vec3} position\n */\n\n/**\n * @typedef {Object} ModelControllerConfig\n * @property {WebGLRenderingContext} gl\n * @property {Function.<mat4>} getViewMatrix\n * @property {Function.<mat4>} getProjectionMatrix\n * @property {Function.<mat4>} getParentWorldTransform\n * @property {string} programWrapperId\n * @property {string} [texturePath]\n */\n\n/**\n * @typedef {Object} ModelGroupControllerConfig\n * @property {WebGLRenderingContext} gl\n * @property {Function.<mat4>} getViewMatrix\n * @property {Function.<mat4>} getProjectionMatrix\n * @property {Function.<mat4>} getParentWorldTransform\n */\n","import { PersistentAnimationJob } from 'lsl-animatex';\n\n/**\n * This class controls groups of models.\n *\n * This is useful for higher-level controllers that control other models and also transform them.\n *\n * @implements {ModelControllerInterface}\n * @abstract\n */\nclass ModelGroupController extends PersistentAnimationJob {\n  /**\n   * If either of the shader paths are omitted, then this model controller will not create a\n   * rendering program configuration.\n   *\n   * @param {ModelGroupControllerConfig} params\n   */\n  constructor(params) {\n    super();\n\n    // ModelGroupController is an abstract class. It should not be instantiated directly.\n    if (new.target === ModelGroupController) {\n      throw new TypeError('Cannot construct ModelGroupController instances directly');\n    }\n\n    this._gl = params.gl;\n    this._getViewMatrix = params.getViewMatrix;\n    this._getProjectionMatrix = params.getProjectionMatrix;\n    this._getParentWorldTransform = params.getParentWorldTransform || (() => mat4.create());\n    this._localTransform = mat4.create();\n    this._worldTransform = mat4.create();\n    this._modelCtrls = [];\n  }\n\n  destroy() {\n    this.clearModelControllers();\n  }\n\n  reset() {\n    this._triggerOnAllModelControllers('reset');\n  }\n\n  clearModelControllers() {\n    this._triggerOnAllModelControllers('destroy');\n    this._modelCtrls = [];\n  }\n\n  /**\n   * Calls update, updateTransforms, and updateChildren.\n   *\n   * @param {DOMHighResTimeStamp} currentTime\n   * @param {DOMHighResTimeStamp} deltaTime\n   */\n  updateSelfAndChildren(currentTime, deltaTime) {\n    this.update(currentTime, deltaTime);\n    this.updateTransforms();\n    this.updateChildren(currentTime, deltaTime);\n  }\n\n  /**\n   * Updates relevant state for the sub-class.\n   *\n   * - This does not recursively update descendant model controllers; that's handled by\n   *   updateChildren.\n   * - This does not update the local or world-coordinate transforms; that's handled by\n   *   updateTransforms.\n   * - This is called before updateLocalTransform and updateChildren.\n   *\n   * @param {DOMHighResTimeStamp} currentTime\n   * @param {DOMHighResTimeStamp} deltaTime\n   */\n  update(currentTime, deltaTime) {}\n\n  /**\n   * Updates the world-coordinate and local-coordinate model matrices.\n   *\n   * This is called after update and before updateChildren.\n   *\n   * NOTE: All implementations of this method should update [this._localTransform].\n   */\n  updateTransforms() {\n    mat4.multiply(this._worldTransform, this._getParentWorldTransform(), this._localTransform);\n  }\n\n  /**\n   * Updates relevant state for any children model controllers.\n   *\n   * This is called after update and updateLocalTransform.\n   *\n   * @param {DOMHighResTimeStamp} currentTime\n   * @param {DOMHighResTimeStamp} deltaTime\n   */\n  updateChildren(currentTime, deltaTime) {\n    this._triggerOnAllModelControllers('updateSelfAndChildren', [currentTime, deltaTime]);\n  }\n\n  draw() {\n    // We don't call draw on the children model controllers, because they register themselves to be\n    // drawn with their given shader program.\n  }\n\n  /**\n   * @param {ModelControllerInterface} modelCtrl\n   * @returns {Promise.<ModelControllerInterface>}\n   * @protected\n   */\n  _startModelController(modelCtrl) {\n    return modelCtrl.getIsReady().then(() => {\n      modelCtrl.reset();\n      this._modelCtrls.push(modelCtrl);\n      return modelCtrl;\n    });\n  }\n\n  /**\n   * @param {ModelControllerInterface} modelCtrl\n   * @protected\n   */\n  _onModelControllerDestroyed(modelCtrl) {\n    const index = this._modelCtrls.indexOf(modelCtrl);\n    this._modelCtrls.splice(index, 1);\n    modelCtrl.destroy();\n  }\n\n  /**\n   * @param {vec3} targetPosition\n   * @param {number} maxSquaredDistance\n   * @protected\n   */\n  _removeDistantModelControllers(targetPosition, maxSquaredDistance) {\n    this._modelCtrls\n      // Get the ModelControllers that are too far away.\n      .filter(modelCtrl =>\n        vec3.squaredDistance(modelCtrl.position, targetPosition) > maxSquaredDistance)\n      // Remove the far-away ModelControllers.\n      .forEach(modelCtrl => this._onModelControllerDestroyed(modelCtrl));\n  }\n\n  /**\n   * Gets the model transform matrix, in local coordinates.\n   *\n   * @returns {mat4}\n   */\n  get localTransform() {\n    return this._localTransform;\n  }\n\n  /**\n   * Gets the model transform matrix, in world coordinates.\n   *\n   * @returns {mat4}\n   */\n  get worldTransform() {\n    return this._worldTransform;\n  }\n\n  /**\n   * Returns a promise that resolves when this model controller is ready for the app to run.\n   *\n   * @returns {Promise}\n   */\n  getIsReady() {\n    return Promise.all(this._modelCtrls.map(controller => controller.getIsReady()));\n  }\n\n  /**\n   * @param {string} methodName\n   * @param {Array.<*>} [args]\n   * @protected\n   */\n  _triggerOnAllModelControllers(methodName, args = []) {\n    //this._demoObject[methodName](...args);\n    this._modelCtrls.forEach(object => object[methodName](...args));\n  }\n}\n\nexport { ModelGroupController };\n","/**\n * This class defines a top-level model.\n *\n * @abstract\n */\nclass Model {\n  /**\n   * @param {WebGLRenderingContext} gl\n   */\n  constructor(gl) {\n    // Model is an abstract class. It should not be instantiated directly.\n    if (new.target === Model) {\n      throw new TypeError('Cannot construct Model instances directly');\n    }\n\n    this._gl = gl;\n    this.bounds = null;\n\n    this._vertexPositionsBuffer = null;\n    this._vertexNormalsBuffer = null;\n    this._textureCoordinatesBuffer = null;\n\n    this._vertexPositionsConfig = null;\n    this._textureCoordinatesConfig = null;\n    this._vertexNormalsConfig = null;\n\n    // If this is kept null, then gl.drawArrays will be used (with gl.ARRAY_BUFFER) instead of\n    // gl.drawElements (with gl.ELEMENT_ARRAY_BUFFER).\n    this._vertexIndicesBuffer = null;\n  }\n\n  /**\n   * Updates the normals on this shape to either be spherical (point outwards from the center) or\n   * orthogonal to the faces of their triangles.\n   *\n   * @param {boolean} isUsingSphericalNormals\n   * @protected\n   * @abstract\n   */\n  _setNormals(isUsingSphericalNormals) {\n    // Extending classes should implement this method.\n    throw new TypeError('Method not implemented');\n  }\n\n  /** @returns {?AttributeConfig} */\n  get vertexPositionsConfig() {\n    return this._vertexPositionsConfig;\n  }\n\n  /** @returns {?AttributeConfig} */\n  get textureCoordinatesConfig() {\n    return this._textureCoordinatesConfig;\n  }\n\n  /** @returns {?AttributeConfig} */\n  get vertexNormalsConfig() {\n    return this._vertexNormalsConfig;\n  }\n\n  /** @returns {?WebGLBuffer} */\n  get vertexIndicesBuffer() {\n    return this._vertexIndicesBuffer;\n  }\n\n  /**\n   * @returns {number}\n   * @abstract\n   */\n  get elementCount() {\n    // Extending classes should implement this method.\n    throw new TypeError('Method not implemented');\n  }\n\n  /**\n   * @returns {number}\n   * @abstract\n   */\n  get mode() {\n    // Extending classes should implement this method.\n    throw new TypeError('Method not implemented');\n  }\n}\n\nexport {Model};\n","import {renderableShapeFactory} from '../../renderable-shapes';\n\nimport {ModelController} from './model-controller';\n\n/**\n * This class defines an extension of the model-controller class that uses a common set of program\n * variables and transformation matrices.\n */\nclass StandardModelController extends ModelController {\n  /**\n   * @param {ModelControllerConfig} params\n   * @param {RenderableShapeConfig} shapeParams\n   */\n  constructor(params, shapeParams) {\n    super(params);\n\n    this.scale = shapeParams.scale || vec3.fromValues(1, 1, 1);\n    this._mvMatrix = mat4.create();\n    this._normalMatrix = mat4.create();\n    this._model = renderableShapeFactory.createModel(this._gl, shapeParams);\n  }\n\n  update(currentTime, deltaTime) {}\n\n  draw() {\n    // Update the model-view matrix.\n    mat4.multiply(this._mvMatrix, this._getViewMatrix(), this._worldTransform);\n\n    // Update the normal matrix.\n    mat4.invert(this._normalMatrix, this._mvMatrix);\n    mat4.transpose(this._normalMatrix, this._normalMatrix);\n\n    // Update the uniform variables.\n    this._programVariablesConfig.uniforms['uPMatrix'] = this._getProjectionMatrix();\n    this._programVariablesConfig.uniforms['uMVMatrix'] = this._mvMatrix;\n    this._programVariablesConfig.uniforms['uNormalMatrix'] = this._normalMatrix;\n\n    // Draw shapes using the current variables configuration.\n    this._programWrapper.draw(this._gl, this._programVariablesConfig, 0, this._model.elementCount);\n  }\n\n  /**\n   * Initializes the program variables configuration.\n   *\n   * @protected\n   */\n  _setUpProgramVariablesConfig() {\n    this._programVariablesConfig = {\n      attributes: {\n        aVertexPosition: this._model.vertexPositionsConfig,\n        aTextureCoord: this._model.textureCoordinatesConfig,\n        aVertexNormal: this._model.vertexNormalsConfig,\n      },\n      uniforms: {\n        uPMatrix: this._getProjectionMatrix(),\n        uMVMatrix: this._mvMatrix,\n        uNormalMatrix: this._normalMatrix,\n        uSampler: this._texture,\n      },\n      mode: this._model.mode,\n      vertexIndices: this._model.vertexIndicesBuffer,\n      elementCount: this._model.elementCount,\n    };\n  }\n}\n\nexport {StandardModelController};\n","export * from './src/program-wrapper';\nexport * from './src/program-wrapper-store';\nexport * from './src/texture-store';\nexport * from './src/uniform-setter';\n","import {bindFramebuffer} from '../../util';\n\nimport {programWrapperStore} from './program-wrapper-store';\n\n/**\n * This class wraps a collection of ProgramWrappers and supports drawing them as a group.\n */\nclass GroupProgramWrapper {\n  /**\n   * @param {WebGLRenderingContext} gl\n   * @param {ProgramWrapperConfig} config\n   */\n  constructor(gl, config) {\n    this.config = config;\n    this._childrenProgramWrappers = [];\n    this._isReady = null;\n\n    this._loadChildren(gl, config).then(() => {\n      if (config.initialize) config.initialize(gl);\n      if (config.isAPostProcessor) {\n        _createChildrenFramebuffersAndTextures(gl, config);\n      }\n    });\n  }\n\n  /** @returns {string} */\n  get programId() {\n    return this.config.id;\n  }\n\n  /** @returns {Promise} */\n  getIsReady() {\n    return this._isReady;\n  }\n\n  /**\n   * Renders shapes using this program.\n   *\n   * @param {WebGLRenderingContext} gl\n   */\n  draw(gl) {\n    if (this.config.webGLStateSetter) this.config.webGLStateSetter(gl);\n    this.config.childrenFramebufferIds.forEach(_clearFramebuffer.bind(this, gl));\n    this.config.childrenProgramsToDraw.forEach(_drawChildProgramWrapper.bind(this, gl));\n  }\n\n  /**\n   * @param {WebGLRenderingContext} gl\n   * @param {ProgramWrapperConfig} config\n   * @private\n   */\n  _loadChildren(gl, config) {\n    this._isReady = Promise.all(\n        config.childrenProgramConfigs.map(config =>\n            programWrapperStore.loadProgramWrapper(gl, config)\n                .then(programWrapper => this._childrenProgramWrappers.push(programWrapper))));\n    return this._isReady;\n  }\n}\n\n/**\n * @param {WebGLRenderingContext} gl\n * @param {string} id\n * @private\n */\nfunction _clearFramebuffer(gl, id) {\n  const framebuffer = programWrapperStore.getFramebuffer(id);\n  bindFramebuffer(gl, framebuffer);\n  gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n}\n\n/**\n * @param {WebGLRenderingContext} gl\n * @param {ProgramWrapperConfig} config\n * @private\n */\nfunction _createChildrenFramebuffersAndTextures(gl, config) {\n  config.childrenFramebufferIds.forEach(id =>\n      programWrapperStore.createNewFramebufferAndTexture(gl, id, false));\n}\n\n/**\n * @param {WebGLRenderingContext} gl\n * @param {ChildProgramAndFramebufferIds} childProgramAndFramebufferIds\n * @private\n */\nfunction _drawChildProgramWrapper(gl, childProgramAndFramebufferIds) {\n  const {programId, inputFramebufferIds, outputFramebufferId} = childProgramAndFramebufferIds;\n\n  const framebuffer = outputFramebufferId ?\n      programWrapperStore.getFramebuffer(outputFramebufferId) : null;\n  const programWrapper = programWrapperStore.getProgramWrapper(programId);\n  const programVariablesConfig =\n      programWrapper.config.getProgramVariablesConfig(gl, inputFramebufferIds);\n\n  bindFramebuffer(gl, framebuffer);\n  programWrapper.setProgram(gl);\n  programWrapper.draw(gl, programVariablesConfig);\n}\n\nexport {GroupProgramWrapper};\n","import {createFramebuffer, createRenderBuffer, createTextureForRendering} from '../../util';\n\nimport {GroupProgramWrapper} from './group-program-wrapper';\nimport {ProgramWrapper} from './program-wrapper';\n\n/**\n * This class loads, compiles, and stores WebGL rendering programs.\n *\n * Also, this stores draw-frame handlers for a given program. This makes it easy for a top-level\n * controller to group together draw calls for a given program and therefore minimize program\n * switches.\n *\n * Also, this distinguishes between rendering programs that are used for rendering individual models\n * and post-processing programs that are used for manipulating the entire frame after all the models\n * have rendered.\n *\n * This also allows for grouping programs, which consist of multiple child programs that are all\n * rendered in sequence for a related purpose.\n */\nclass ProgramWrapperStore {\n  constructor() {\n    this._modelProgramCache = {};\n    this._sortedModelPrograms = [];\n    this._postProcessingProgramCache = {};\n    this._sortedPostProcessingPrograms = [];\n    this._frambuffers = {};\n    this._textures = {};\n    this._renderBuffers = {};\n  }\n\n  /**\n   * Loads and caches a program wrapper using the given configuration.\n   *\n   * This method is idempotent; a given program will only be cached once.\n   *\n   * @param {WebGLRenderingContext} gl\n   * @param {ProgramWrapperConfig} params\n   * @returns {Promise.<ProgramWrapper|GroupProgramWrapper, Error>}\n   * @private\n   */\n  loadProgramWrapper(gl, params) {\n    let cache;\n    let sortedList;\n    if (params.isAPostProcessor) {\n      cache = this._postProcessingProgramCache;\n      sortedList = this._sortedPostProcessingPrograms;\n    } else {\n      cache = this._modelProgramCache;\n      sortedList = this._sortedModelPrograms;\n    }\n    let cacheInfo = cache[params.id];\n\n    // Cache the program if it has not been previously registered.\n    if (!cacheInfo) {\n      cacheInfo = {};\n\n      cacheInfo.params = params;\n      cacheInfo.renderPriority = params.renderPriority;\n\n      let programWrapper = params.childrenProgramConfigs ?\n          new GroupProgramWrapper(gl, params) : new ProgramWrapper(gl, params);\n\n      cacheInfo.programWrapper = programWrapper;\n      cacheInfo.promise = programWrapper.getIsReady().then(() => cacheInfo.programWrapper);\n\n      if (params.isAPostProcessor) {\n        // As soon as we know we'll use a post-processing program, make sure we create the default\n        // framebuffer/texture for rendering models into.\n        if (!this.modelsFramebuffer) {\n          this.createNewFramebufferAndTexture(gl, MODELS_FRAMEBUFFER_ID, true);\n        }\n      } else {\n        // Post-processing programs are not used for rendering individual models.\n        cacheInfo.drawFrameHandlers = new Set();\n      }\n\n      // Store the program cache info in both a map and a list that is sorted by render priority.\n      cache[params.id] = cacheInfo;\n      sortedList.push(cacheInfo);\n      sortedList.sort(_compareProgramCacheInfo);\n    }\n\n    return cacheInfo.promise;\n  }\n\n  /**\n   * Registers the given draw-frame event handler for the given program.\n   *\n   * This method is idempotent; draw-frame handlers are stored in a set, so duplicate additions will\n   * overwrite previous additions.\n   *\n   * @param {string} id\n   * @param {Function} drawFrameHandler\n   */\n  registerDrawFrameHandler(id, drawFrameHandler) {\n    const programCacheInfo = this._modelProgramCache[id];\n\n    if (!programCacheInfo) {\n      if (this._postProcessingProgramCache[id]) {\n        // The program is not set up for rendering individual models.\n        throw new Error(`Cannot register a draw-frame handler for a program that is not set up for \n                         rendering individual models registered: ${id}`);\n      } else {\n        // The program has not been registered.\n        throw new Error(`Cannot register a draw-frame handler for a program that has not yet been \n                         registered: ${id}`);\n      }\n    }\n\n    // Store the draw-frame handler.\n    programCacheInfo.drawFrameHandlers.add(drawFrameHandler);\n  }\n\n  /**\n   * WARNING: This will remove the program from the store even if there are still other components\n   * depending on this program or its draw-frame handlers.\n   *\n   * @param {string} id\n   */\n  deleteProgramWrapper(id) {\n    // Determine which collections we're removing the program from.\n    let sortedPrograms;\n    let programCache;\n    if (this._modelProgramCache[id]) {\n      sortedPrograms = this._sortedModelPrograms;\n      programCache = this._modelProgramCache;\n    } else {\n      sortedPrograms = this._sortedPostProcessingPrograms;\n      programCache = this._postProcessingProgramCache;\n    }\n    const programCacheInfo = programCache[id];\n\n    // Remove the program.\n    sortedPrograms.splice(sortedPrograms.indexOf(programCacheInfo), 1);\n    delete programCache[id];\n  }\n\n  // TODO: Don't forget to unregister draw-frame handlers when destroying models (asteroids, UFOs,\n  // etc.)\n  /**\n   * @param {string} id\n   * @param {Function} drawFrameHandler\n   */\n  unregisterDrawFrameHandler(id, drawFrameHandler) {\n    this._modelProgramCache[id].drawFrameHandlers.delete(drawFrameHandler);\n  }\n\n  /**\n   * @param {string} id\n   * @returns {Promise}\n   * @throws If there is no program registered with the given ID.\n   */\n  getProgramWrapperPromise(id) {\n    const cacheInfo = this._modelProgramCache[id] || this._postProcessingProgramCache[id];\n    return cacheInfo.promise;\n  }\n\n  /**\n   * @param {string} id\n   * @returns {ProgramWrapper}\n   * @throws If there is no program registered with the given ID.\n   */\n  getProgramWrapper(id) {\n    const cacheInfo = this._modelProgramCache[id] || this._postProcessingProgramCache[id];\n    return cacheInfo.programWrapper;\n  }\n\n  /**\n   * Calls the given callback once for each registered per-model program wrapper.\n   *\n   * The callback is passed two arguments: the program wrapper and the registered draw-frame\n   * handlers.\n   *\n   * @param {Function} callback\n   */\n  forEachModelProgram(callback) {\n    this._sortedModelPrograms.forEach(programCacheInfo =>\n        callback(programCacheInfo.programWrapper, programCacheInfo.drawFrameHandlers));\n  }\n\n  /**\n   * Calls the given callback once for each registered post-processing program wrapper.\n   *\n   * @param {Function} callback\n   */\n  forEachPostProcessingProgram(callback) {\n    this._sortedPostProcessingPrograms.forEach(\n        programCacheInfo => callback(programCacheInfo.programWrapper));\n  }\n\n  /** @returns {boolean} */\n  get isUsingPostProcessingPrograms() {\n    return this._sortedPostProcessingPrograms.length > 0;\n  }\n\n  /**\n   * Creates and stores a framebuffer with a texture.\n   *\n   * Both the framebuffer and texture can be accessed later using the given ID.\n   *\n   * @param {WebGLRenderingContext} gl\n   * @param {string} id\n   * @param {boolean} [shouldStoreDepthInfo=false]\n   */\n  createNewFramebufferAndTexture(gl, id, shouldStoreDepthInfo=false) {\n    let renderBuffer;\n    if (shouldStoreDepthInfo) {\n      renderBuffer = createRenderBuffer(gl);\n      this._renderBuffers[id] = renderBuffer;\n    }\n\n    const texture = createTextureForRendering(gl);\n    this._textures[id] = texture;\n\n    const framebuffer = createFramebuffer(gl, texture, renderBuffer);\n    this._frambuffers[id] = framebuffer;\n  }\n\n  /**\n   * @param {string} id\n   * @returns {?WebGLFramebuffer}\n   */\n  getFramebuffer(id) {\n    return this._frambuffers[id];\n  }\n\n  /**\n   * @param {string} id\n   * @returns {?WebGLTexture}\n   */\n  getTexture(id) {\n    return this._textures[id];\n  }\n\n  /**\n   * If we are using a post-processing program, then this is the default framebuffer for rendering\n   * models into.\n   *\n   * @returns {?WebGLFramebuffer}\n   */\n  get modelsFramebuffer() {\n    return this._frambuffers[MODELS_FRAMEBUFFER_ID];\n  }\n\n  /**\n   * If we are using a post-processing program, then this is the default texture for rendering\n   * models into.\n   *\n   * @returns {?WebGLTexture}\n   */\n  get modelsTexture() {\n    return this._textures[MODELS_FRAMEBUFFER_ID];\n  }\n\n  /**\n   * If we are using a post-processing program, then this is the default depth render buffer for\n   * rendering models.\n   *\n   * @returns {?WebGLRenderBuffer}\n   */\n  get modelsRenderBuffer() {\n    return this._renderBuffers[MODELS_FRAMEBUFFER_ID];\n  }\n}\n\nfunction _compareProgramCacheInfo(a, b) {\n  return a.renderPriority - b.renderPriority;\n}\n\nexport const MODELS_FRAMEBUFFER_ID = 'models';\n\nexport const programWrapperStore = new ProgramWrapperStore();\n\n/**\n * @typedef {Object} ProgramCacheInfo\n * @property {ProgramWrapperConfig} params\n * @property {ProgramWrapper|GroupProgramWrapper} [programWrapper]\n * @property {Set.<Function>} [drawFrameHandlers]\n * @property {Array.<ProgramWrapper>} [childrenProgramWrappers]\n */\n","import {\n  isInDevMode,\n  getViewportHeight,\n  getViewportWidth,\n  loadProgram,\n} from '../../util';\n\nimport {UniformSetter} from './uniform-setter';\n\n/**\n * This class wraps a native WebGLProgram object and provides convenience methods for:\n * - setting the wrapped program for use on the WebGL rendering context,\n * - enabling the attribute variables for the program,\n * - setting the attribute and uniform variables for the program,\n * - drawing shapes with the program and its current configuration.\n */\nclass ProgramWrapper {\n  /**\n   * @param {WebGLRenderingContext} gl\n   * @param {ProgramWrapperConfig} config\n   */\n  constructor(gl, config) {\n    this.config = config;\n    this._program = null;\n    this._uniformSetters = null;\n    this._attributeEnablers = null;\n    this._attributeSetters = null;\n\n    // This is used for assigning different textures to different texture units.\n    this.baseTextureUnitIndex = 0;\n\n    this._buildWebGLProgramPromise = this._buildWebGLProgram(gl, config);\n\n    // TODO: Freeze this object after initializing\n  }\n\n  /** @returns {string} */\n  get programId() {\n    return this.config.id;\n  }\n\n  /** @returns {Promise} */\n  getIsReady() {\n    return this._buildWebGLProgramPromise;\n  }\n\n  /**\n   * Sets this program to use for rendering on the given WebGL context.\n   *\n   * This also enables all relevant attribute variables for this program.\n   *\n   * @param {WebGLRenderingContext} gl\n   */\n  setProgram(gl) {\n    gl.useProgram(this._program);\n    this._enableAttributes();\n    if (this.config.webGLStateSetter) this.config.webGLStateSetter(gl);\n  }\n\n  /**\n   * Renders shapes using this program with the given variables configuration.\n   *\n   * @param {WebGLRenderingContext} gl\n   * @param {ProgramVariablesConfig} [programVariablesConfig]\n   * @param {number} [offset=0] Offset into the element array buffer to render from.\n   * @param {number} [count=programVariablesConfig.elementCount] The number of elements to render.\n   */\n  draw(gl, programVariablesConfig, offset, count) {\n    programVariablesConfig = programVariablesConfig || this.config.getProgramVariablesConfig(gl);\n    this._setVariables(gl, programVariablesConfig);\n    this._draw(gl, programVariablesConfig, offset, count);\n  }\n\n  /**\n   * Sets up this WebGL rendering program to draw shapes with the given program variables\n   * configuration and the attribute/uniform setters that have been set up for this program.\n   *\n   * @param {WebGLRenderingContext} gl\n   * @param {ProgramVariablesConfig} programVariablesConfig\n   * @private\n   */\n  _setVariables(gl, programVariablesConfig) {\n    this._setAttributes(programVariablesConfig.attributes);\n    this._setUniforms(programVariablesConfig.uniforms);\n\n    // Check whether we are set up to draw using gl.drawElements rather than gl.drawArrays.\n    if (programVariablesConfig.vertexIndices) {\n      gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, programVariablesConfig.vertexIndices);\n    }\n  }\n\n  /**\n   * Renders shapes according to this program's current configuration.\n   *\n   * @param {WebGLRenderingContext} gl\n   * @param {ProgramVariablesConfig} programVariablesConfig\n   * @param {number} [offset=0] Offset into the element array buffer to render from.\n   * @param {number} [count=programVariablesConfig.elementCount] The number of elements to render.\n   * @private\n   */\n  _draw(gl, programVariablesConfig, offset, count) {\n    offset = typeof offset === 'number' ? offset : 0;\n    count = typeof count === 'number' ? count : programVariablesConfig.elementCount;\n\n    if (isInDevMode) {\n      this._checkThatGivenVariablesMatchProgram(programVariablesConfig);\n    }\n\n    // Check whether we are set up to draw using gl.drawElements or gl.drawArrays.\n    if (programVariablesConfig.vertexIndices) {\n      gl.drawElements(programVariablesConfig.mode, count, gl.UNSIGNED_SHORT, offset);\n    } else {\n      gl.drawArrays(programVariablesConfig.mode, offset, count);\n    }\n  }\n\n  /**\n   * Checks whether the attribute and uniform variables specified in the given config match those\n   * defined in this program.\n   *\n   * @param {ProgramVariablesConfig} programVariablesConfig\n   * @private\n   */\n  _checkThatGivenVariablesMatchProgram(programVariablesConfig) {\n    if (Object.keys(programVariablesConfig.attributes).length !==\n            Object.keys(this._attributeSetters).length ||\n        Object.keys(programVariablesConfig.uniforms).length !==\n            Object.keys(this._uniformSetters).length) {\n      console.warn('The attribute/uniform variables in the ProgramVariablesConfig do not match ' +\n          'those specified in the shaders.', programVariablesConfig, this);\n    }\n  }\n\n  /**\n   * Sets the uniform values for this program.\n   *\n   * Specifically, this calls `gl.uniform<...>(location, value)` for each\n   * variable-name/variable-value key-value pair in the given map. As part of the setup process, the\n   * uniform variable locations are stored in a map from their corresponding variable names. So only\n   * the variable names are needed in order to call this function at render time.\n   *\n   * @param {Object.<String, UniformData>} uniformValues\n   */\n  _setUniforms(uniformValues) {\n    Object.keys(uniformValues).forEach(uniformName => {\n      const uniformSetter = this._uniformSetters[uniformName];\n      const uniformValue = uniformValues[uniformName];\n      uniformSetter.setUniform(uniformValue);\n    });\n  }\n\n  /**\n   * Sets the attribute buffers for this program.\n   *\n   * Specifically, this calls `gl.bindBuffer(...)` and `gl.vertexAttribPointer(...)` for each\n   * variable-name/variable-value pair in the given attribute-info map. As part of the setup\n   * process, the uniform variable locations are stored in a map from their corresponding variable\n   * names. So only the variable names are needed in order to call this function at render time.\n   *\n   * @param {Object.<String, AttributeConfig>} attributeConfigs\n   */\n  _setAttributes(attributeConfigs) {\n    Object.keys(attributeConfigs).forEach(attributeName => {\n      const attributeSetter = this._attributeSetters[attributeName];\n      const attributeConfig = attributeConfigs[attributeName];\n      attributeSetter(attributeConfig);\n    });\n  }\n\n  /**\n   * @private\n   */\n  _enableAttributes() {\n    this._attributeEnablers.forEach(attributeEnabler => attributeEnabler());\n  }\n\n  /**\n   * Creates uniform setters for this program and saves them in the _uniformSetters property.\n   *\n   * @param {WebGLRenderingContext} gl\n   * @private\n   */\n  _createUniformSetters(gl) {\n    const uniformCount = gl.getProgramParameter(this._program, gl.ACTIVE_UNIFORMS);\n\n    this._uniformSetters = {};\n\n    for (let index = 0; index < uniformCount; index++) {\n      const uniformInfo = gl.getActiveUniform(this._program, index);\n      let uniformName = uniformInfo.name;\n\n      // Remove any array suffix.\n      // TODO: Is this removal redundant with the isArray check below??\n      if (uniformName.substr(-3) === '[0]') {\n        uniformName = uniformName.substr(0, uniformName.length - 3);\n      }\n\n      this._uniformSetters[uniformName] = new UniformSetter(gl, this._program, uniformInfo, this);\n    }\n  }\n\n  /**\n   * Creates attribute enablers and setters for this program and saves them in the\n   * _attributeEnablers and _attributeSetters properties, respectively.\n   *\n   * @param {WebGLRenderingContext} gl\n   * @private\n   */\n  _createAttributeEnablersAndSetters(gl) {\n    this._attributeEnablers = [];\n    this._attributeSetters = {};\n\n    const attributeCount = gl.getProgramParameter(this._program, gl.ACTIVE_ATTRIBUTES);\n\n    for (let index = 0; index < attributeCount; index++) {\n      const attributeName = gl.getActiveAttrib(this._program, index).name;\n      const location = gl.getAttribLocation(this._program, attributeName);\n\n      this._attributeEnablers.push(ProgramWrapper._createAttributeEnabler(gl, location));\n      this._attributeSetters[attributeName] = ProgramWrapper._createAttributeSetter(gl, location);\n    }\n  }\n\n  /**\n   * Loads the shader source code from the given URLs, compiles the shader source code, and creates\n   * a program from the resulting shaders.\n   *\n   * @param {WebGLRenderingContext} gl\n   * @param {ProgramWrapperConfig} config\n   * @returns {Promise}\n   * @private\n   */\n  _buildWebGLProgram(gl, config) {\n    return loadProgram(gl, config.vertexShaderPath, config.fragmentShaderPath)\n        .then(webGLProgram => {\n          this._program = webGLProgram;\n          this._createUniformSetters(gl);\n          this._createAttributeEnablersAndSetters(gl);\n          if (config.initialize) config.initialize(gl);\n        })\n        .then(() => console.info(`Program loaded: ${config.id}`));\n  }\n\n  /**\n   * @param {WebGLRenderingContext} gl\n   * @param {number} location\n   * @returns {Function}\n   * @private\n   */\n  static _createAttributeEnabler(gl, location) {\n    return () => gl.enableVertexAttribArray(location);\n  }\n\n  /**\n   * @param {WebGLRenderingContext} gl\n   * @param {number} location\n   * @returns {Function.<AttributeConfig>}\n   * @private\n   */\n  static _createAttributeSetter(gl, location) {\n    return attributeConfig => {\n      gl.bindBuffer(gl.ARRAY_BUFFER, attributeConfig.buffer);\n      gl.vertexAttribPointer(\n          location,\n          attributeConfig.size,\n          typeof attributeConfig.type !== 'undefined' ? attributeConfig.type : gl.FLOAT,\n          typeof attributeConfig.normalized !== 'undefined' ? attributeConfig.normalized : false,\n          typeof attributeConfig.stride !== 'undefined' ? attributeConfig.stride : 0,\n          typeof attributeConfig.offset !== 'undefined' ? attributeConfig.offset : 0);\n    };\n  }\n}\n\nexport {ProgramWrapper};\n\n/**\n * @typedef {Object} ProgramWrapperConfig\n * @property {string} id\n * @property {Function} [initialize] A method for one-time initialization of the GL state for this\n * program.\n * @property {Function} [webGLStateSetter] A method for setting up the GL state for this program\n * wrapper in preparation for the current draw call.\n * @property {number} [renderPriority] Programs with lower priority will render first. This does not\n * need to be present for ProgramWrappers that are children of a GroupProgramWrapper.\n * @property {string} [vertexShaderPath] This will be present on configs for non-group\n * ProgramWrappers.\n * @property {string} [fragmentShaderPath] This will be present on configs for non-group\n * ProgramWrappers.\n * @property {boolean} [isAPostProcessor=false] A post-processing program is used for manipulating\n * the entire frame after all the models have rendered.\n * @property {boolean} [childrenProgramConfigs] A grouping program consists of multiple child\n * programs that are all rendered in sequence for a related purpose.\n * @property {Array.<ChildProgramAndFramebufferIds>} [childrenProgramsToDraw] The IDs for the\n * sequence of children ProgramWrappers to draw, as well as the IDs for the input and output\n * framebuffers/textures to use. This will be present on configs for GroupProgramWrappers.\n * @property {Array.<string>} [childrenFramebufferIds] The IDs of all the framebuffers/textures that\n * will need to be created for this program. This will be present on configs for\n * GroupProgramWrappers.\n * @property {Function} [getProgramVariablesConfig] A method for getting the variables needed for\n * drawing this program. This will be present on configs of programs that are children of a\n * GroupProgramWrapper.\n */\n\n/**\n * @typedef {Object} ChildProgramAndFramebufferIds\n * @property {string} programId The ID of the program to draw with.\n * @property {Array.<string>} inputFramebufferIds The IDs of framebuffers whose textures will be\n * used as inputs for this program's shaders.\n * @property {string} outputFramebufferId Provide null in order to render to the canvas.\n */\n\n/**\n * @typedef {Object} ProgramVariablesConfig\n * @property {Object.<String, AttributeConfig>} attributes A mapping from attribute names to\n * attribute info.\n * @property {Object.<String, UniformData>} uniforms A mapping from uniform names to uniform info.\n * @property {number} mode Specifies the type of primitives to render; one of:\n *   - gl.POINTS,\n *   - gl.LINES,\n *   - gl.LINE_STRIP,\n *   - gl.LINE_LOOP,\n *   - gl.TRIANGLES,\n *   - gl.TRIANGLE_STRIP,\n *   - gl.TRIANGLE_FAN.\n * @property {WebGLBuffer} [vertexIndices] The indices to use for retrieving the vertex info from\n * each of the other attribute variable buffers. If this property is present, then the rendering\n * pipeline will be set up to use gl.drawElements (with gl.ELEMENT_ARRAY_BUFFER) instead of\n * gl.drawArrays.\n * @property {number} elementCount The number of elements/vertices to render for this variables\n * configuration.\n */\n\n/**\n * @typedef {Object} AttributeConfig\n * @property {WebGLBuffer} buffer The buffer containing this attribute's data.\n * @property {number} index Index of target attribute in the buffer bound to gl.ARRAY_BUFFER.\n * @property {number} size The number of components per attribute. Must be 1,2,3,or 4.\n * @property {number} type Specifies the data type of each component in the array. Use either\n * gl.FLOAT or gl.FIXED.\n * @property {boolean} normalized If true, then values will be normalized to a range of -1 or 0 to\n * 1.\n * @property {number} stride Specifies the offset in bytes between the beginning of consecutive\n * vertex attributes. Default value is 0, maximum is 255. Must be a multiple of type.\n * @property {number} offset Specifies an offset in bytes of the first component of the first\n * vertex attribute in the array. Default is 0 which means that vertex attributes are tightly\n * packed. Must be a multiple of type.\n */\n\n/** @typedef {*} UniformData */\n","import {loadImageSrc} from '../../util';\n\n/**\n * This class loads, sets up, and stores WebGL texture objects.\n *\n * NOTE: Only textures whose side lengths are powers of two are supported.\n */\nclass TextureStore {\n  constructor() {\n    this.textureCache = {};\n  }\n\n  /**\n   * @param {string} texturePath\n   * @returns {WebGLTexture}\n   */\n  getTexture(texturePath) {\n    return this.textureCache[texturePath].texture;\n  }\n\n  /**\n   * Loads the texture image at the given path, creates a texture object from it, caches the\n   * texture, and returns a promise for the texture.\n   *\n   * This method is idempotent; a given texture will only be loaded once.\n   *\n   * @param {WebGLRenderingContext} gl\n   * @param {string} texturePath\n   * @returns {Promise.<WebGLTexture, Error>}\n   */\n  loadTexture(gl, texturePath) {\n    let textureCacheInfo = this.textureCache[texturePath];\n\n    // Load, create, and cache the texture if it has not been previously registered.\n    if (!textureCacheInfo) {\n      textureCacheInfo = {\n        texturePromise: null,\n        texture: null,\n        image: new Image()\n      };\n      this.textureCache[texturePath] = textureCacheInfo;\n      textureCacheInfo.texturePromise = loadImageSrc(textureCacheInfo.image, texturePath)\n          .then(_ => this._createTexture(gl, textureCacheInfo));\n    }\n\n    return textureCacheInfo.texturePromise;\n  }\n\n  // TODO: Make this more general/configurable by creating a new TextureConfig typedef with most of\n  // the gl.xxx params included below (like the AttributeConfig typedef}, passing a textureConfig in\n  // the register method, and saving it on the textureCacheInfo object.\n  /**\n   * @param {WebGLRenderingContext} gl\n   * @param {TextureCacheInfo} textureCacheInfo\n   * @returns {WebGLTexture}\n   * @private\n   */\n  _createTexture(gl, textureCacheInfo) {\n    console.info(`Texture loaded: ${textureCacheInfo.image.src}`);\n\n    textureCacheInfo.texture = gl.createTexture();\n    gl.bindTexture(gl.TEXTURE_2D, textureCacheInfo.texture);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, textureCacheInfo.image);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_NEAREST);\n    gl.generateMipmap(gl.TEXTURE_2D);\n    gl.bindTexture(gl.TEXTURE_2D, null);\n\n    return textureCacheInfo.texture;\n  }\n\n  /**\n   * WARNING: This will remove the texture from the store even if there are still other components\n   * depending on this texture.\n   *\n   * @param {string} texturePath\n   */\n  deleteTexture(texturePath) {\n    delete this.textureCache[texturePath];\n  }\n}\n\nexport const textureStore = new TextureStore();\n\n/**\n * @typedef {Object} TextureCacheInfo\n * @property {Promise.<WebGLTexture, Error>} texturePromise\n * @property {WebGLTexture} [texture]\n * @property {HTMLImageElement} [image]\n */\n","/**\n * This class stores a function for setting a value to a WebGL uniform variable.\n *\n * This is intended for use as a helper for the ProgramWrapper class.\n */\n// TODO: Write tests for this class.\nclass UniformSetter {\n  /**\n   * @param {WebGLRenderingContext} gl\n   * @param {WebGLProgram} program\n   * @param {WebGLActiveInfo} uniformInfo\n   * @param {ProgramWrapper} programWrapper\n   * @throws If the given uniformInfo specifies an unexpected uniform-value type.\n   */\n  constructor(gl, program, uniformInfo, programWrapper) {\n    this._location = gl.getUniformLocation(program, uniformInfo.name);\n    this._setter = this._getSetter(gl, uniformInfo, programWrapper);\n\n    // TODO: Freeze this object after initializing\n  }\n\n  /**\n   * @param {UniformData} uniformValue\n   */\n  setUniform(uniformValue) {\n    uniformValue = uniformValue instanceof Array ? new Float32Array(uniformValue) : uniformValue;\n    this._setter(uniformValue);\n  }\n\n  /** @returns {WebGLUniformLocation} */\n  get location() {\n    return this._location;\n  }\n\n  /**\n   * @param {WebGLRenderingContext} gl\n   * @param {WebGLActiveInfo} uniformInfo\n   * @param {ProgramWrapper} programWrapper\n   * @returns {Function.<*>}\n   * @throws If the given uniformInfo specifies an unexpected uniform-value type.\n   * @private\n   */\n  _getSetter(gl, uniformInfo, programWrapper) {\n    const isArray = uniformInfo.size > 1 && uniformInfo.name.substr(-3) === '[0]';\n    const setterMap = isArray ? {\n      [gl.FLOAT]: value => gl.uniform1fv(this._location, value),\n      [gl.INT]: value => gl.uniform1iv(this._location, value),\n      [gl.SAMPLER_2D]: this._getUniformTextureArraySetter(gl, gl.TEXTURE_2D, uniformInfo.size,\n          programWrapper),\n      [gl.SAMPLER_CUBE]: this._getUniformTextureArraySetter(gl, gl.TEXTURE_CUBE_MAP,\n          uniformInfo.size, programWrapper),\n    } : {\n      [gl.FLOAT]: value => gl.uniform1f(this._location, value),\n      [gl.FLOAT_VEC2]: value => gl.uniform2fv(this._location, value),\n      [gl.FLOAT_VEC3]: value => gl.uniform3fv(this._location, value),\n      [gl.FLOAT_VEC4]: value => gl.uniform4fv(this._location, value),\n      [gl.INT]: value => gl.uniform1i(this._location, value),\n      [gl.INT_VEC2]: value => gl.uniform2iv(this._location, value),\n      [gl.INT_VEC3]: value => gl.uniform3iv(this._location, value),\n      [gl.INT_VEC4]: value => gl.uniform4iv(this._location, value),\n      [gl.BOOL]: value => gl.uniform1i(this._location, value),\n      [gl.BOOL_VEC2]: value => gl.uniform2iv(this._location, value),\n      [gl.BOOL_VEC3]: value => gl.uniform3iv(this._location, value),\n      [gl.BOOL_VEC4]: value => gl.uniform4iv(this._location, value),\n      [gl.FLOAT_MAT2]: value => gl.uniformMatrix2fv(this._location, false, value),\n      [gl.FLOAT_MAT3]: value => gl.uniformMatrix3fv(this._location, false, value),\n      [gl.FLOAT_MAT4]: value => gl.uniformMatrix4fv(this._location, false, value),\n      [gl.SAMPLER_2D]: this._getUniformTextureSetter(gl, gl.TEXTURE_2D,\n          programWrapper.baseTextureUnitIndex++),\n      [gl.SAMPLER_CUBE]: this._getUniformTextureSetter(gl, gl.TEXTURE_CUBE_MAP,\n          programWrapper.baseTextureUnitIndex++),\n    };\n    return setterMap[uniformInfo.type];\n  }\n\n  /**\n   * @param {WebGLRenderingContext} gl\n   * @param {number} target An enum describing the type of this buffer; one of:\n   *   - gl.TEXTURE_2D,\n   *   - gl.TEXTURE_CUBE_MAP.\n   * @param {number} uniformSize\n   * @param {ProgramWrapper} programWrapper\n   * @returns {Function.<*>}\n   * @private\n   */\n  _getUniformTextureArraySetter(gl, target, uniformSize, programWrapper) {\n    const textureUnitIndices =\n        Array.from({length: uniformSize}, _ => programWrapper.baseTextureUnitIndex++);\n\n    return textures => {\n      textures.forEach((texture, index) => {\n        gl.activeTexture(gl.TEXTURE0 + textureUnitIndices[index]);\n        gl.bindTexture(target, texture);\n      });\n      gl.uniform1iv(this._location, textureUnitIndices);\n    };\n  }\n\n  /**\n   * @param {WebGLRenderingContext} gl\n   * @param {number} target An enum describing the type of this buffer; one of:\n   *   - gl.TEXTURE_2D,\n   *   - gl.TEXTURE_CUBE_MAP.\n   * @param {number} textureUnitIndex\n   * @returns {Function.<*>}\n   * @private\n   */\n  _getUniformTextureSetter(gl, target, textureUnitIndex) {\n    return texture => {\n      gl.activeTexture(gl.TEXTURE0 + textureUnitIndex);\n      gl.bindTexture(target, texture);\n      gl.uniform1i(this._location, textureUnitIndex);\n    };\n  }\n}\n\nexport {UniformSetter};\n","import {renderableShapeFactory} from './src/renderable-shape-factory';\n\nimport {capsuleRenderableShapeFactory} from './src/shape-configs/capsule-renderable-shape';\nimport {cubeRenderableShapeFactory} from './src/shape-configs/cube-renderable-shape';\nimport {icosahedronRenderableShapeFactory} from './src/shape-configs/icosahedron-renderable-shape';\nimport {icosphereRenderableShapeFactory} from './src/shape-configs/icosphere-renderable-shape';\nimport {latLongSphereRenderableShapeFactory} from './src/shape-configs/lat-long-sphere-renderable-shape';\nimport {tetrahedronRenderableShapeFactory} from './src/shape-configs/tetrahedron-renderable-shape';\n\n[\n  capsuleRenderableShapeFactory,\n  cubeRenderableShapeFactory,\n  icosahedronRenderableShapeFactory,\n  icosphereRenderableShapeFactory,\n  latLongSphereRenderableShapeFactory,\n  tetrahedronRenderableShapeFactory\n].forEach(renderableShapeFactory.registerRenderableShapeFactory);\n\nexport * from './src/shape-configs/capsule-renderable-shape';\nexport * from './src/shape-configs/cube-renderable-shape';\nexport * from './src/shape-configs/icosahedron-renderable-shape';\nexport * from './src/shape-configs/icosphere-renderable-shape';\nexport * from './src/shape-configs/lat-long-sphere-renderable-shape';\nexport * from './src/shape-configs/tetrahedron-renderable-shape';\n\nexport * from './src/renderable-shape-factory';\nexport * from './src/renderable-shape-store';\n","import {DefaultModel} from '../../models';\nimport {renderableShapeStore} from './renderable-shape-store';\n\n/**\n * This module defines a factory for DefaultRigidModal instances that are based on the various\n * pre-defined renderable shapes in this directory.\n */\n\nconst renderableShapeFactory = {\n  /**\n   * @param {WebGLRenderingContext} gl\n   * @param {RenderableShapeConfig} params\n   * @returns {DefaultModel}\n   */\n  createModel: (gl, params) => {\n    const shapeConfig = renderableShapeFactory.getRenderableShape(params);\n    return new DefaultModel(gl, shapeConfig);\n  },\n\n  /**\n   * @param {RenderableShapeConfig} params\n   * @returns {RenderableShape}\n   */\n  getRenderableShape: params => {\n    params.isUsingSphericalNormals = params.isUsingSphericalNormals || false;\n    params.divisionsCount = typeof params.divisionsCount === 'number' ? params.divisionsCount : 0;\n\n    let shapeConfig = renderableShapeStore.getShape(params);\n    if (!shapeConfig) {\n      shapeConfig = _shapeIdsToRenderableShapeFactories[params.shapeId].getRenderableShape(params);\n      _updateTextureCoordinatesSpan(shapeConfig, params.textureSpan);\n      renderableShapeStore.registerShape(shapeConfig, params);\n    }\n    return shapeConfig;\n  },\n\n  /**\n   * @param {RenderableShapeFactory} shapeConfigFactory\n   */\n  registerRenderableShapeFactory: shapeConfigFactory => {\n    _shapeIdsToRenderableShapeFactories[shapeConfigFactory.shapeId] = shapeConfigFactory;\n    renderableShapeStore.registerRenderableShapeFactory(shapeConfigFactory);\n  }\n};\n\nconst _shapeIdsToRenderableShapeFactories = {};\n\n/**\n * @param {RenderableShape} shapeConfig\n * @param {TextureSpan} textureSpan\n * @private\n */\nfunction _updateTextureCoordinatesSpan(shapeConfig, textureSpan) {\n  if (!textureSpan) return;\n\n  const minX = textureSpan.minX;\n  const minY = textureSpan.minY;\n  const rangeX = textureSpan.maxX - textureSpan.minX;\n  const rangeY = textureSpan.maxY - textureSpan.minY;\n\n  const textureCoordinates = shapeConfig.textureCoordinates.slice();\n  shapeConfig.textureCoordinates = textureCoordinates;\n\n  for (let i = 0, count = textureCoordinates.length; i < count; i += 2) {\n    textureCoordinates[i] = minX + rangeX * textureCoordinates[i];\n    textureCoordinates[i + 1] = minY + rangeY * textureCoordinates[i + 1];\n  }\n}\n\nexport {renderableShapeFactory};\n\n/**\n * @typedef {Object} RenderableShapeFactory\n * @property {string} shapeId\n * @property {Function.<RenderableShape>} getRenderableShape\n * @property {Function.<String>} getCacheId\n */\n\n/**\n * @typedef {Object} RenderableShape\n * @property {Array.<Number>} vertexPositions\n * @property {Array.<Number>} vertexNormals\n * @property {Array.<Number>} textureCoordinates\n * @property {Array.<Number>} [vertexIndices]\n * @property {number} elementCount\n */\n\n/**\n * @typedef {Object} TextureSpan\n * @property {number} minX\n * @property {number} minY\n * @property {number} maxX\n * @property {number} maxY\n */\n\n/**\n * @typedef {Object} RenderableShapeConfig\n * @property {string} shapeId The ID of the type of renderable shape.\n * @property {boolean} [isUsingSphericalNormals=false] Whether light reflections should show sharp\n * edges.\n * @property {TextureSpan} [textureSpan] For indicating how much a texture should repeat in both axes.\n * A range of 0-0.5 should show half the texture. A range of 0-2 would show the texture twice. The\n * default is 0-1 in both directions.\n * @property {vec3} [scale]\n */\n\n/**\n * @typedef {RenderableShapeConfig} SphericalRenderableShapeParams\n * @property {number} divisionsCount How many times to sub-divide the sphere.\n */\n","/**\n * This class caches renderable shape data.\n */\nclass RenderableShapeStore {\n  constructor() {\n    this._shapeCache = new Map();\n  }\n\n  /**\n   * @param {RenderableShapeConfig} params\n   * @returns {RenderableShape}\n   */\n  getShape(params) {\n    const key = _shapeIdsToCacheKeyCalculators[params.shapeId](params);\n    return this._shapeCache.get(key);\n  }\n\n  /**\n   * Caches the given shape info.\n   *\n   * @param {RenderableShape} shapeConfig\n   * @param {RenderableShapeConfig} params\n   */\n  registerShape(shapeConfig, params) {\n    const key = _shapeIdsToCacheKeyCalculators[params.shapeId](params);\n    this._shapeCache.set(key, shapeConfig);\n  }\n\n  /**\n   * @param {RenderableShapeFactory} shapeConfigFactory\n   */\n  registerRenderableShapeFactory(shapeConfigFactory) {\n    _shapeIdsToCacheKeyCalculators[shapeConfigFactory.shapeId] = shapeConfigFactory.getCacheId;\n  }\n\n  // TODO: Add support for un-registering shapes.\n}\n\n/**\n * @param {RenderableShapeConfig} params\n * @returns {string}\n */\nfunction getCacheKey(params) {\n  const textureSpanStr = params.textureSpan\n      ? `:${params.textureSpan.minX},${params.textureSpan.minY},${params.textureSpan.maxX},` +\n  `${params.textureSpan.maxY}`\n      : '';\n\n  return `${params.shapeId}:${params.isUsingSphericalNormals}${textureSpanStr}`;\n}\n\nconst _shapeIdsToCacheKeyCalculators = {};\n\nconst renderableShapeStore = new RenderableShapeStore();\nexport {renderableShapeStore, getCacheKey};\n","/**\n * This module defines a configuration factory for a capsule shape.\n *\n * The shape is centered around the origin with the poles aligned with the z-axis.\n */\n\nimport {\n  calculateSphericalSection,\n  calculateOrthogonalVertexNormals,\n  dedupVertexArrayWithPositionsAndIndicesArrays,\n  calculateLatLongTextureCoordinates,\n  calculateCylindricalSection,\n  calculateCylindricalTextureCoordinates,\n  TWO_PI,\n} from '../../../util';\nimport {getCacheKey} from '../renderable-shape-store';\n\n// TODO: Once I have a better camera in place, test that these texture coordinate calculations are\n// correct.\n\n/**\n * @param {CapsuleRenderableShapeParams} params\n * @returns {RenderableShape}\n */\nfunction _calculateCapsuleTopShape(params) {\n  // Calculate the positions.\n  // TODO: This uses lat-long spheres for the ends of the capsule. Use icospheres instead.\n  const individualVertexPositions = calculateSphericalSection(\n      0, params.divisionsCount / 2, Math.PI / params.divisionsCount,\n      0, params.divisionsCount, TWO_PI / params.divisionsCount);\n\n  // Calculate the indices and normals.\n  let vertexPositions;\n  let vertexIndices;\n  let vertexNormals;\n  if (!params.isUsingSphericalNormals) {\n    // If we use orthogonal normals, then we cannot use vertexIndices.\n    vertexPositions = individualVertexPositions;\n    vertexIndices = null;\n    vertexNormals = calculateOrthogonalVertexNormals(vertexPositions);\n  } else {\n    ({vertexPositions, vertexIndices} = dedupVertexArrayWithPositionsAndIndicesArrays(\n        individualVertexPositions));\n    vertexNormals = vertexPositions;\n  }\n\n  const textureCoordinates = calculateLatLongTextureCoordinates(vertexPositions);\n\n  let scale;\n  let translation;\n\n  // Scale and translate the positions.\n  scale = params.radius;\n  translation = params.capsuleEndPointsDistance / 2;\n  for (let i = 0, count = vertexPositions.length; i < count; i += 3) {\n    vertexPositions[i] *= scale;\n    vertexPositions[i + 1] *= scale;\n    vertexPositions[i + 2] = vertexPositions[i + 2] * scale + translation;\n  }\n\n  // Scale and translate the texture coordinates.\n  scale = params.radius / (params.radius + params.capsuleEndPointsDistance);\n  translation = 1 - scale;\n  for (let i = 1, count = textureCoordinates.length; i < count; i += 2) {\n    textureCoordinates[i] = textureCoordinates[i] * scale + translation;\n  }\n\n  const elementCount = vertexIndices ? vertexIndices.length : vertexPositions.length / 3;\n\n  return {\n    vertexPositions: vertexPositions,\n    vertexNormals: vertexNormals,\n    textureCoordinates: textureCoordinates,\n    vertexIndices: vertexIndices,\n    elementCount: elementCount\n  };\n}\n\n/**\n * @param {CapsuleRenderableShapeParams} params\n * @returns {RenderableShape}\n */\nfunction _calculateCapsuleBottomShape(params) {\n  // Calculate the positions.\n  // TODO: This uses lat-long spheres for the ends of the capsule. Use icospheres instead.\n  const individualVertexPositions = calculateSphericalSection(\n      params.divisionsCount / 2, params.divisionsCount, Math.PI / params.divisionsCount,\n      0, params.divisionsCount, TWO_PI / params.divisionsCount);\n\n  // Calculate the indices and normals.\n  let vertexPositions;\n  let vertexIndices;\n  let vertexNormals;\n  if (!params.isUsingSphericalNormals) {\n    // If we use orthogonal normals, then we cannot use vertexIndices.\n    vertexPositions = individualVertexPositions;\n    vertexIndices = null;\n    vertexNormals = calculateOrthogonalVertexNormals(vertexPositions);\n  } else {\n    const positionsAndIndices = dedupVertexArrayWithPositionsAndIndicesArrays(\n        individualVertexPositions);\n    vertexPositions = positionsAndIndices.vertexPositions;\n    vertexIndices = positionsAndIndices.vertexIndices;\n    vertexNormals = vertexPositions;\n  }\n\n  const textureCoordinates = calculateLatLongTextureCoordinates(vertexPositions);\n\n  let scale;\n  let translation;\n\n  // Scale and translate the positions.\n  scale = params.radius;\n  translation = -params.capsuleEndPointsDistance / 2;\n  for (let i = 0, count = vertexPositions.length; i < count; i += 3) {\n    vertexPositions[i] *= scale;\n    vertexPositions[i + 1] *= scale;\n    vertexPositions[i + 2] = vertexPositions[i + 2] * scale + translation;\n  }\n\n  // Scale and translate the texture coordinates.\n  scale = params.radius / (params.radius + params.capsuleEndPointsDistance);\n  translation = 0;\n  for (let i = 1, count = textureCoordinates.length; i < count; i += 2) {\n    textureCoordinates[i] = textureCoordinates[i] * scale + translation;\n  }\n\n  const elementCount = vertexIndices ? vertexIndices.length : vertexPositions.length / 3;\n\n  return {\n    vertexPositions: vertexPositions,\n    vertexNormals: vertexNormals,\n    textureCoordinates: textureCoordinates,\n    vertexIndices: vertexIndices,\n    elementCount: elementCount\n  };\n}\n\n/**\n * @param {CapsuleRenderableShapeParams} params\n * @returns {RenderableShape}\n */\nfunction _calculateCapsuleMiddleShape(params) {\n  let scale;\n  let translation;\n\n  // Calculate the positions.\n  translation = params.capsuleEndPointsDistance / 2;\n  const individualVertexPositions = calculateCylindricalSection(\n      -translation, translation, 0, params.divisionsCount, TWO_PI / params.divisionsCount);\n\n  let vertexPositions;\n  let vertexIndices;\n  let vertexNormals;\n\n  // Calculate the vertex indices and normals.\n  if (!params.isUsingSphericalNormals) {\n    // If we use orthogonal normals, then we cannot use vertexIndices.\n    vertexPositions = individualVertexPositions;\n    vertexIndices = null;\n    vertexNormals = calculateOrthogonalVertexNormals(vertexPositions);\n  } else {\n    const positionsAndIndices = dedupVertexArrayWithPositionsAndIndicesArrays(\n        individualVertexPositions);\n    vertexPositions = positionsAndIndices.vertexPositions;\n    vertexIndices = positionsAndIndices.vertexIndices;\n\n    // Calculate the vertex normals.\n    vertexNormals = vertexPositions.map((coord, index) => index % 3 === 2 ? 0 : coord);\n  }\n\n  // Calculate the texture coordinates.\n  const textureCoordinates = calculateCylindricalTextureCoordinates(vertexPositions);\n\n  // Scale the x and y position coordinates.\n  scale = params.radius;\n  for (let i = 0, count = vertexPositions.length; i < count; i += 3) {\n    vertexPositions[i] *= scale;\n    vertexPositions[i + 1] *= scale;\n  }\n\n  // Scale and translate the texture coordinates.\n  scale = params.capsuleEndPointsDistance / (params.radius + params.capsuleEndPointsDistance);\n  translation = (1 - scale) / 2;\n  for (let i = 1, count = textureCoordinates.length; i < count; i += 2) {\n    textureCoordinates[i] = textureCoordinates[i] * scale + translation;\n  }\n\n  const elementCount = vertexIndices ? vertexIndices.length : vertexPositions.length / 3;\n\n  return {\n    vertexPositions: vertexPositions,\n    vertexNormals: vertexNormals,\n    textureCoordinates: textureCoordinates,\n    vertexIndices: vertexIndices,\n    elementCount: elementCount\n  };\n}\n\nconst capsuleRenderableShapeFactory = {\n  shapeId: 'CAPSULE',\n\n  /**\n   * @param {CapsuleRenderableShapeParams} params\n   * @returns {RenderableShape}\n   */\n  getRenderableShape: (params) => {\n    // Ensure the divisions count is even.\n    if (params.divisionsCount % 2 === 1) {\n      params.divisionsCount++;\n    }\n\n    // The capsule's sub-shapes.\n    const topShape = _calculateCapsuleTopShape(params);\n    const bottomShape = _calculateCapsuleBottomShape(params);\n    const middleShape = _calculateCapsuleMiddleShape(params);\n\n    // Concatenate positions, normals, texture coordinates, and indices.\n    const vertexPositions = topShape.vertexPositions.concat(middleShape.vertexPositions, \n        bottomShape.vertexPositions);\n    const vertexNormals = topShape.vertexNormals.concat(middleShape.vertexNormals,\n        bottomShape.vertexNormals);\n    const textureCoordinates = topShape.textureCoordinates.concat(middleShape.textureCoordinates,\n        bottomShape.textureCoordinates);\n    const vertexIndices = topShape.vertexIndices\n        ? topShape.vertexIndices.concat(middleShape.vertexIndices, bottomShape.vertexIndices)\n        : null;\n    const elementCount = topShape.elementCount + middleShape.elementCount + bottomShape.elementCount;\n\n    return {\n      vertexPositions: vertexPositions,\n      vertexNormals: vertexNormals,\n      textureCoordinates: textureCoordinates,\n      vertexIndices: vertexIndices,\n      elementCount: elementCount\n    };\n  },\n\n  /**\n   * @param {CapsuleRenderableShapeParams} params\n   * @returns {string}\n   */\n  getCacheId(params) {\n    return `${getCacheKey(params)}:${params.divisionsCount}`;\n  }\n};\n\nexport {capsuleRenderableShapeFactory};\n\n/**\n * @typedef {SphericalRenderableShapeParams} CapsuleRenderableShapeParams\n * @property {number} radius\n * @property {number} capsuleEndPointsDistance The distance between the centers of the spheres on\n * either end of the capsule.\n */\n","/**\n * This model defines a shape configuration factory for a cube.\n *\n * This cube is one unit long on each side.\n */\n\nimport {getCacheKey} from '../renderable-shape-store';\n\nconst VERTEX_COORDINATE = 0.5;\n\nconst vertexPositions = [\n  // Front face\n  -VERTEX_COORDINATE, -VERTEX_COORDINATE, VERTEX_COORDINATE,\n  VERTEX_COORDINATE,  -VERTEX_COORDINATE, VERTEX_COORDINATE,\n  VERTEX_COORDINATE,  VERTEX_COORDINATE,  VERTEX_COORDINATE,\n  -VERTEX_COORDINATE, VERTEX_COORDINATE,  VERTEX_COORDINATE,\n  // Back face\n  -VERTEX_COORDINATE, -VERTEX_COORDINATE, -VERTEX_COORDINATE,\n  -VERTEX_COORDINATE, VERTEX_COORDINATE,  -VERTEX_COORDINATE,\n  VERTEX_COORDINATE,  VERTEX_COORDINATE,  -VERTEX_COORDINATE,\n  VERTEX_COORDINATE,  -VERTEX_COORDINATE, -VERTEX_COORDINATE,\n  // Top face\n  -VERTEX_COORDINATE, VERTEX_COORDINATE,  -VERTEX_COORDINATE,\n  -VERTEX_COORDINATE, VERTEX_COORDINATE,  VERTEX_COORDINATE,\n  VERTEX_COORDINATE,  VERTEX_COORDINATE,  VERTEX_COORDINATE,\n  VERTEX_COORDINATE,  VERTEX_COORDINATE,  -VERTEX_COORDINATE,\n  // Bottom face\n  -VERTEX_COORDINATE, -VERTEX_COORDINATE, -VERTEX_COORDINATE,\n  VERTEX_COORDINATE,  -VERTEX_COORDINATE, -VERTEX_COORDINATE,\n  VERTEX_COORDINATE,  -VERTEX_COORDINATE, VERTEX_COORDINATE,\n  -VERTEX_COORDINATE, -VERTEX_COORDINATE, VERTEX_COORDINATE,\n  // Right face\n  VERTEX_COORDINATE,  -VERTEX_COORDINATE, -VERTEX_COORDINATE,\n  VERTEX_COORDINATE,  VERTEX_COORDINATE,  -VERTEX_COORDINATE,\n  VERTEX_COORDINATE,  VERTEX_COORDINATE,  VERTEX_COORDINATE,\n  VERTEX_COORDINATE,  -VERTEX_COORDINATE, VERTEX_COORDINATE,\n  // Left face\n  -VERTEX_COORDINATE, -VERTEX_COORDINATE, -VERTEX_COORDINATE,\n  -VERTEX_COORDINATE, -VERTEX_COORDINATE, VERTEX_COORDINATE,\n  -VERTEX_COORDINATE, VERTEX_COORDINATE,  VERTEX_COORDINATE,\n  -VERTEX_COORDINATE, VERTEX_COORDINATE,  -VERTEX_COORDINATE\n];\n\nconst orthogonalVertexNormals = [\n  // Front face\n  0, 0, 1,\n  0, 0, 1,\n  0, 0, 1,\n  0, 0, 1,\n  // Back face\n  0, 0, -1,\n  0, 0, -1,\n  0, 0, -1,\n  0, 0, -1,\n  // Top face\n  0, 1, 0,\n  0, 1, 0,\n  0, 1, 0,\n  0, 1, 0,\n  // Bottom face\n  0, -1, 0,\n  0, -1, 0,\n  0, -1, 0,\n  0, -1, 0,\n  // Right face\n  1, 0, 0,\n  1, 0, 0,\n  1, 0, 0,\n  1, 0, 0,\n  // Left face\n  -1, 0, 0,\n  -1, 0, 0,\n  -1, 0, 0,\n  -1, 0, 0\n];\n\nconst textureCoordinates = [\n  // Front face\n  1, 0,\n  0, 0,\n  0, 1,\n  1, 1,\n  // Back face\n  1, 0,\n  0, 0,\n  0, 1,\n  1, 1,\n  // Top face\n  1, 0,\n  0, 0,\n  0, 1,\n  1, 1,\n  // Bottom face\n  1, 0,\n  0, 0,\n  0, 1,\n  1, 1,\n  // Right face\n  1, 0,\n  0, 0,\n  0, 1,\n  1, 1,\n  // Left face\n  1, 0,\n  0, 0,\n  0, 1,\n  1, 1\n];\n\n// This array defines each face as two triangles, using the indices into the vertex array\n// to specify each triangle's position.\nconst vertexIndices = [\n  // Front face\n  0,  1,  2,\n  0,  2,  3,\n  // Back face\n  4,  5,  6,\n  4,  6,  7,\n  // Top face\n  8,  9,  10,\n  8,  10, 11,\n  // Bottom face\n  12, 13, 14,\n  12, 14, 15,\n  // Right face\n  16, 17, 18,\n  16, 18, 19,\n  // Left face\n  20, 21, 22,\n  20, 22, 23\n];\n\nconst cubeRenderableShapeFactory = {\n  shapeId: 'CUBE',\n\n  /**\n   * @param {RenderableShapeConfig} params\n   * @returns {RenderableShape}\n   */\n  getRenderableShape: params => {\n    const vertexNormals = params.isUsingSphericalNormals ? vertexPositions : orthogonalVertexNormals;\n\n    return {\n      vertexPositions: vertexPositions,\n      vertexNormals: vertexNormals,\n      textureCoordinates: textureCoordinates,\n      vertexIndices: vertexIndices,\n      elementCount: vertexIndices.length\n    };\n  },\n\n  /**\n   * @param {RenderableShapeConfig} params\n   * @returns {string}\n   */\n  getCacheId(params) {\n    return getCacheKey(params);\n  }\n};\n\nexport {cubeRenderableShapeFactory};\n","/**\n * This model defines a shape configuration factory for a regular icosahedron.\n *\n * The shape is centered around the origin.\n */\n\nimport {\n  calculateLatLongTextureCoordinates,\n  calculateOrthogonalVertexNormals,\n  expandVertexIndicesAroundLongitudeSeam,\n  expandVertexIndicesToDuplicatePositions,\n} from '../../../util';\nimport {getCacheKey} from '../renderable-shape-store';\n\n// The corners of a unit icosahedron with vertices aligned with the y-axis.\nconst individualVertexPositions = [\n  -0.525731086730957, -0.7236068248748779, 0.4472135901451111,\n  0.525731086730957, -0.7236068248748779, 0.4472135901451111,\n  -0.525731086730957, 0.7236068248748779, -0.4472135901451111,\n  0.525731086730957, 0.7236068248748779, -0.4472135901451111,\n  0, 0, 1,\n  0, 0.8944271802902222, 0.44721361994743347,\n  0, -0.8944271802902222, -0.44721361994743347,\n  0, 0, -1,\n  0.8506508469581604, 0.27639320492744446, 0.4472135901451111,\n  -0.8506508469581604, 0.27639320492744446, 0.4472135901451111,\n  0.8506508469581604, -0.27639320492744446, -0.4472135901451111,\n  -0.8506508469581604, -0.27639320492744446, -0.4472135901451111\n];\n\nconst individualVertexIndices = [\n  1,  4,  0,\n  4,  9,  0,\n  4,  5,  9,\n  8,  5,  4,\n  1,  8,  4,\n  1,  10, 8,\n  10, 3,  8,\n  8,  3,  5,\n  3,  2,  5,\n  3,  7,  2,\n  3,  10, 7,\n  10, 6,  7,\n  6,  11, 7,\n  6,  0,  11,\n  6,  1,  0,\n  10, 1,  6,\n  11, 0,  9,\n  2,  11, 9,\n  5,  2,  9,\n  11, 2,  7\n];\n\nlet vertexPositionsExpandedAroundSeam = null;\nlet vertexIndicesExpandedAroundSeam = null;\nlet textureCoordinates = null;\n\nconst icosahedronRenderableShapeFactory = {\n  shapeId: 'ICOSAHEDRON',\n\n  /**\n   * @param {RenderableShapeConfig} params\n   * @returns {RenderableShape}\n   */\n  getRenderableShape: params => {\n    let vertexPositions;\n    let vertexIndices;\n\n    if (!vertexPositionsExpandedAroundSeam) {\n      // Calculate the modified positions and indices.\n      const positionsAndIndices = expandVertexIndicesAroundLongitudeSeam(\n          individualVertexPositions, individualVertexIndices);\n      vertexPositionsExpandedAroundSeam = positionsAndIndices.vertexPositions;\n      vertexIndicesExpandedAroundSeam = positionsAndIndices.vertexIndices;\n    }\n\n    vertexPositions = vertexPositionsExpandedAroundSeam;\n    vertexIndices = vertexIndicesExpandedAroundSeam;\n\n    let vertexNormals;\n    // If we use orthogonal normals, then we cannot use vertexIndices.\n    if (!params.isUsingSphericalNormals) {\n      vertexPositions = expandVertexIndicesToDuplicatePositions(vertexPositions,\n          vertexIndices);\n      vertexIndices = null;\n      vertexNormals = calculateOrthogonalVertexNormals(vertexPositions);\n    } else {\n      vertexNormals = vertexPositions;\n    }\n\n    textureCoordinates = textureCoordinates\n        ? textureCoordinates\n        : calculateLatLongTextureCoordinates(vertexPositions);\n\n    const elementCount = vertexIndices ? vertexIndices.length : vertexPositions.length / 3;\n\n    return {\n      vertexPositions: vertexPositions,\n      vertexNormals: vertexNormals,\n      textureCoordinates: textureCoordinates,\n      vertexIndices: vertexIndices,\n      elementCount: elementCount\n    };\n  },\n\n  /**\n   * @param {RenderableShapeConfig} params\n   * @returns {string}\n   */\n  getCacheId(params) {\n    return getCacheKey(params);\n  }\n};\n\nexport {icosahedronRenderableShapeFactory};\n","/**\n * This module defines logic that creates a spherical shape configuration by taking a shape,\n * sub-dividing each of its triangles, and projecting each new vertex onto the edge of a sphere.\n *\n * This is technically only an \"icosphere\" if the starting shape is an icosahedron.\n *\n * This shape also is known as a \"geosphere\".\n *\n * The shape is centered around the origin.\n */\n\nimport {\n  deepCopy,\n  calculateLatLongTextureCoordinates,\n  calculateOrthogonalVertexNormals,\n  expandVertexIndicesAroundLongitudeSeam,\n  expandVertexIndicesToDuplicatePositions,\n  tesselateSphere,\n} from '../../../util';\nimport {getCacheKey} from '../renderable-shape-store';\nimport {renderableShapeFactory} from '../renderable-shape-factory';\n\nconst icosphereRenderableShapeFactory = {\n  shapeId: 'ICOSPHERE',\n\n  /**\n   * @param {IcosphereRenderableShapeParams} params\n   * @returns {RenderableShape}\n   */\n  getRenderableShape: params => {\n    params.divisionsCount = Math.max(params.divisionsCount, 1);\n\n    const copyParams = deepCopy(params);\n    copyParams.shapeId = params.baseShapeId || 'ICOSAHEDRON';\n    const baseRenderableShape = renderableShapeFactory.getRenderableShape(copyParams);\n\n    // Calculate the positions and indices.\n    let {vertexPositions, vertexIndices} = tesselateSphere(params.divisionsCount,\n        baseRenderableShape.vertexPositions, baseRenderableShape.vertexIndices);\n    ({vertexPositions, vertexIndices} = expandVertexIndicesAroundLongitudeSeam(\n        vertexPositions, vertexIndices));\n\n    let vertexNormals;\n    // If we use orthogonal normals, then we cannot use vertexIndices.\n    if (!params.isUsingSphericalNormals) {\n      vertexPositions = expandVertexIndicesToDuplicatePositions(vertexPositions,\n          vertexIndices);\n      vertexIndices = null;\n      vertexNormals = calculateOrthogonalVertexNormals(vertexPositions);\n    } else {\n      vertexNormals = vertexPositions;\n    }\n\n    const textureCoordinates = calculateLatLongTextureCoordinates(vertexPositions);\n\n    const elementCount = vertexIndices ? vertexIndices.length : vertexPositions.length / 3;\n\n    return {\n      vertexPositions: vertexPositions,\n      vertexNormals: vertexNormals,\n      textureCoordinates: textureCoordinates,\n      vertexIndices: vertexIndices,\n      elementCount: elementCount\n    };\n  },\n\n  /**\n   * @param {IcosphereRenderableShapeParams} params\n   * @returns {string}\n   */\n  getCacheId(params) {\n    return `${getCacheKey(params)}:${params.divisionsCount}`;\n  }\n};\n\nexport {icosphereRenderableShapeFactory};\n\n/**\n * @typedef {SphericalRenderableShapeParams} IcosphereRenderableShapeParams\n * @property {string} baseShapeId The ID of the base renderable shape that will be sub-divided to\n * create this icosphere shape.\n */\n","import {\n  calculateLatLongTextureCoordinates,\n  calculateOrthogonalVertexNormals,\n  calculateSphericalSection,\n  dedupVertexArrayWithPositionsAndIndicesArrays,\n  TWO_PI,\n} from '../../../util';\nimport {getCacheKey} from '../renderable-shape-store';\n\n/**\n * This module defines a configuration factory for a spherical shape whose vertices lie along\n * latitude and longitude lines.\n *\n * This shape also is known as a \"UV sphere\".\n *\n * The shape is centered around the origin with the poles aligned with the z-axis.\n */\n\n/**\n * @param {number} divisionsCount\n * @returns {Array.<Number>}\n * @private\n */\nfunction _calculateLatLongSpherePositions(divisionsCount) {\n  const deltaPitch = Math.PI / divisionsCount;\n  const deltaAzimuth = TWO_PI / divisionsCount;\n\n  return calculateSphericalSection(\n      0, divisionsCount, deltaPitch,\n      0, divisionsCount, deltaAzimuth);\n}\n\nconst latLongSphereRenderableShapeFactory = {\n  shapeId: 'LAT_LONG_SPHERE',\n\n  /**\n   * @param {SphericalRenderableShapeParams} params\n   * @returns {RenderableShape}\n   */\n  getRenderableShape: params => {\n    // Calculate the positions.\n    const individualVertexPositions = _calculateLatLongSpherePositions(params.divisionsCount);\n\n    // Calculate the indices and normals.\n    let vertexPositions;\n    let vertexIndices;\n    let vertexNormals;\n    if (!params.isUsingSphericalNormals) {\n      // If we use orthogonal normals, then we cannot use vertexIndices.\n      vertexPositions = individualVertexPositions;\n      vertexIndices = null;\n      vertexNormals = calculateOrthogonalVertexNormals(vertexPositions);\n    } else {\n      ({vertexPositions, vertexIndices} = dedupVertexArrayWithPositionsAndIndicesArrays(\n          individualVertexPositions));\n      vertexNormals = vertexPositions;\n    }\n\n    const textureCoordinates = calculateLatLongTextureCoordinates(vertexPositions);\n\n    const elementCount = vertexIndices ? vertexIndices.length : vertexPositions.length / 3;\n\n    return {\n      vertexPositions: vertexPositions,\n      vertexNormals: vertexNormals,\n      textureCoordinates: textureCoordinates,\n      vertexIndices: vertexIndices,\n      elementCount: elementCount\n    };\n  },\n\n  /**\n   * @param {SphericalRenderableShapeParams} params\n   * @returns {string}\n   */\n  getCacheId(params) {\n    return `${getCacheKey(params)}:${params.divisionsCount}`;\n  }\n};\n\nexport {latLongSphereRenderableShapeFactory};\n","import {calculateOrthogonalVertexNormals} from '../../../util';\nimport {getCacheKey} from '../renderable-shape-store';\n\n/**\n * This model defines a shape configuration factory for a regular tetrahedron.\n *\n * The shape is centered around the origin.\n */\n\n// ||(VERTEX_COORDINATE, VERTEX_COORDINATE, VERTEX_COORDINATE)|| = 1\nconst VERTEX_COORDINATE = 0.5773502588272095;\n\nconst vertexPositions = [\n  // Left-top-near face\n  VERTEX_COORDINATE,  VERTEX_COORDINATE,  VERTEX_COORDINATE,\n  -VERTEX_COORDINATE, -VERTEX_COORDINATE, VERTEX_COORDINATE,\n  -VERTEX_COORDINATE, VERTEX_COORDINATE,  -VERTEX_COORDINATE,\n\n  // Right-top-far face\n  VERTEX_COORDINATE,  VERTEX_COORDINATE,  VERTEX_COORDINATE,\n  -VERTEX_COORDINATE, VERTEX_COORDINATE,  -VERTEX_COORDINATE,\n  VERTEX_COORDINATE,  -VERTEX_COORDINATE, -VERTEX_COORDINATE,\n\n  // Right-bottom-near face\n  VERTEX_COORDINATE,  VERTEX_COORDINATE,  VERTEX_COORDINATE,\n  VERTEX_COORDINATE,  -VERTEX_COORDINATE, -VERTEX_COORDINATE,\n  -VERTEX_COORDINATE, -VERTEX_COORDINATE, VERTEX_COORDINATE,\n\n  // Left-bottom-far face\n  -VERTEX_COORDINATE, -VERTEX_COORDINATE, VERTEX_COORDINATE,\n  VERTEX_COORDINATE, -VERTEX_COORDINATE, -VERTEX_COORDINATE,\n  -VERTEX_COORDINATE, VERTEX_COORDINATE, -VERTEX_COORDINATE\n];\n\n// 1 - Math.sqrt(3) / 2\nconst TEXTURE_BASE_COORDINATE = 0.13397459621;\n\nconst textureCoordinates = [\n  // Left-top-near face\n  0, TEXTURE_BASE_COORDINATE,\n  0.5, 1,\n  1, TEXTURE_BASE_COORDINATE,\n\n  // Right-top-far face\n  0, TEXTURE_BASE_COORDINATE,\n  0.5, 1,\n  1, TEXTURE_BASE_COORDINATE,\n\n  // Right-bottom-near face\n  0, TEXTURE_BASE_COORDINATE,\n  0.5, 1,\n  1, TEXTURE_BASE_COORDINATE,\n\n  // Left-bottom-far face\n  0, TEXTURE_BASE_COORDINATE,\n  0.5, 1,\n  1, TEXTURE_BASE_COORDINATE\n];\n\nconst tetrahedronRenderableShapeFactory = {\n  shapeId: 'TETRAHEDRON',\n\n  /**\n   * @param {RenderableShapeConfig} params\n   * @returns {RenderableShape}\n   */\n  getRenderableShape: params => {\n    const vertexNormals = params.isUsingSphericalNormals\n        ? vertexPositions\n        : calculateOrthogonalVertexNormals(vertexPositions);\n\n    return {\n      vertexPositions: vertexPositions,\n      vertexNormals: vertexNormals,\n      textureCoordinates: textureCoordinates,\n      vertexIndices: null,\n      elementCount: vertexPositions.length / 3\n    };\n  },\n\n  /**\n   * @param {RenderableShapeConfig} params\n   * @returns {string}\n   */\n  getCacheId(params) {\n    return getCacheKey(params);\n  }\n};\n\nexport {tetrahedronRenderableShapeFactory};\n","import {\n  animator,\n  PersistentAnimationJob\n}\nfrom 'lsl-animatex';\nimport { PhysicsEngine } from 'lsl-physx';\nimport {\n  ProgramWrapper,\n  programWrapperStore,\n  textureStore\n}\nfrom '../program-wrapper';\nimport {\n  bindFramebuffer,\n  bindGLContextToViewportDimensions,\n  getWebGLContext,\n  getViewportHeight,\n  getViewportWidth,\n}\nfrom '../util';\n\n/**\n * This top-level Controller class initializes and runs the rest of the app.\n */\nclass GrafxController extends PersistentAnimationJob {\n  constructor() {\n    super();\n\n    this._canvas = null;\n    this._gl = null;\n    this._scene = null;\n    this._currentProgramWrapper = null;\n  }\n\n  /**\n   * Initializes the app. After this completes successfully, call run to actually start the app.\n   *\n   * @param {HTMLCanvasElement} canvas\n   * @param {Array.<ProgramWrapperConfig>} programConfigs Configurations for program wrappers that\n   * should be pre-cached before starting the rest of the app.\n   * @param {Array.<String>} texturePaths Texture images that should be pre-cached before\n   * starting the rest of the app.\n   * @param {Function.<Scene>} sceneFactory\n   * @returns {Promise}\n   */\n  initialize(canvas, programConfigs, texturePaths, sceneFactory) {\n    this._canvas = canvas;\n\n    return Promise.resolve()\n      .then(() => this._setUpWebGLContext())\n      .then(() => Promise.all([\n        this._preCachePrograms(programConfigs),\n        this._preCacheTextures(texturePaths)\n      ]))\n      .then(() => this._setUpScene(sceneFactory));\n  }\n\n  destroy() {}\n\n  reset() {\n    // FIXME: Will it be easier to replace this with initialize?\n    this._scene.reset();\n  }\n\n  /**\n   * Runs the app. This should be called after initialize.\n   *\n   * A few things happen if this is run in dev mode:\n   * - The draw and update steps of each frame are wrapped in a try/catch block.\n   * - This method returns a Promise that rejects if an error is throw during any update or draw\n   *   step and resolves when this controller has finished (currently never)\n   */\n  run() {\n    this._startAnimator();\n  }\n\n  _startAnimator() { // FIXME: Decouple physx\n    animator.startJob(PhysicsEngine.instance);\n    animator.startJob(this);\n  }\n\n  /**\n   * Updates the scene.\n   *\n   * This updates all of the current parameters for each component in the scene for the current\n   * frame. However, this does not render anything. Rendering is done by a following call to the\n   * draw function.\n   *\n   * @param {DOMHighResTimeStamp} currentTime\n   * @param {DOMHighResTimeStamp} deltaTime\n   */\n  update(currentTime, deltaTime) {\n    this._scene.updateSelfAndChildren(currentTime, deltaTime);\n  }\n\n  /**\n   * Draws the scene.\n   *\n   * This renders the current frame for all components in the scene. This assumes that all relevant\n   * parameter updates for this frame have already been computed by a previous call to _updateScene.\n   */\n  draw() {\n    // Clear the canvas before we start drawing on it.\n    this._gl.clear(this._gl.COLOR_BUFFER_BIT | this._gl.DEPTH_BUFFER_BIT);\n\n    // If we are using a post-processing program, then we need to render models to a framebuffer\n    // rather than directly to the canvas.\n    if (programWrapperStore.isUsingPostProcessingPrograms) {\n      bindFramebuffer(this._gl, programWrapperStore.modelsFramebuffer);\n      this._gl.clear(this._gl.COLOR_BUFFER_BIT | this._gl.DEPTH_BUFFER_BIT);\n    }\n\n    // Draw each program separately. This minimizes how many times we need to switch programs by\n    // grouping all of the draw calls for models that use the same program/shaders.\n    programWrapperStore.forEachModelProgram((programWrapper, drawFrameHandlers) =>\n      this._drawModelProgram(programWrapper, drawFrameHandlers));\n    programWrapperStore.forEachPostProcessingProgram(\n      (programWrapper) => this._drawPostProcessingProgram(programWrapper));\n  }\n\n  /**\n   * For the given program key, this binds the registered shader program to the GL rendering context\n   * and calls each of the registered draw-frame handlers.\n   *\n   * @param {ProgramWrapper|GroupProgramWrapper} programWrapper\n   * @param {Set.<Function>} [drawFrameHandlers]\n   * @private\n   */\n  _drawModelProgram(programWrapper, drawFrameHandlers) {\n    // Check whether we need to switch programs (always true if there is more than one program\n    // registered).\n    if (this._currentProgramWrapper !== programWrapper) {\n      programWrapper.setProgram(this._gl);\n      this._currentProgramWrapper = programWrapper;\n    }\n\n    // Call each of the draw-frame handlers that use the current rendering program.\n    drawFrameHandlers.forEach(drawFrameHandler => drawFrameHandler());\n  }\n\n  /**\n   * For the given program key, this binds the registered shader program to the GL rendering context\n   * and calls each of the registered draw-frame handlers.\n   *\n   * @param {ProgramWrapper|GroupProgramWrapper} programWrapper\n   * @private\n   */\n  _drawPostProcessingProgram(programWrapper) {\n    this._currentProgramWrapper = programWrapper;\n    programWrapper.draw(this._gl);\n  }\n\n  /**\n   * Initializes the WebGL rendering context.\n   *\n   * @private\n   */\n  _setUpWebGLContext() {\n    // Get the WebGL rendering context.\n    try {\n      this._gl = getWebGLContext(this._canvas);\n    }\n    catch (e) {\n      alert('WebGL is not supported by your browser! :(');\n      throw e;\n    }\n\n    // Have the canvas context match the resolution of the window's viewport.\n    bindGLContextToViewportDimensions(this._canvas, this._gl, () => this._updateAspectRatio());\n\n    // Clear everything to black.\n    this._gl.clearColor(0, 0, 0, 1);\n    this._gl.clearDepth(1);\n\n    // Enable depth testing.\n    this._gl.enable(this._gl.DEPTH_TEST);\n    this._gl.depthFunc(this._gl.LEQUAL);\n  }\n\n  /**\n   * Loads, compiles, caches, and initializes some rendering programs.\n   *\n   * @param {Array.<ProgramWrapperConfig>} programConfigs\n   * @returns {Promise}\n   * @private\n   */\n  _preCachePrograms(programConfigs) {\n    const promises =\n      programConfigs.map(config => programWrapperStore.loadProgramWrapper(this._gl, config));\n    return Promise.all(promises);\n  }\n\n  /**\n   * Loads, compiles, and caches some textures.\n   *\n   * @param {Array.<String>} texturePaths\n   * @returns {Promise}\n   * @private\n   */\n  _preCacheTextures(texturePaths) {\n    return Promise.all(texturePaths\n      .map(texturePath => textureStore.loadTexture(this._gl, texturePath)));\n  }\n\n  /**\n   * Initializes the scene.\n   *\n   * @param {Function.<Scene>} sceneFactory\n   * @returns {Promise}\n   * @abstract\n   * @protected\n   */\n  _setUpScene(sceneFactory) {\n    // Extending classes should implement this method.\n    throw new TypeError('Method not implemented');\n  }\n\n  /**\n   * @protected\n   */\n  _updateAspectRatio() {\n    this._scene.camera.aspectRatio = getViewportWidth() / getViewportHeight();\n    _resizeFramebuffersToMatchViewportSize(this._gl);\n  }\n\n  /**\n   * @returns {mat4}\n   * @protected\n   */\n  _getViewMatrix() {\n    return this._scene.camera.viewMatrix;\n  }\n\n  /**\n   * @returns {mat4}\n   * @protected\n   */\n  _getProjectionMatrix() {\n    return this._scene.camera.projectionMatrix;\n  }\n}\n\n/**\n * @param {WebGLRenderingContext} gl\n * @private\n */\nfunction _resizeFramebuffersToMatchViewportSize(gl) {\n  if (programWrapperStore.isUsingPostProcessingPrograms) {\n    const width = getViewportWidth();\n    const height = getViewportHeight();\n\n    // Update the per-model framebuffer texture.\n    const texture = programWrapperStore.modelsTexture;\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, width, height, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n\n    // Update the per-model framebuffer depth render buffer.\n    const renderBuffer = programWrapperStore.modelsRenderBuffer;\n    gl.bindRenderbuffer(gl.RENDERBUFFER, renderBuffer);\n    gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, width, height);\n\n    // Update the post-processing framebuffer textures.\n    programWrapperStore.forEachPostProcessingProgram(programWrapper => {\n      programWrapper.config.childrenFramebufferIds.forEach(id => {\n        const texture = programWrapperStore.getTexture(id);\n        gl.bindTexture(gl.TEXTURE_2D, texture);\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, width, height, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n      });\n    });\n  }\n}\n\nexport { GrafxController };\n","/**\n * This class defines a light source.\n */\nclass Light {\n  constructor() {\n    // TODO\n  }\n\n  // TODO: Implement this.\n}\n\nexport {Light};\n","import { ModelGroupController } from '../models';\n\n/**\n * This class handles the overall scene.\n */\nclass Scene extends ModelGroupController {\n  /**\n   * @param {ModelGroupControllerConfig} modelControllerParams\n   */\n  constructor(modelControllerParams) {\n    super(modelControllerParams);\n\n    // Scene is an abstract class. It should not be instantiated directly.\n    if (new.target === Scene) {\n      throw new TypeError('Cannot construct Scene instances directly');\n    }\n\n    this._getWorldTransform = () => this.worldTransform;\n    this._lights = [];\n    this._camera = null;\n  }\n\n  reset() {\n    super.reset();\n    this._lights.forEach(light => light.reset());\n    this._camera.reset();\n  }\n\n  /**\n   * @param {DOMHighResTimeStamp} currentTime\n   * @param {DOMHighResTimeStamp} deltaTime\n   */\n  updateChildren(currentTime, deltaTime) {\n    super.updateChildren(currentTime, deltaTime);\n    this._camera.update(currentTime, deltaTime);\n  }\n\n  /** @returns {Camera} */\n  get camera() {\n    return this._camera;\n  }\n}\n\nexport { Scene };\n","export * from './src/geometry';\nexport * from './src/gl-util';\nexport * from './src/hash-map';\nexport * from './src/util';\n","/**\n * This module defines a collection of static geometry utility functions.\n */\n\nimport {randomFloatInRange} from './util';\n\nconst EPSILON = 0.0000001;\nconst DEG_TO_RAD_RATIO = Math.PI / 180;\nconst RAD_TO_DEG_RATIO = 180 / Math.PI;\nconst HALF_PI = Math.PI / 2;\nconst TWO_PI = Math.PI * 2;\n\n/**\n * @param {number} deg\n * @returns {number}\n */\nfunction degToRad(deg) {\n  return deg * DEG_TO_RAD_RATIO;\n}\n\n/**\n * @param {number} rad\n * @returns {number}\n */\nfunction radToDeg(rad) {\n  return rad * RAD_TO_DEG_RATIO;\n}\n\n/**\n * This checks whether two floating-point numbers are close enough that they could be equal if not\n * for round-off errors.\n *\n * @param {number} a\n * @param {number} b\n * @returns {boolean}\n */\nfunction areClose(a, b) {\n  const diff = a - b;\n  return (diff > 0 ? diff : -diff) < EPSILON;\n}\n\n/**\n * @param {vec3} a\n * @param {vec3} b\n * @returns {boolean}\n */\nfunction areVec3sEqual(a, b) {\n  return a[0] === b[0] &&\n      a[1] === b[1] &&\n      a[2] === b[2];\n}\n\n/**\n * @param {vec3} v\n * @returns {string}\n */\nfunction vec3ToString(v) {\n  return `(${v[0]},${v[1]},${v[2]})`;\n}\n\n/**\n * TODO: This finds a random point with uniform probability within a cubic area, which biases the resulting vector toward the corners of this cubic area. Re-write this to produce an unbiased vector.\n *\n * @param {number} [scale=1]\n * @returns {vec3}\n */\nfunction createRandomVec3(scale = 1) {\n  const v = vec3.create();\n  return setRandomVec3(v, scale);\n}\n\n/**\n * TODO: This finds a random point with uniform probability within a cubic area, which biases the resulting vector toward the corners of this cubic area. Re-write this to produce an unbiased vector.\n *\n * @param {vec3} v\n * @param {number} [scale=1]\n * @returns {vec3}\n */\nfunction setRandomVec3(v, scale = 1) {\n  vec3.set(v, Math.random() - 0.5, Math.random() - 0.5, Math.random() - 0.5);\n  vec3.normalize(v, v);\n  vec3.scale(v, v, scale);\n  return v;\n}\n\n/**\n * Calculates a vector that is orthogonal to the given vector.\n *\n * TODO: This finds a random point with uniform probability within a cubic area, which biases the resulting vector toward the corners of this cubic area. Re-write this to produce an unbiased vector.\n *\n * @param {vec3} basis\n * @param {number} [scale=1]\n * @returns {vec3}\n */\nfunction createRandomOrthogonalVec3(basis, scale = 1) {\n  const result = vec3.create();\n  return setRandomOrthogonalVec3(result, basis, scale);\n}\n\n/**\n * Calculates a vector that is orthogonal to the given vector.\n *\n * TODO: This finds a random point with uniform probability within a cubic area, which biases the resulting vector toward the corners of this cubic area. Re-write this to produce an unbiased vector.\n *\n * @param {vec3} result\n * @param {vec3} basis\n * @param {number} [scale=1]\n * @returns {vec3}\n */\nfunction setRandomOrthogonalVec3(result, basis, scale = 1) {\n  setRandomVec3(result);\n  // This is based on the dot and cross products and the fact that the dot product for two\n  // orthogonal vectors is zero.\n  result[2] = -(basis[0] * result[0] + basis[1] * result[1]) / basis[2];\n  vec3.normalize(result, result);\n  vec3.scale(result, result, scale);\n  return result;\n}\n\n/**\n * @param {vec3} avg\n * @param {vec3} range\n * @returns {vec3}\n * @private\n */\nfunction randomVec3InRange(avg, range) {\n  const position = vec3.create();\n  for (let i = 0; i < 3; i++) {\n    const min = avg[i] - range[i] / 2;\n    const max = avg[i] + range[i] / 2;\n    position[i] = randomFloatInRange(min, max);\n  }\n  return position;\n}\n\n/**\n * Rotates the given vector around a random orthogonal axis by a random angle within the given angle\n * bounds.\n *\n * @param {vec3} v\n * @param {number} minRotationAngle\n * @param {number} maxRotationAngle\n */\nfunction addRandomRotationToVector(v, minRotationAngle, maxRotationAngle) {\n  // Create a random orthogonal axis.\n  const rotationAxis = createRandomVec3();\n  vec3.cross(rotationAxis, rotationAxis, v);\n  vec3.normalize(rotationAxis, rotationAxis);\n\n  // Create a random angle.\n  const rotationAngle = randomFloatInRange(minRotationAngle, maxRotationAngle);\n\n  // Create a rotation quaternion.\n  const rotation = quat.create();\n  quat.setAxisAngle(rotation, rotationAxis, rotationAngle);\n\n  // Apply the rotation to the vector.\n  vec3.transformQuat(v, v, rotation);\n}\n\n/**\n * @param {quat} out\n * @param {quat} a\n * @param {quat} b\n * @param {number} scale\n * @returns {quat}\n */\nfunction scaleAndAddQuat(out, a, b, scale) {\n  return quat.set(out,\n      a[0] + b[0] * scale,\n      a[1] + b[1] * scale,\n      a[2] + b[2] * scale,\n      a[3] + b[3] * scale);\n}\n\n/**\n * @param {vec3} v\n * @returns {number}\n */\nfunction getMaxVec3Dimension(v) {\n  let max = v[0] > v[1] ? v[0] : v[1];\n  max = max > v[2] ? max : v[2];\n  return max;\n}\n\nexport {\n  EPSILON,\n  HALF_PI,\n  TWO_PI,\n  degToRad,\n  radToDeg,\n  areClose,\n  areVec3sEqual,\n  vec3ToString,\n  createRandomVec3,\n  setRandomVec3,\n  createRandomOrthogonalVec3,\n  setRandomOrthogonalVec3,\n  randomVec3InRange,\n  addRandomRotationToVector,\n  scaleAndAddQuat,\n  getMaxVec3Dimension,\n};\n","/**\n * This module defines a collection of static general utility functions for WebGL.\n */\n\nimport {HashMap} from './hash-map';\nimport {HALF_PI, TWO_PI} from './geometry';\nimport {debounce, isInDevMode, loadText} from './util';\nimport {programWrapperStore} from '../../program-wrapper/src/program-wrapper-store';\n\nlet viewportWidth = 10;\nlet viewportHeight = 10;\n\n/**\n * @param {HTMLCanvasElement} canvas\n * @returns {?WebGLRenderingContext}\n * @throws If unable to get a WebGL context.\n */\nfunction getWebGLContext(canvas) {\n  const params = {alpha: false};\n  // Try to grab the standard context. If it fails, fallback to the experimental context.\n  return canvas.getContext('webgl', params) || canvas.getContext('experimental-webgl', params);\n}\n\n/**\n * @param {WebGLRenderingContext} gl\n * @returns {?WebGLBuffer}\n * @throws If unable to create a buffer object.\n */\nfunction createBuffer(gl) {\n  const buffer = gl.createBuffer();\n  if (!buffer) {\n    throw new Error('An error occurred creating the buffer object');\n  }\n  return buffer;\n}\n// TODO: use all this helper stuff in the programWrapper logic?\n/**\n * @param {WebGLRenderingContext} gl\n * @param {WebGLProgram} program\n * @param {string} locationName\n * @returns {number}\n * @throws If unable to get an attribute location for the given name.\n */\nfunction getAttribLocation(gl, program, locationName) {\n  const attribLocation = gl.getAttribLocation(program, locationName);\n  if (attribLocation < 0) {\n    throw new Error(`An error occurred getting the attribute location: ${locationName}`);\n  }\n  return attribLocation;\n}\n\n/**\n * @param {WebGLRenderingContext} gl\n * @param {WebGLShader} vertexShader\n * @param {WebGLShader} fragmentShader\n * @returns {WebGLProgram}\n * @throws If unable to link the program.\n */\nfunction buildProgram(gl, vertexShader, fragmentShader) {\n  const program = gl.createProgram();\n  gl.attachShader(program, vertexShader);\n  gl.attachShader(program, fragmentShader);\n  gl.linkProgram(program);\n\n  if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n    const infoLog = gl.getProgramInfoLog(program);\n    console.error('An error occurred linking the shader program', infoLog);\n    throw new Error('An error occurred linking the shader program');\n  }\n\n  return program;\n}\n\n/**\n * @param {WebGLRenderingContext} gl\n * @param {string} shaderSource\n * @param {boolean} isFragmentShader\n * @returns {WebGLShader}\n * @throws If unable to compile the shader.\n */\nfunction buildShader(gl, shaderSource, isFragmentShader) {\n  const shaderType = isFragmentShader ? gl.FRAGMENT_SHADER : gl.VERTEX_SHADER;\n  const shader = gl.createShader(shaderType);\n  gl.shaderSource(shader, shaderSource);\n  gl.compileShader(shader);\n\n  if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n    const infoLog = gl.getShaderInfoLog(shader);\n    console.error('An error occurred compiling the shader', infoLog);\n    throw new Error('An error occurred compiling the shader');\n  }\n\n  return shader;\n}\n\n/**\n * Loads a shader program by scouring the current document, looking for a script with the specified\n * ID.\n *\n * @param {WebGLRenderingContext} gl\n * @param {string} url\n * @returns {Promise.<WebGLShader, Error>}\n */\nfunction loadShader(gl, url) {\n  return loadText(url)\n      .then(shaderSource => buildShader(gl, shaderSource, url.endsWith('.frag')));\n}\n\n/**\n * Loads the shader source code from the given URLs, compiles the shader source code, and creates\n * a program from the resulting shaders.\n *\n * @param {WebGLRenderingContext} gl\n * @param {string} vertexShaderUrl\n * @param {string} fragmentShaderUrl\n * @returns {Promise.<WebGLProgram, Error>}\n * @throws If any error occurs while loading and building the shaders and program.\n */\nfunction loadProgram(gl, vertexShaderUrl, fragmentShaderUrl) {\n  return Promise.all([\n        vertexShaderUrl,\n        fragmentShaderUrl\n      ].map(url => loadShader(gl, url)))\n      .then(shaders => {\n        const vertexShader = shaders[0];\n        const fragmentShader = shaders[1];\n\n        return buildProgram(gl, vertexShader, fragmentShader);\n      });\n}\n\n/**\n * Create, bind, and move the given raw data into a WebGL buffer.\n *\n * @param {WebGLRenderingContext} gl\n * @param {Array.<Number>} rawData A plain, flat array containing the data to bind to a buffer.\n * @param {number} [target=gl.ARRAY_BUFFER] An enum describing the type of this buffer; one of:\n *   - gl.ARRAY_BUFFER,\n *   - gl.ELEMENT_ARRAY_BUFFER.\n * @param {number} [usage=gl.STATIC_DRAW] An enum describing how this buffer is going to be used;\n * one of:\n *   - gl.STATIC_DRAW,\n *   - gl.DYNAMIC_DRAW,\n *   - gl.STREAM_DRAW.\n * @returns {WebGLBuffer}\n */\nfunction createBufferFromData(gl, rawData, target, usage) {\n  target = target || gl.ARRAY_BUFFER;\n  usage = usage || gl.STATIC_DRAW;\n  const typedArray = target === gl.ARRAY_BUFFER ? new Float32Array(rawData) : new Uint16Array(rawData);\n\n  const buffer = gl.createBuffer();\n  gl.bindBuffer(target, buffer);\n  gl.bufferData(target, typedArray, usage);\n\n  // Making the original data visible on the buffer object is helpful for debugging.\n  if (isInDevMode) {\n    buffer.rawData = typedArray;\n  }\n\n  return buffer;\n}\n\n/**\n * Adjusts the dimensions of the given element to match those of the viewport. Also, when the\n * viewport is resized, the given element will also be resized to match.\n *\n * @param {HTMLCanvasElement} canvas\n * @param {WebGLRenderingContext} gl\n * @param {Function} onGLResized\n * @param {?Number} [updateInterval=150]\n */\nfunction bindGLContextToViewportDimensions(canvas, gl, onGLResized, updateInterval = 150) {\n  _resizeGLContextToMatchViewportDimensions(canvas, gl);\n  const debouncedResize =\n      debounce(_ => {\n        _resizeGLContextToMatchViewportDimensions(canvas, gl);\n        onGLResized();\n      }, updateInterval);\n  window.addEventListener('resize', debouncedResize);\n}\n\n/**\n * Resizes the given element to match the dimensions of the viewport components.\n *\n * @param {HTMLCanvasElement} canvas\n * @param {WebGLRenderingContext} gl\n * @private\n */\nfunction _resizeGLContextToMatchViewportDimensions(canvas, gl) {\n  // Account for high-definition DPI displays.\n  const devicePixelToCssPixelRatio = window.devicePixelRatio || 1;\n  viewportWidth = Math.floor(canvas.clientWidth * devicePixelToCssPixelRatio);\n  viewportHeight = Math.floor(canvas.clientHeight * devicePixelToCssPixelRatio);\n  canvas.width = viewportWidth;\n  canvas.height = viewportHeight;\n  gl.viewport(0, 0, viewportWidth, viewportHeight);\n}\n\n/**\n * @returns {number}\n */\nfunction getViewportWidth() {\n  return viewportWidth;\n}\n\n/**\n * @returns {number}\n */\nfunction getViewportHeight() {\n  return viewportHeight;\n}\n\n/**\n * Binds a framebuffer to the GL context.\n *\n * @param {WebGLRenderingContext} gl\n * @param {WebGLFramebuffer} framebuffer\n */\nfunction bindFramebuffer(gl, framebuffer, width, height) {\n  // FIXME: Remove or add back in?\n  // width = width || getViewportWidth();\n  // height = height || getViewportHeight();\n\n  gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\n  // FIXME: Remove or add back in?\n  // gl.viewport(0, 0, width, height);\n}\n\n/**\n * Creates a framebuffer and attaches a texture to the framebuffer.\n *\n * This means that when we bind to the framebuffer, draw calls will render to the given texture.\n *\n * @param {WebGLRenderingContext} gl\n * @param {WebGLTexture} texture\n * @param {WebGLRenderBuffer} [renderBuffer]\n * @returns {WebGLFramebuffer}\n */\nfunction createFramebuffer(gl, texture, renderBuffer) {\n  const framebuffer = gl.createFramebuffer();\n\n  gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\n  gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n\n  if (renderBuffer) {\n    gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, renderBuffer);\n  }\n\n  return framebuffer;\n}\n\n/**\n * Creates a texture for rendering to.\n *\n * @param {WebGLRenderingContext} gl\n * @param {number} [width] Defaults to the viewport width stored in gl-util.\n * @param {number} [height] Defaults to the viewport height stored in gl-util.\n * @returns {WebGLTexture}\n */\nfunction createTextureForRendering(gl, width, height) {\n  width = width || getViewportWidth();\n  height = height || getViewportHeight();\n\n  // TODO: Double-check these params\n  const texture = gl.createTexture();\n  gl.bindTexture(gl.TEXTURE_2D, texture);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n  gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, width, height, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n\n  return texture;\n}\n\n/**\n * Creates a render buffer.\n *\n * @param {WebGLRenderingContext} gl\n * @param {number} [width] Defaults to the viewport width stored in gl-util.\n * @param {number} [height] Defaults to the viewport height stored in gl-util.\n * @returns {WebGLRenderBuffer}\n */\nfunction createRenderBuffer(gl, width, height) {\n  width = width || getViewportWidth();\n  height = height || getViewportHeight();\n\n  const renderBuffer = gl.createRenderbuffer();\n  gl.bindRenderbuffer(gl.RENDERBUFFER, renderBuffer);\n  gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, width, height);\n\n  return renderBuffer;\n}\n\nconst _SQUARE_COORDINATES_2D = [\n  0, 0,\n  1, 0,\n  0, 1,\n\n  1, 0,\n  1, 1,\n  0, 1,\n];\n\n/**\n * @param {WebGLRenderingContext} gl\n * @returns {AttributeConfig}\n */\nfunction create2DSquarePositionsConfig(gl) {\n  const positionsBuffer = createBufferFromData(gl, _SQUARE_COORDINATES_2D);\n  return {\n    buffer: positionsBuffer,\n    size: 2,\n    type: gl.FLOAT,\n    normalized: false,\n    stride: 0,\n    offset: 0\n  };\n}\n\n//\n// Geometrical calculations.\n//\n\n/**\n * Given an array of individual vertex positions and an array of vertex indices, creates an expanded\n * array of the positions grouped by the triangles they form.\n *\n * @param {Array.<Number>} individualVertexPositions\n * @param {Array.<Number>} vertexIndices\n * @returns {Array.<Number>}\n */\nfunction expandVertexIndicesToDuplicatePositions(individualVertexPositions, vertexIndices) {\n  const expandedVertexPositions = [];\n\n  for (let i = 0, j = 0, k = 0, count = vertexIndices.length; i < count; i++, k += 3) {\n    j = vertexIndices[i] * 3;\n\n    expandedVertexPositions[k] = individualVertexPositions[j];\n    expandedVertexPositions[k + 1] = individualVertexPositions[j + 1];\n    expandedVertexPositions[k + 2] = individualVertexPositions[j + 2];\n  }\n\n  return expandedVertexPositions;\n}\n\n/**\n * Computes normal vectors that are each orthogonal to the triangles they are a part of.\n *\n * The given vertices should represent individual triangles whose vertices are defined in clockwise\n * order (as seen when looking at the exterior side).\n *\n * @param {Array.<Number>} vertices\n * @returns {Array.<Number>}\n */\nfunction calculateOrthogonalVertexNormals(vertices) {\n  const vertex1 = vec3.create();\n  const vertex2 = vec3.create();\n  const vertex3 = vec3.create();\n  const vectorA = vec3.create();\n  const vectorB = vec3.create();\n  const normal1 = vec3.create();\n  const normal2 = vec3.create();\n  const normal3 = vec3.create();\n\n  const normals = [];\n\n  // Loop over each triangle in the flattened vertex array.\n  for (let i = 0, count = vertices.length; i < count; i += 9) {\n    // Get the vertices of the current triangle from the flattened array.\n    vec3.set(vertex1, vertices[i + 0], vertices[i + 1], vertices[i + 2]);\n    vec3.set(vertex2, vertices[i + 3], vertices[i + 4], vertices[i + 5]);\n    vec3.set(vertex3, vertices[i + 6], vertices[i + 7], vertices[i + 8]);\n\n    // Compute the normals.\n    vec3.subtract(vectorA, vertex3, vertex1);\n    vec3.subtract(vectorB, vertex2, vertex1);\n    vec3.cross(normal1, vectorA, vectorB);\n    vec3.normalize(normal1, normal1);\n\n    vec3.subtract(vectorA, vertex1, vertex2);\n    vec3.subtract(vectorB, vertex3, vertex2);\n    vec3.cross(normal2, vectorA, vectorB);\n    vec3.normalize(normal2, normal2);\n\n    vec3.subtract(vectorA, vertex2, vertex3);\n    vec3.subtract(vectorB, vertex1, vertex3);\n    vec3.cross(normal3, vectorA, vectorB);\n    vec3.normalize(normal3, normal3);\n\n    // Save the normal vectors in a flattened array.\n    normals[i + 0] = normal1[0];\n    normals[i + 1] = normal1[1];\n    normals[i + 2] = normal1[2];\n    normals[i + 3] = normal2[0];\n    normals[i + 4] = normal2[1];\n    normals[i + 5] = normal2[2];\n    normals[i + 6] = normal3[0];\n    normals[i + 7] = normal3[1];\n    normals[i + 8] = normal3[2];\n  }\n\n  return normals;\n}\n\nconst MAX_TEXTURE_V_COORDINATE_DELTA = 0.5;\n\n/**\n * Calculates lat-long texture coordinates for the given vertex positions.\n *\n * @param {Array.<Number>} vertexPositions\n * @returns {Array.<Number>}\n * @private\n */\nfunction calculateLatLongTextureCoordinates(vertexPositions) {\n  const currentVertexPosition = vec3.create();\n  const currentTextureCoordinates = vec2.create();\n  const textureCoordinates = [];\n\n  // Calculate the texture coordinates of each vertex.\n  for (let i = 0, j = 0, count = vertexPositions.length; i < count; i += 3, j += 2) {\n    vec3.set(currentVertexPosition,\n        vertexPositions[i], vertexPositions[i + 1], vertexPositions[i + 2]);\n    _getTextureCoordinatesOfLatLongPosition(currentTextureCoordinates, currentVertexPosition);\n    textureCoordinates[j] = currentTextureCoordinates[0];\n    textureCoordinates[j + 1] = currentTextureCoordinates[1];\n  }\n\n  _correctTextureForTrianglesAroundSeam(textureCoordinates);\n\n  return textureCoordinates;\n}\n\n/**\n * Calculates cylindrical texture coordinates for the given vertex positions.\n *\n * This assumes the cylinder is aligned with the z-axis and centered at the origin.\n *\n * @param {Array.<Number>} vertexPositions\n * @returns {Array.<Number>}\n * @private\n */\nfunction calculateCylindricalTextureCoordinates(vertexPositions) {\n  const currentVertexPosition = vec3.create();\n  const currentTextureCoordinates = vec2.create();\n  const textureCoordinates = [];\n\n  // Calculate the texture coordinates of each vertex.\n  for (let i = 0, j = 0, count = vertexPositions.length; i < count; i += 3, j += 2) {\n    vec3.set(currentVertexPosition,\n        vertexPositions[i], vertexPositions[i + 1], vertexPositions[i + 2]);\n    _getTextureCoordinatesOfCylindricalPosition(currentTextureCoordinates, currentVertexPosition);\n    textureCoordinates[j] = currentTextureCoordinates[0];\n    textureCoordinates[j + 1] = currentTextureCoordinates[1];\n  }\n\n  _correctTextureForTrianglesAroundSeam(textureCoordinates);\n\n  return textureCoordinates;\n}\n\n/**\n * @param {Array.<Number>} textureCoordinates\n */\nfunction _correctTextureForTrianglesAroundSeam(textureCoordinates) {\n  let v1;\n  let v2;\n  let v3;\n\n  // Determine which triangles span the seam across 0/2PI, and correct their textures.\n  for (let i = 0, count = textureCoordinates.length; i < count; i += 6) {\n    v1 = textureCoordinates[i];\n    v2 = textureCoordinates[i + 2];\n    v3 = textureCoordinates[i + 4];\n\n    if (v3 - v1 > MAX_TEXTURE_V_COORDINATE_DELTA || v2 - v1 > MAX_TEXTURE_V_COORDINATE_DELTA) {\n      textureCoordinates[i]++;\n    }\n    if (v3 - v2 > MAX_TEXTURE_V_COORDINATE_DELTA || v1 - v2 > MAX_TEXTURE_V_COORDINATE_DELTA) {\n      textureCoordinates[i + 2]++;\n    }\n    if (v2 - v3 > MAX_TEXTURE_V_COORDINATE_DELTA || v1 - v3 > MAX_TEXTURE_V_COORDINATE_DELTA) {\n      textureCoordinates[i + 4]++;\n    }\n  }\n}\n\n/**\n * Calculate the texture coordinates for a normalized point on a globe.\n *\n * @param {vec2} textureCoordinates Output parameter.\n * @param {vec3} vertexPosition Input parameter.\n * @private\n */\nfunction _getTextureCoordinatesOfLatLongPosition(textureCoordinates, vertexPosition) {\n  const x = vertexPosition[0];\n  const y = vertexPosition[1];\n  const z = vertexPosition[2];\n\n  let longitude;\n  if (y !== 0) {\n    longitude = Math.atan2(x, y);\n  } else if (x > 0) {\n    longitude = HALF_PI;\n  } else {\n    longitude = -HALF_PI;\n  }\n\n  const u = (longitude + Math.PI) / TWO_PI;\n\n  // TODO: Should I instead be calculating the v value from wrapping the texture around the globe\n  // curvature rather than simply projecting it directly?\n\n  // This assumes that the texture has been vertically distorted so that it can be directly\n  // projected onto the curvature of the globe.\n  const v = (z + 1) * 0.5;\n\n  textureCoordinates[0] = u;\n  textureCoordinates[1] = v;\n}\n\n/**\n * Calculate the texture coordinates for a normalized point on a cylinder.\n *\n * This assumes the cylinder is aligned with the z-axis and centered at the origin.\n *\n * @param {vec2} textureCoordinates Output parameter.\n * @param {vec3} vertexPosition Input parameter.\n * @private\n */\nfunction _getTextureCoordinatesOfCylindricalPosition(textureCoordinates, vertexPosition) {\n  const x = vertexPosition[0];\n  const y = vertexPosition[1];\n  const z = vertexPosition[2];\n\n  let longitude;\n  if (y !== 0) {\n    longitude = Math.atan2(x, y);\n  } else if (x > 0) {\n    longitude = HALF_PI;\n  } else {\n    longitude = -HALF_PI;\n  }\n\n  const u = (longitude + Math.PI) / TWO_PI;\n\n  const v = z > 0 ? 1 : 0;\n\n  textureCoordinates[0] = u;\n  textureCoordinates[1] = v;\n}\n\n/**\n * Expands the given vertices around the seam where longitude switches from 0 to 2PI.\n *\n * This is useful because, when applying a spherical texture using lat-long coordinates, any\n * triangle that spans the seam (from longitude 2PI to 0) would otherwise show the wrong result.\n *\n * @param {Array.<Number>} oldVertexPositions\n * @param {Array.<Number>} oldVertexIndices\n * @returns {{vertexPositions: Array.<Number>, vertexIndices: Array.<Number>}}\n */\nfunction expandVertexIndicesAroundLongitudeSeam(oldVertexPositions, oldVertexIndices) {\n  // const newVertexPositions = [];\n  // const newVertexIndices = [];\n  //\n  // ****\n  // // TODO: loop over triangles, use _getTextureCoordinatesOfLatLongPosition on each vertex,\n  // // check if two vertices in a triangle span the seam; to check the span, just check if both are\n  // // within a distance from the seam, but on opposite ends;\n  //\n  // return {\n  //   vertexPositions: newVertexPositions,\n  //   vertexIndices: newVertexIndices\n  // };\n\n  return {\n    vertexPositions: oldVertexPositions,\n    vertexIndices: oldVertexIndices\n  };\n}\n\n/**\n * Subdivides the triangles of a shape and projects all resulting vertices to a radius of one.\n *\n * @param {number} divisionFactor\n * @param {Array.<Number>} oldPositions\n * @param {Array.<Number>} [oldIndices]\n * @returns {{vertexPositions: Array.<Number>, vertexIndices: Array.<Number>}}\n */\nfunction tesselateSphere(divisionFactor, oldPositions, oldIndices) {\n  const newPositions = _expandAndTesselateTriangles(divisionFactor, oldPositions, oldIndices);\n\n  // Convert the expanded positions array into a unique positions array with a corresponding indices\n  // array.\n  const positionsAndIndices = dedupVertexArrayWithPositionsAndIndicesArrays(newPositions);\n\n  // Project the given positions to a distance of one.\n  _normalizePositions(positionsAndIndices.vertexPositions, positionsAndIndices.vertexPositions);\n\n  return positionsAndIndices;\n}\n\n/**\n * Subdivides triangles.\n *\n * This has the side-effect of flattening the given vertices into an expanded list that can contain\n * duplicate positions.\n *\n * @param {number} divisionFactor\n * @param {Array.<Number>} oldPositions\n * @param {Array.<Number>} [oldIndices]\n * @returns {Array.<Number>}\n * @private\n */\nfunction _expandAndTesselateTriangles(divisionFactor, oldPositions, oldIndices) {\n  const expandedOldPositions = oldIndices\n      ? expandVertexIndicesToDuplicatePositions(oldPositions, oldIndices)\n      : oldPositions;\n\n  const newPositions = [];\n  const a = vec3.create();\n  const b = vec3.create();\n  const c = vec3.create();\n  const aToB = vec3.create();\n  const aToC = vec3.create();\n  const bToC = vec3.create();\n  const rowDelta = vec3.create();\n  const columnDelta = vec3.create();\n  const backwardsDelta = vec3.create();\n  const rowStartPoint = vec3.create();\n  const rowColumnStartPoint = vec3.create();\n  const tempVec = vec3.create();\n\n  let oldIndex;\n  let count;\n  let newIndex;\n  let rowIndex;\n  let columnIndex;\n\n  //\n  // The basic tesselation algorithm:\n  // - Iterate across the original triangles that we are sub-dividing.\n  // - A, B, and C are the vertices of the current, original triangle.\n  // - Consider \"rows\" to iterate across the a-to-b direction and \"columns\" to iterate across the\n  //   a-to-c direction.\n  // - First calculate the distance between one row and one column.\n  // - Then loop over the rows and columns and create a the new triangle for each \"cell\".\n  //\n  //                   /\\\n  //                 B   \\--- A \"column\"\n  //                 o    \\\n  //                / \\   /\n  //               /   \\             rowDelta:      columnDelta:     backwardsDelta:\n  //              o-----o                 o             o\n  //             / \\   / \\               /               \\              o-----o\n  //            /   \\ /   \\             /                 \\\n  //           o-----o-----o           o                   o\n  //          / \\   / \\   / \\\n  //         /   \\ /   \\ /   \\\n  //        o-----o-----o-----o\n  //       / \\   / \\   / \\   / \\\n  //      /   \\ /   \\ /   \\ /   \\\n  //  A  o-----o-----o-----o-----o  C\n  //\n  //       \\_____\\\n  //           \\\n  //         A \"row\"\n  //\n\n  // Loop over the old triangles.\n  for (oldIndex = 0, newIndex = 0, count = expandedOldPositions.length;\n       oldIndex < count;\n       oldIndex += 9) {\n    // Pull out the three vertices of the current triangle.\n    vec3.set(a,\n        expandedOldPositions[oldIndex],\n        expandedOldPositions[oldIndex + 1],\n        expandedOldPositions[oldIndex + 2]);\n    vec3.set(b,\n        expandedOldPositions[oldIndex + 3],\n        expandedOldPositions[oldIndex + 4],\n        expandedOldPositions[oldIndex + 5]);\n    vec3.set(c,\n        expandedOldPositions[oldIndex + 6],\n        expandedOldPositions[oldIndex + 7],\n        expandedOldPositions[oldIndex + 8]);\n\n    vec3.subtract(aToB, b, a);\n    vec3.subtract(bToC, c, b);\n    vec3.subtract(aToC, c, a);\n\n    vec3.scale(rowDelta, aToB, 1 / divisionFactor);\n    vec3.scale(columnDelta, bToC, 1 / divisionFactor);\n    vec3.scale(backwardsDelta, aToC, 1 / divisionFactor);\n\n    // Loop over each new division (row) for the current triangle.\n    for (rowIndex = 0; rowIndex < divisionFactor; rowIndex++) {\n      vec3.scaleAndAdd(rowStartPoint, a, rowDelta, rowIndex);\n\n      // Create the first triangle in the row (address the fence-post problem).\n      newPositions[newIndex++] = rowStartPoint[0];\n      newPositions[newIndex++] = rowStartPoint[1];\n      newPositions[newIndex++] = rowStartPoint[2];\n      vec3.add(tempVec, rowStartPoint, rowDelta);\n      newPositions[newIndex++] = tempVec[0];\n      newPositions[newIndex++] = tempVec[1];\n      newPositions[newIndex++] = tempVec[2];\n      vec3.add(tempVec, rowStartPoint, backwardsDelta);\n      newPositions[newIndex++] = tempVec[0];\n      newPositions[newIndex++] = tempVec[1];\n      newPositions[newIndex++] = tempVec[2];\n\n      // Loop over the new triangles in the current division.\n      for (columnIndex = 1; columnIndex <= rowIndex; columnIndex++) {\n        vec3.scaleAndAdd(rowColumnStartPoint, rowStartPoint, columnDelta, columnIndex);\n\n        newPositions[newIndex++] = rowColumnStartPoint[0];\n        newPositions[newIndex++] = rowColumnStartPoint[1];\n        newPositions[newIndex++] = rowColumnStartPoint[2];\n        vec3.subtract(tempVec, rowColumnStartPoint, columnDelta);\n        newPositions[newIndex++] = tempVec[0];\n        newPositions[newIndex++] = tempVec[1];\n        newPositions[newIndex++] = tempVec[2];\n        vec3.add(tempVec, rowColumnStartPoint, rowDelta);\n        newPositions[newIndex++] = tempVec[0];\n        newPositions[newIndex++] = tempVec[1];\n        newPositions[newIndex++] = tempVec[2];\n\n        newPositions[newIndex++] = rowColumnStartPoint[0];\n        newPositions[newIndex++] = rowColumnStartPoint[1];\n        newPositions[newIndex++] = rowColumnStartPoint[2];\n        vec3.add(tempVec, rowColumnStartPoint, rowDelta);\n        newPositions[newIndex++] = tempVec[0];\n        newPositions[newIndex++] = tempVec[1];\n        newPositions[newIndex++] = tempVec[2];\n        vec3.add(tempVec, rowColumnStartPoint, backwardsDelta);\n        newPositions[newIndex++] = tempVec[0];\n        newPositions[newIndex++] = tempVec[1];\n        newPositions[newIndex++] = tempVec[2];\n      }\n    }\n  }\n\n  return newPositions;\n}\n\n/**\n * Projects the given positions to a distance of one.\n *\n * @param {Array.<Number>} out\n * @param {Array.<Number>} positions\n * @private\n */\nfunction _normalizePositions(out, positions) {\n  const tempVec = vec3.create();\n\n  for (let i = 0, count = positions.length; i < count; i += 3) {\n    vec3.set(tempVec, positions[i], positions[i + 1], positions[i + 2]);\n\n    vec3.normalize(tempVec, tempVec);\n\n    out[i] = tempVec[0];\n    out[i + 1] = tempVec[1];\n    out[i + 2] = tempVec[2];\n  }\n}\n\n/**\n * Given a collection of vertices that possibly contains duplicates, creates an array of the unique\n * vertex positions and an array of the indices of the original, duplicated vertices in the unique\n * array.\n *\n * This is useful for rendering using gl.drawElements (with gl.ELEMENT_ARRAY_BUFFER) instead of\n * gl.drawArrays.\n *\n * NOTE: Although this function does partially address floating-point round-off errors within the\n * given positions, it does not guarantee correctness.\n *\n * @param {Array.<Number>} oldVertexPositions\n * @returns {{vertexPositions: Array.<Number>, vertexIndices: Array.<Number>}}\n */\nfunction dedupVertexArrayWithPositionsAndIndicesArrays(oldVertexPositions) {\n  const vertexPositions = [];\n  const vertexIndices = [];\n\n  const vertexToIndexMap = new HashMap(_vertexHashFunction);\n  const vertex = vec3.create();\n  let oldCoordinateIndex;\n  let oldCoordinateCount;\n  let newVertexIndex;\n\n  // Loop over the original, duplicated vertex positions.\n  for (oldCoordinateIndex = 0, oldCoordinateCount = oldVertexPositions.length;\n       oldCoordinateIndex < oldCoordinateCount;\n       oldCoordinateIndex += 3) {\n    vec3.set(vertex,\n        oldVertexPositions[oldCoordinateIndex],\n        oldVertexPositions[oldCoordinateIndex + 1],\n        oldVertexPositions[oldCoordinateIndex + 2]);\n\n    // Has this position already been recorded?\n    if (!vertexToIndexMap.has(vertex)) {\n      // Record the index of the unique vertex position.\n      newVertexIndex = vertexPositions.length / 3;\n      vertexToIndexMap.set(vertex, newVertexIndex);\n\n      // Record the unique vertex position.\n      vertexPositions.push(vertex[0]);\n      vertexPositions.push(vertex[1]);\n      vertexPositions.push(vertex[2]);\n    }\n\n    newVertexIndex = vertexToIndexMap.get(vertex);\n\n    // Record the index of the unique position.\n    vertexIndices.push(newVertexIndex);\n  }\n\n  return {\n    vertexPositions: vertexPositions,\n    vertexIndices: vertexIndices\n  };\n}\n\nconst _VERTEX_COORDINATE_BUCKET_SIZE_DIGITS = 4;\n\n// This offset is important for preventing bucket-aligned numbers from being placed in inconsistent\n// buckets. For example, whole integer values could easily be placed in lower or higher buckets\n// depending on round-off error.\nconst _OFFSET = Math.random();\n\n/**\n * Calculates a hash code for the given vertex.\n *\n * NOTE: This does not guarantee correct results. Due to round-off error, \"equal\" coordinates could\n * be calculated is being in different buckets. Larger bucket sizes might reduce the rate of false\n * negatives, but with the trade-off of potentially introducing false positives.\n *\n * @param {vec3} vertex\n * @returns {string}\n * @private\n */\nfunction _vertexHashFunction(vertex) {\n  return `${(vertex[0] + _OFFSET).toFixed(_VERTEX_COORDINATE_BUCKET_SIZE_DIGITS)},` +\n      `${(vertex[1] + _OFFSET).toFixed(_VERTEX_COORDINATE_BUCKET_SIZE_DIGITS)},` +\n      `${(vertex[2] + _OFFSET).toFixed(_VERTEX_COORDINATE_BUCKET_SIZE_DIGITS)}`;\n}\n\n/**\n * Calculate the vertex positions for a section of a sphere.\n *\n * - These points will lie along latitude-longitude lines.\n * - The shape is centered around the origin with the poles aligned with the z-axis.\n * - The radius of the circle will be one.\n *\n * @param {number} startPitchIndex\n * @param {number} endPitchIndex\n * @param {number} deltaPitch\n * @param {number} startAzimuthIndex\n * @param {number} endAzimuthIndex\n * @param {number} deltaAzimuth\n * @return {Array.<Number>}\n * @private\n */\nfunction calculateSphericalSection(startPitchIndex, endPitchIndex, deltaPitch,\n                                   startAzimuthIndex, endAzimuthIndex, deltaAzimuth) {\n  const vertexPositions = [];\n  let vertexPositionsIndex = 0;\n\n  let pitchIndex;\n  let azimuthIndex;\n  let lowerPitch;\n  let upperPitch;\n  let lowerAzimuth;\n  let upperAzimuth;\n  let x1;\n  let y1;\n  let z1;\n  let x2;\n  let y2;\n  let z2;\n  let x3;\n  let y3;\n  let z3;\n  let x4;\n  let y4;\n  let z4;\n\n  // TODO: This implementation calculates all coordinates multiple times. Refactor it to be more\n  // efficient.\n\n  // Loop over each latitudinal strip.\n  for (pitchIndex = startPitchIndex; pitchIndex < endPitchIndex; pitchIndex++) {\n    lowerPitch = deltaPitch * pitchIndex;\n    upperPitch = deltaPitch + lowerPitch;\n\n    // Create the triangles for the strip at the current pitch.\n    for (azimuthIndex = startAzimuthIndex; azimuthIndex < endAzimuthIndex; azimuthIndex++) {\n      lowerAzimuth = deltaAzimuth * azimuthIndex;\n      upperAzimuth = deltaAzimuth + lowerAzimuth;\n\n      // The corners of the current square.\n\n      x1 = Math.sin(lowerPitch) * Math.cos(lowerAzimuth);\n      y1 = Math.sin(lowerPitch) * Math.sin(lowerAzimuth);\n      z1 = Math.cos(lowerPitch);\n\n      x2 = Math.sin(upperPitch) * Math.cos(lowerAzimuth);\n      y2 = Math.sin(upperPitch) * Math.sin(lowerAzimuth);\n      z2 = Math.cos(upperPitch);\n\n      x3 = Math.sin(lowerPitch) * Math.cos(upperAzimuth);\n      y3 = Math.sin(lowerPitch) * Math.sin(upperAzimuth);\n      z3 = Math.cos(lowerPitch);\n\n      x4 = Math.sin(upperPitch) * Math.cos(upperAzimuth);\n      y4 = Math.sin(upperPitch) * Math.sin(upperAzimuth);\n      z4 = Math.cos(upperPitch);\n\n      // The first triangle.\n\n      vertexPositions[vertexPositionsIndex] = x1;\n      vertexPositions[vertexPositionsIndex + 1] = y1;\n      vertexPositions[vertexPositionsIndex + 2] = z1;\n      vertexPositions[vertexPositionsIndex + 3] = x2;\n      vertexPositions[vertexPositionsIndex + 4] = y2;\n      vertexPositions[vertexPositionsIndex + 5] = z2;\n      vertexPositions[vertexPositionsIndex + 6] = x3;\n      vertexPositions[vertexPositionsIndex + 7] = y3;\n      vertexPositions[vertexPositionsIndex + 8] = z3;\n\n      // The second triangle.\n\n      vertexPositions[vertexPositionsIndex + 9] = x4;\n      vertexPositions[vertexPositionsIndex + 10] = y4;\n      vertexPositions[vertexPositionsIndex + 11] = z4;\n      vertexPositions[vertexPositionsIndex + 12] = x3;\n      vertexPositions[vertexPositionsIndex + 13] = y3;\n      vertexPositions[vertexPositionsIndex + 14] = z3;\n      vertexPositions[vertexPositionsIndex + 15] = x2;\n      vertexPositions[vertexPositionsIndex + 16] = y2;\n      vertexPositions[vertexPositionsIndex + 17] = z2;\n\n      vertexPositionsIndex += 18;\n    }\n  }\n\n  return vertexPositions;\n}\n\n/**\n * Calculate the vertex positions for a section of a cylinder.\n *\n * The shape is centered around the origin with the poles aligned with the z-axis.\n *\n * @param {number} cylinderBottom\n * @param {number} cylinderTop\n * @param {number} startIndex\n * @param {number} endIndex\n * @param {number} delta\n * @returns {Array.<Number>}\n * @private\n */\nfunction calculateCylindricalSection(cylinderBottom, cylinderTop, startIndex, endIndex, delta) {\n  const vertexPositions = [];\n  let vertexPositionsIndex = 0;\n\n  let index;\n  let lowerAzimuth;\n  let upperAzimuth;\n  let x1;\n  let y1;\n  let z1;\n  let x2;\n  let y2;\n  let z2;\n  let x3;\n  let y3;\n  let z3;\n  let x4;\n  let y4;\n  let z4;\n\n  // Create the triangles for the cylindrical strip.\n  for (index = startIndex; index < endIndex; index++) {\n    lowerAzimuth = delta * index;\n    upperAzimuth = delta + lowerAzimuth;\n\n    // The corners of the current square.\n\n    x1 = Math.cos(lowerAzimuth);\n    y1 = Math.sin(lowerAzimuth);\n    z1 = cylinderBottom;\n\n    x2 = Math.cos(lowerAzimuth);\n    y2 = Math.sin(lowerAzimuth);\n    z2 = cylinderTop;\n\n    x3 = Math.cos(upperAzimuth);\n    y3 = Math.sin(upperAzimuth);\n    z3 = cylinderBottom;\n\n    x4 = Math.cos(upperAzimuth);\n    y4 = Math.sin(upperAzimuth);\n    z4 = cylinderTop;\n\n    // The first triangle.\n\n    vertexPositions[vertexPositionsIndex] = x1;\n    vertexPositions[vertexPositionsIndex + 1] = y1;\n    vertexPositions[vertexPositionsIndex + 2] = z1;\n    vertexPositions[vertexPositionsIndex + 3] = x2;\n    vertexPositions[vertexPositionsIndex + 4] = y2;\n    vertexPositions[vertexPositionsIndex + 5] = z2;\n    vertexPositions[vertexPositionsIndex + 6] = x3;\n    vertexPositions[vertexPositionsIndex + 7] = y3;\n    vertexPositions[vertexPositionsIndex + 8] = z3;\n\n    // The second triangle.\n\n    vertexPositions[vertexPositionsIndex + 9] = x4;\n    vertexPositions[vertexPositionsIndex + 10] = y4;\n    vertexPositions[vertexPositionsIndex + 11] = z4;\n    vertexPositions[vertexPositionsIndex + 12] = x3;\n    vertexPositions[vertexPositionsIndex + 13] = y3;\n    vertexPositions[vertexPositionsIndex + 14] = z3;\n    vertexPositions[vertexPositionsIndex + 15] = x2;\n    vertexPositions[vertexPositionsIndex + 16] = y2;\n    vertexPositions[vertexPositionsIndex + 17] = z2;\n\n    vertexPositionsIndex += 18;\n  }\n\n  return vertexPositions;\n}\n\n/**\n * Scale and then translate the 3-dimensional positions in the given flattened array.\n *\n * The shape is centered around the origin with the poles aligned with the z-axis.\n *\n * @param {Array.<Number>} vertexPositions Output.\n * @param {number} startIndex\n * @param {number} endIndex\n * @param {vec3} scale\n * @param {vec3} translate\n * @private\n */\nfunction scaleThenTranslatePositions(vertexPositions, startIndex, endIndex, scale, translate) {\n  const scaleX = scale[0];\n  const scaleY = scale[1];\n  const scaleZ = scale[2];\n  const translateX = translate[0];\n  const translateY = translate[1];\n  const translateZ = translate[2];\n\n  for (let i = startIndex; i < endIndex; i += 3) {\n    vertexPositions[i] = vertexPositions[i] * scaleX + translateX;\n    vertexPositions[i + 1] = vertexPositions[i + 1] * scaleY + translateY;\n    vertexPositions[i + 2] = vertexPositions[i + 2] * scaleZ + translateZ;\n  }\n}\n\n// Export this module's logic\n\nexport {\n  getViewportWidth,\n  getViewportHeight,\n  getWebGLContext,\n  createBuffer,\n  getAttribLocation,\n  buildProgram,\n  buildShader,\n  loadShader,\n  loadProgram,\n  createBufferFromData,\n  bindGLContextToViewportDimensions,\n  bindFramebuffer,\n  createFramebuffer,\n  createTextureForRendering,\n  createRenderBuffer,\n  create2DSquarePositionsConfig,\n\n  expandVertexIndicesToDuplicatePositions,\n  calculateOrthogonalVertexNormals,\n  calculateLatLongTextureCoordinates,\n  calculateCylindricalTextureCoordinates,\n  expandVertexIndicesAroundLongitudeSeam,\n  tesselateSphere,\n  dedupVertexArrayWithPositionsAndIndicesArrays,\n  calculateSphericalSection,\n  calculateCylindricalSection,\n  scaleThenTranslatePositions,\n};\n\n// Some type defs to make my editor's auto-complete happy.\n\n/** @typedef {Object} WebGLProgram */\n/** @typedef {Object} WebGLShader */\n/** @typedef {Object} WebGLBuffer */\n/** @typedef {Object} WebGLTexture */\n/** @typedef {Float32Array|Array.<Number>} mat3 */\n/** @typedef {Float32Array|Array.<Number>} mat4 */\n/** @typedef {Float32Array|Array.<Number>} quat */\n/** @typedef {Float32Array|Array.<Number>} vec2 */\n/** @typedef {Float32Array|Array.<Number>} vec3 */\n/** @typedef {Float32Array|Array.<Number>} vec4 */\n","/**\n * A hash map that uses a custom hash function.\n */\nclass HashMap {\n  /**\n   * @param {Function} hashFunction\n   */\n  constructor(hashFunction) {\n    this._hashFunction = hashFunction;\n    this._map = new Map();\n  }\n\n  /**\n   * @param {Object} key\n   * @param {Object} value\n   */\n  set(key, value) {\n    const hashCode = this._hashFunction(key);\n    this._map.set(hashCode, value);\n  }\n\n  /**\n   * @param {Object} key\n   * @returns {Object}\n   */\n  get(key) {\n    const hashCode = this._hashFunction(key);\n    return this._map.get(hashCode);\n  }\n\n  /**\n   * @param {Object} key\n   * @returns {boolean}\n   */\n  has(key) {\n    const hashCode = this._hashFunction(key);\n    return this._map.has(hashCode);\n  }\n\n  /**\n   * @param {Object} item\n   * @returns {boolean}\n   */\n  remove(item) {\n    return this._map.delete(item);\n  }\n\n  /**\n   * @param {Function} callback\n   */\n  forEach(callback) {\n    this._map.forEach(callback);\n  }\n\n  clear() {\n    this._map.clear();\n  }\n\n  /**\n   * @returns {number}\n   */\n  get size() {\n    return this._map.size;\n  }\n}\n\nexport {HashMap};\n","/**\n * This module defines a collection of static general utility functions.\n */\n\n// TODO: This should be set from somewhere else (probably as a param to controller like before; but then I need to make this updatable)\nconst isInDevMode = true;\n\n/**\n * Adds an event listener for each of the given events to each of the given elements.\n *\n * @param {Array.<HTMLElement>} elements The elements to add event listeners to.\n * @param {Array.<String>} events The event listeners to add to the elements.\n * @param {Function} callback The single callback for handling the events.\n */\nfunction listenToMultipleForMultiple(elements, events, callback) {\n  elements.forEach(element => {\n    events.forEach(event => {\n      element.addEventListener(event, callback, false);\n    });\n  });\n}\n\n/**\n * Creates a DOM element with the given tag name, appends it to the given parent element, and\n * gives it the given id and classes.\n *\n * @param {string} tagName The tag name to give the new element.\n * @param {HTMLElement} [parent] The parent element to append the new element to.\n * @param {string} [id] The id to give the new element.\n * @param {Array.<String>} [classes] The classes to give the new element.\n * @returns {HTMLElement} The new element.\n */\nfunction createElement(tagName, parent, id, classes) {\n  const element = document.createElement(tagName);\n  if (parent) {\n    parent.appendChild(element);\n  }\n  if (id) {\n    element.id = id;\n  }\n  if (classes) {\n    classes.forEach(className => addClass(element, className));\n  }\n  return element;\n}\n\n/**\n * Determines whether the given element contains the given class.\n *\n * @param {HTMLElement} element The element to check.\n * @param {string} className The class to check for.\n * @returns {boolean} True if the element does contain the class.\n */\nfunction containsClass(element, className) {\n  let startIndex;\n  let indexAfterEnd;\n  startIndex = element.className.indexOf(className);\n  if (startIndex >= 0) {\n    if (startIndex === 0 || element.className[startIndex - 1] === ' ') {\n      indexAfterEnd = startIndex + className.length;\n      if (indexAfterEnd === element.className.length ||\n        element.className[indexAfterEnd] === ' ') {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n\n/**\n * Toggles whether the given element has the given class. If the enabled argument is given, then\n * the inclusion of the class will be forced. That is, if enabled=true, then this will ensure the\n * element has the class; if enabled=false, then this will ensure the element does NOT have the\n * class; if enabled=undefined, then this will simply toggle whether the element has the class.\n *\n * @param {HTMLElement} element The element to add the class to or remove the class from.\n * @param {string} className The class to add or remove.\n * @param {boolean} [enabled] If given, then the inclusion of the class will be forced.\n */\nfunction toggleClass(element, className, enabled) {\n  if (typeof enabled === 'undefined') {\n    if (containsClass(element, className)) {\n      removeClass(element, className);\n    }\n    else {\n      addClass(element, className);\n    }\n  }\n  else if (enabled) {\n    addClass(element, className);\n  }\n  else {\n    removeClass(element, className);\n  }\n}\n\n/**\n * Gets the coordinates of the element relative to the top-left corner of the page.\n *\n * @param {HTMLElement} element The element to get the coordinates of.\n * @returns {{x: Number, y: Number}} The coordinates of the element relative to the top-left\n * corner of the page.\n */\nfunction getPageOffset(element) {\n  let x = 0;\n  let y = 0;\n  while (element) {\n    x += element.offsetLeft;\n    y += element.offsetTop;\n    element = element.offsetParent;\n  }\n  x -= document.documentElement.scrollLeft;\n  y -= document.documentElement.scrollTop;\n  return { x: x, y: y };\n}\n\n/**\n * Gets the dimensions of the viewport.\n *\n * @returns {{w: Number, h: Number}} The dimensions of the viewport.\n */\nfunction getViewportSize() {\n  let w;\n  let h;\n  if (typeof window.innerWidth !== 'undefined') {\n    // Good browsers\n    w = window.innerWidth;\n    h = window.innerHeight;\n  }\n  else if (typeof document.documentElement !== 'undefined' &&\n    typeof document.documentElement.clientWidth !== 'undefined' &&\n    document.documentElement.clientWidth !== 0) {\n    // IE6 in standards compliant mode\n    w = document.documentElement.clientWidth;\n    h = document.documentElement.clientHeight;\n  }\n  else {\n    // Older versions of IE\n    w = document.getElementsByTagName('body')[0].clientWidth;\n    h = document.getElementsByTagName('body')[0].clientHeight;\n  }\n  return { w: w, h: h };\n}\n\n/**\n * Removes the given child element from the given parent element if the child does indeed belong\n * to the parent.\n *\n * @param {HTMLElement} parent The parent to remove the child from.\n * @param {HTMLElement} child The child to remove.\n * @returns {boolean} True if the child did indeed belong to the parent.\n */\nfunction removeChildIfPresent(parent, child) {\n  if (child && child.parentNode === parent) {\n    parent.removeChild(child);\n    return true;\n  }\n  return false;\n}\n\n/**\n * Adds the given class to the given element.\n *\n * @param {HTMLElement} element The element to add the class to.\n * @param {string} className The class to add.\n */\nfunction addClass(element, className) {\n  element.setAttribute('class', element.className + ' ' + className);\n}\n\n/**\n * Removes the given class from the given element.\n *\n * @param {HTMLElement} element The element to remove the class from.\n * @param {string} className The class to remove.\n */\nfunction removeClass(element, className) {\n  element.setAttribute('class',\n    element.className\n    .split(' ')\n    .filter(value => value !== className)\n    .join(' '));\n}\n\n/**\n * Removes all classes from the given element.\n *\n * @param {HTMLElement} element The element to remove all classes from.\n */\nfunction clearClasses(element) {\n  element.className = '';\n}\n\n/**\n * Calculates the width that the DOM would give to a div with the given text. The given tag\n * name, parent, id, and classes allow the width to be affected by various CSS rules.\n *\n * @param {string} text The text to determine the width of.\n * @param {string} tagName The tag name this text would supposedly have.\n * @param {HTMLElement} [parent] The parent this text would supposedly be a child of; defaults\n * to the document body.\n * @param {string} [id] The id this text would supposedly have.\n * @param {Array.<String>} [classes] The classes this text would supposedly have.\n * @returns {number} The width of the text under these conditions.\n */\nfunction getTextWidth(text, tagName, parent, id, classes) {\n  let tmpElement;\n  let width;\n  parent = parent || document.getElementsByTagName('body')[0];\n  tmpElement = createElement(tagName, null, id, classes);\n  tmpElement.style.position = 'absolute';\n  tmpElement.style.visibility = 'hidden';\n  tmpElement.style.whiteSpace = 'nowrap';\n  parent.appendChild(tmpElement);\n  tmpElement.innerHTML = text;\n  width = tmpElement.clientWidth;\n  parent.removeChild(tmpElement);\n  return width;\n}\n\n/**\n * Encodes and concatenates the given URL parameters into a single query string.\n *\n * @param {Object} rawParams An object whose properties represent the URL query string\n * parameters.\n * @returns {string} The query string.\n */\nfunction encodeQueryString(rawParams) {\n  let parameter;\n  let encodedParams;\n  encodedParams = [];\n  for (parameter in rawParams) {\n    if (rawParams.hasOwnProperty(parameter)) {\n      encodedParams.push(encodeURIComponent(parameter) + '=' +\n        encodeURIComponent(rawParams[parameter]));\n    }\n  }\n  return '?' + encodedParams.join('&');\n}\n\n/**\n * Retrieves the value corresponding to the given name from the given query string.\n *\n * (borrowed from http://stackoverflow.com/questions/901115/how-can-i-get-query-string-values-in-javascript)\n *\n * @param {string} queryString The query string containing the parameter.\n * @param {string} name The (non-encoded) name of the parameter value to retrieve.\n * @returns {string} The query string parameter value, or null if the parameter was not found.\n */\nfunction getQueryStringParameterValue(queryString, name) {\n  let regex;\n  let results;\n  name = encodeURIComponent(name);\n  name = name.replace(/[\\[]/, '\\\\[').replace(/[\\]]/, '\\\\]');\n  regex = new RegExp('[\\\\?&]' + name + '=([^&#]*)', 'i');\n  results = regex.exec(queryString);\n  return results === null ? null : decodeURIComponent(results[1].replace(/\\+/g, ' '));\n}\n\n/**\n * Sets the CSS transition style of the given element.\n *\n * @param {HTMLElement} element The element.\n * @param {number} value The transition string.\n */\nfunction setTransition(element, value) {\n  element.style.transition = value;\n  element.style.WebkitTransition = value;\n  element.style.MozTransition = value;\n  element.style.msTransition = value;\n  element.style.OTransition = value;\n}\n\n/**\n * Sets the CSS transition duration style of the given element.\n *\n * @param {HTMLElement} element The element.\n * @param {number} value The duration.\n */\nfunction setTransitionDurationSeconds(element, value) {\n  element.style.transitionDuration = value + 's';\n  element.style.WebkitTransitionDuration = value + 's';\n  element.style.MozTransitionDuration = value + 's';\n  element.style.msTransitionDuration = value + 's';\n  element.style.OTransitionDuration = value + 's';\n}\n\n/**\n * Sets the CSS transition delay style of the given element.\n *\n * @param {HTMLElement} element The element.\n * @param {number} value The delay.\n */\nfunction setTransitionDelaySeconds(element, value) {\n  element.style.transitionDelay = value + 's';\n  element.style.WebkitTransitionDelay = value + 's';\n  element.style.MozTransitionDelay = value + 's';\n  element.style.msTransitionDelay = value + 's';\n  element.style.OTransitionDelay = value + 's';\n}\n\n/**\n * Sets the userSelect style of the given element to 'none'.\n *\n * @param {HTMLElement} element\n */\nfunction setUserSelectNone(element) {\n  element.style.userSelect = 'none';\n  element.style.webkitUserSelect = 'none';\n  element.style.MozUserSelect = 'none';\n  element.style.msUserSelect = 'none';\n}\n\n/**\n * Removes any children elements from the given parent that have the given class.\n *\n * @param {HTMLElement} parent The parent to remove children from.\n * @param {string} className The class to match.\n */\nfunction removeChildrenWithClass(parent, className) {\n  let matchingChildren = parent.querySelectorAll('.' + className);\n\n  for (let i = 0, count = matchingChildren.length; i < count; i++) {\n    parent.removeChild(matchingChildren[i]);\n  }\n}\n\n/**\n * Sets the CSS transition-timing-function style of the given element with the given cubic-\n * bezier points.\n *\n * @param {HTMLElement} element The element.\n * @param {{p1x: Number, p1y: Number, p2x: Number, p2y: Number}} bezierPts The cubic-bezier\n * points to use for this timing function.\n */\nfunction setTransitionCubicBezierTimingFunction(element, bezierPts) {\n  const value = 'cubic-bezier(' + bezierPts.p1x + ',' + bezierPts.p1y + ',' + bezierPts.p2x + ',' +\n    bezierPts.p2y + ')';\n  element.style.transitionTimingFunction = value;\n  element.style.WebkitTransitionTimingFunction = value;\n  element.style.MozTransitionTimingFunction = value;\n  element.style.msTransitionTimingFunction = value;\n  element.style.OTransitionTimingFunction = value;\n}\n\n// A collection of different types of easing functions.\nconst easingFunctions = {\n  linear: t => t,\n  easeInQuad: t => t * t,\n  easeOutQuad: t => t * (2 - t),\n  easeInOutQuad: t => t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t,\n  easeInCubic: t => t * t * t,\n  easeOutCubic: t => 1 + --t * t * t,\n  easeInOutCubic: t => t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1,\n  easeInQuart: t => t * t * t * t,\n  easeOutQuart: t => 1 - --t * t * t * t,\n  easeInOutQuart: t => t < 0.5 ? 8 * t * t * t * t : 1 - 8 * --t * t * t * t,\n  easeInQuint: t => t * t * t * t * t,\n  easeOutQuint: t => 1 + --t * t * t * t * t,\n  easeInOutQuint: t => t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * --t * t * t * t * t\n};\n\n// A collection of the inverses of different types of easing functions.\nconst inverseEasingFunctions = {\n  linear: t => t,\n  easeInQuad: t => Math.sqrt(t),\n  easeOutQuad: t => 1 - Math.sqrt(1 - t),\n  easeInOutQuad: t => t < 0.5 ? Math.sqrt(t * 0.5) : 1 - 0.70710678 * Math.sqrt(1 - t)\n};\n\n/**\n * Calculates the x and y coordinates represented by the given Bezier curve at the given\n * percentage.\n *\n * @param {number} percent Expressed as a number between 0 and 1.\n * @param {Array.<{x:Number,y:Number}>} controlPoints\n * @returns {{x:Number,y:Number}}\n */\nfunction getXYFromPercentWithBezier(percent, controlPoints) {\n  let x;\n  let y;\n  let oneMinusPercent;\n  let tmp1;\n  let tmp2;\n  let tmp3;\n  let tmp4;\n\n  oneMinusPercent = 1 - percent;\n  tmp1 = oneMinusPercent * oneMinusPercent * oneMinusPercent;\n  tmp2 = 3 * percent * oneMinusPercent * oneMinusPercent;\n  tmp3 = 3 * percent * percent * oneMinusPercent;\n  tmp4 = percent * percent * percent;\n\n  x = controlPoints[0].x * tmp1 +\n    controlPoints[1].x * tmp2 +\n    controlPoints[2].x * tmp3 +\n    controlPoints[3].x * tmp4;\n  y = controlPoints[0].y * tmp1 +\n    controlPoints[1].y * tmp2 +\n    controlPoints[2].y * tmp3 +\n    controlPoints[3].y * tmp4;\n\n  return { x: x, y: y };\n}\n\n/**\n * Applies the given transform to the given element as a CSS style in a cross-browser compatible\n * manner.\n *\n * @param {HTMLElement} element\n * @param {string} transform\n */\nfunction setTransform(element, transform) {\n  element.style.webkitTransform = transform;\n  element.style.MozTransform = transform;\n  element.style.msTransform = transform;\n  element.style.OTransform = transform;\n  element.style.transform = transform;\n}\n\n/**\n * Returns a copy of the given array with its contents re-arranged in a random order.\n *\n * The original array is left in its original order.\n *\n * @param {Array} array\n * @returns {Array}\n */\nfunction shuffle(array) {\n  let i;\n  let j;\n  let count;\n  let temp;\n\n  for (i = 0, count = array.length; i < count; i++) {\n    j = parseInt(Math.random() * count);\n    temp = array[j];\n    array[j] = array[i];\n    array[i] = temp;\n  }\n\n  return array;\n}\n\n/**\n * Performs a shallow copy of the given object.\n *\n * This only copies enumerable properties.\n *\n * @param {Object} object\n * @returns {Object}\n */\nfunction shallowCopy(object) {\n  if (typeof object === 'object') {\n    const cloneObject = {};\n\n    Object.keys(object)\n      .forEach(key => cloneObject[key] = object[key]);\n\n    return cloneObject;\n  }\n  else {\n    return object;\n  }\n}\n\n/**\n * Performs a deep copy of the given object.\n *\n * This only copies enumerable properties.\n *\n * @param {Object} object\n * @returns {Object}\n */\nfunction deepCopy(object) {\n  if (typeof object === 'object') {\n    // Hack: Not a robust copy policy\n    let cloneObject;\n    if (object instanceof Array) {\n      cloneObject = [];\n    }\n    else {\n      cloneObject = {};\n    }\n\n    Object.keys(object)\n      .forEach(key => cloneObject[key] = deepCopy(object[key]));\n\n    return cloneObject;\n  }\n  else {\n    return object;\n  }\n}\n\n/**\n * Converts the given HSL color values to HSV color values.\n *\n * Given and returned values will be in the range of [0, 1].\n *\n * @param {HslColor} hsl\n * @returns {{h:Number,s:Number,v:Number}}\n */\nfunction hslToHsv(hsl) {\n  const temp = hsl.s * (hsl.l < 0.5 ? hsl.l : 1 - hsl.l);\n  return {\n    h: hsl.h,\n    s: 2 * temp / (hsl.l + temp),\n    v: hsl.l + temp\n  };\n}\n\n/**\n * Converts the given HSV color values to HSL color values.\n *\n * Given and returned values will be in the range of [0, 1].\n *\n * @param {{h:Number,s:Number,v:Number}} hsv\n * @returns {HslColor}\n */\nfunction hsvToHsl(hsv) {\n  const temp = (2 - hsv.s) * hsv.v;\n  return {\n    h: hsv.h,\n    s: hsv.s * hsv.v / (temp < 1 ? temp : 2.00000001 - temp),\n    l: temp * 0.5\n  };\n}\n\n/**\n * Converts the given HSL color values to RGB color values.\n *\n * Given and returned values will be in the range of [0, 1].\n *\n * Originally adapted from http://en.wikipedia.org/wiki/HSL_color_space.\n *\n * @param {HslColor} hsl\n * @returns {RgbColor} rgb\n */\nfunction hslToRgb(hsl) {\n  let r;\n  let g;\n  let b;\n\n  if (hsl.s === 0) {\n    // Achromatic.\n    r = hsl.l;\n    g = hsl.l;\n    b = hsl.l;\n  }\n  else {\n    const q = hsl.l < 0.5 ?\n      hsl.l * (1 + hsl.s) :\n      hsl.l + hsl.s - hsl.l * hsl.s;\n    const p = 2 * hsl.l - q;\n\n    r = _hue2Rgb(p, q, hsl.h + 1 / 3);\n    g = _hue2Rgb(p, q, hsl.h);\n    b = _hue2Rgb(p, q, hsl.h - 1 / 3);\n  }\n\n  return {\n    r: r,\n    g: g,\n    b: b\n  };\n}\n\nfunction _hue2Rgb(p, q, t) {\n  if (t < 0) {\n    t++;\n  }\n  else if (t > 1) {\n    t--;\n  }\n\n  if (t < 1 / 6) {\n    return p + (q - p) * 6 * t;\n  }\n  else if (t < 1 / 2) {\n    return q;\n  }\n  else if (t < 2 / 3) {\n    return p + (q - p) * (2 / 3 - t) * 6;\n  }\n  else {\n    return p;\n  }\n}\n\n/**\n * Converts the given RGB color values to HSL color values.\n *\n * Given and returned values will be in the range of [0, 1].\n *\n * Originally adapted from http://en.wikipedia.org/wiki/HSL_color_space.\n *\n * @param {{r:Number,g:Number,b:Number}} rgb\n * @returns {HslColor} hsl\n */\nfunction rgbToHsl(rgb) {\n  const max = Math.max(rgb.r, rgb.g, rgb.b);\n  const min = Math.min(rgb.r, rgb.g, rgb.b);\n  let h;\n  let s;\n  const l = (max + min) / 2;\n\n  if (max === min) {\n    // Achromatic.\n    h = 0;\n    s = 0;\n  }\n  else {\n    const d = max - min;\n    s = l > 0.5 ?\n      d / (2 - max - min) :\n      d / (max + min);\n\n    switch (max) {\n      case rgb.r:\n        h = (rgb.g - rgb.b) / d + (rgb.g < rgb.b ? 6 : 0);\n        break;\n      case rgb.g:\n        h = (rgb.b - rgb.r) / d + 2;\n        break;\n      case rgb.b:\n        h = (rgb.r - rgb.g) / d + 4;\n        break;\n    }\n\n    h /= 6;\n  }\n\n  return {\n    h: h,\n    s: s,\n    l: l\n  };\n}\n\n/**\n * Creates a valid color string to assign to a CSS property from the given h/s/l color values.\n *\n * Given values should be in the range of [0,1].\n *\n * @param {HslColor} hsl\n * @returns {string}\n */\nfunction createHslColorString(hsl) {\n  return typeof hsl.a !== 'undefined' ?\n    `hsla(${hsl.h * 360},${hsl.s * 100}%,${hsl.l * 100}%,${hsl.a})` :\n    `hsl(${hsl.h * 360},${hsl.s * 100}%,${hsl.l * 100}%)`;\n}\n\n/**\n * Checks the given element and all of its ancestors, and returns the first that contains the\n * given class.\n *\n * @param {?HTMLElement} element\n * @param {string} className\n * @returns {?HTMLElement}\n */\nfunction findClassInSelfOrAncestors(element, className) {\n  while (element) {\n    if (containsClass(element, className)) {\n      return element;\n    }\n  }\n\n  return null;\n}\n\nlet utilStyleSheet;\n\n/**\n * Adds the given style rule to a style sheet for the current document.\n *\n * @param {string} styleRule\n */\nfunction addRuleToStyleSheet(styleRule) {\n  // Create the custom style sheet if it doesn't already exist\n  if (!utilStyleSheet) {\n    utilStyleSheet = document.createElement('style');\n    document.getElementsByTagName('head')[0].appendChild(utilStyleSheet);\n  }\n\n  // Add the given rule to the custom style sheet\n  if (utilStyleSheet.styleSheet) {\n    utilStyleSheet.styleSheet.cssText = styleRule;\n  }\n  else {\n    utilStyleSheet.appendChild(document.createTextNode(styleRule));\n  }\n}\n\nfunction checkForSafari() {\n  return /Safari/i.test(window.navigator.userAgent) && !/Chrome/i.test(window.navigator.userAgent);\n}\n\nfunction checkForIos() {\n  return /iPhone|iPod|iPad/i.test(window.navigator.userAgent);\n}\n\n/**\n * Returns a debounced version of the given function.\n *\n * Even if the debounced function is invoked many times, the wrapped function will only be invoked\n * after the given delay has ellapsed since the last invocation.\n *\n * If isInvokedImmediately is true, then the wrapped function will be triggered at the start of the\n * invocation group rather than at the end.\n *\n * @param {Function} wrappedFunction\n * @param {number} delay In milliseconds.\n * @param {boolean} [isInvokedImmediately=false]\n * @returns {Function}\n */\nfunction debounce(wrappedFunction, delay, isInvokedImmediately = false) {\n  let timeoutId;\n\n  return () => {\n    // Save the context and arguments passed from the client (this will use the values from the\n    // first invocation of the invocation group.\n    const context = this;\n    const args = arguments;\n\n    // Invoke immediately only if this is the first invocation of a group.\n    if (isInvokedImmediately && !timeoutId) {\n      wrappedFunction.apply(context, args);\n    }\n\n    // Reset the delay.\n    clearTimeout(timeoutId);\n    timeoutId = setTimeout(() => {\n      // The invocation group has ended.\n      timeoutId = null;\n      if (!isInvokedImmediately) {\n        wrappedFunction.apply(context, args);\n      }\n    }, delay);\n  };\n}\n\n/**\n * Returns a throttled version of the given function.\n *\n * Even if the throttled function is invoked many times, the wrapped function will only be invoked\n * at each interval of the given delay. After the throttled function stops being invoked, then\n * wrapped function will also stop being invoked.\n *\n * If isInvokedImmediately is true, then the wrapped function will be triggered at the start of the\n * invocation delay rather than at the end.\n *\n * @param {Function} wrappedFunction\n * @param {number} delay In milliseconds.\n * @param {boolean} [isInvokedImmediately=false]\n * @returns {Function}\n */\nfunction throttle(wrappedFunction, delay, isInvokedImmediately = false) {\n  let timeoutId;\n\n  return () => {\n    // Save the context and arguments passed from the client (this will use the values from the\n    // first invocation of the invocation group.\n    const context = this;\n    const args = arguments;\n\n    // Only trigger a new invocation group if we are not already/still waiting on the delay from a\n    // previous invocation.\n    if (!timeoutId) {\n      if (isInvokedImmediately) {\n        wrappedFunction.apply(context, args);\n      }\n\n      // Start the delay.\n      timeoutId = setTimeout(() => {\n        // The invocation group has ended.\n        timeoutId = null;\n        if (!isInvokedImmediately) {\n          wrappedFunction.apply(context, args);\n        }\n      }, delay);\n    }\n  };\n}\n\n/**\n * @param {Array.<*>|String} array\n * @param {*} delimiter\n * @returns {Array.<*>}\n * @private\n */\nfunction _interleave(array, delimiter) {\n  const result = new Array(array.length * 2 - 1);\n  if (array.length) {\n    result.push(array[0]);\n  }\n  for (let i = 1, count = array.length; i < count; i++) {\n    result.push(delimiter);\n    result.push(array[i]);\n  }\n  return result;\n}\n\n/**\n * Loads the given src for the given image.\n *\n * @param {HTMLImageElement} image\n * @param {string} src\n * @returns {Promise.<HTMLImageElement, Error>}\n */\nfunction loadImageSrc(image, src) {\n  return new Promise((resolve, reject) => {\n    console.debug(`Loading image: ${src}`);\n\n    image.addEventListener('load', _ => resolve(image));\n    image.addEventListener('error', reject);\n    image.addEventListener('abort', reject);\n\n    image.src = src;\n  });\n}\n\n/**\n * Loads text from the given URL.\n *\n * @param {string} url\n * @returns {Promise.<String, Error>}\n */\nfunction loadText(url) {\n  return new Promise((resolve, reject) => {\n    const xhr = new XMLHttpRequest();\n\n    xhr.addEventListener('load', _ => resolve(xhr.response));\n    xhr.addEventListener('error', reject);\n    xhr.addEventListener('abort', reject);\n\n    console.debug(`Loading text: ${url}`);\n\n    xhr.open('GET', url);\n    xhr.send();\n  });\n}\n\n/**\n * Loads a JSON object from the given URL.\n *\n * @param {string} url\n * @returns {Promise.<Object, Error>}\n */\nfunction loadJson(url) {\n  return loadText(url).then(jsonText => JSON.parse(jsonText));\n}\n\n/**\n * Gets the current stack trace.\n *\n * @returns {string}\n */\nfunction getStackTrace() {\n  return new Error().stack;\n}\n\n/**\n * Freezes the given object and recursively freezes all of its properties.\n *\n * @param {Object} object\n */\nfunction deepFreeze(object) {\n  if (typeof object === 'object') {\n    Object.freeze(object);\n    Object.keys(object).forEach(key => deepFreeze(object[key]));\n  }\n}\n\n/**\n * Creates a GUID.\n *\n * GUID specification: http://www.ietf.org/rfc/rfc4122.txt\n *\n * Logic adopted from http://stackoverflow.com/a/2117523/489568.\n *\n * @returns {string}\n */\nfunction createGuid() {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, c => {\n    const r = Math.random() * 16 | 0;\n    const v = c === 'x' ? r : (r & 0x3 | 0x8);\n    return v.toString(16);\n  });\n}\n\n/**\n * -11 % 3 === -2\n * mod(-11, 3) === 1\n *\n * @param {number} n\n * @param {number} m\n * @returns {number}\n */\nfunction mod(n, m) {\n  return ((n % m) + m) % m;\n}\n\n/**\n * @param {number} min\n * @param {number} max\n * @returns {number}\n */\nfunction randomFloatInRange(min, max) {\n  return Math.random() * (max - min) + min;\n}\n\n/**\n * @param {number} min Inclusive\n * @param {number} max Exclusive\n * @returns {number}\n */\nfunction randomIntInRange(min, max) {\n  return parseInt(Math.random() * (max - min) + min);\n}\n\n/**\n * @param {Array} list\n * @returns {*}\n */\nfunction pickRandom(list) {\n  return list[randomIntInRange(0, list.length)];\n}\n\n/**\n * Triggers the given callback when either the current tab or the browser window loses/gains focus.\n *\n * @param {Function} focusChangeHandler\n */\nfunction handlePageFocusChange(focusChangeHandler) {\n  // Pause/unpause the app when the tab loses/gains focus.\n  document.addEventListener('visibilitychange', () => focusChangeHandler(!document.hidden));\n  // Pause/unpause the app when the browser window loses/gains focus.\n  window.addEventListener('blur', () => focusChangeHandler(false));\n  window.addEventListener('focus', () => focusChangeHandler(true));\n}\n\n/**\n * Creates an array with all the consecutive numbers from start (inclusive) to end (exclusive).\n *\n * @param {number} start\n * @param {number} end\n * @returns {Array.<Number>}\n */\nfunction range(start, end) {\n  const r = [];\n  for (let i = 0, j = start; j < end; i++, j++) {\n    r[i] = j;\n  }\n  return r;\n}\n\n/**\n * @param {*} value\n * @returns {boolean}\n */\nfunction isInt(value) {\n  return typeof value === 'number' &&\n    isFinite(value) &&\n    parseInt(value) === value;\n}\n\n/**\n * Find the first value in a list that satisfies a predicate.\n *\n * @param {Array} list\n * @param {Function} predicate\n * @returns {*}\n */\nfunction find(list, predicate) {\n  for (var i = 0, count = list.length; i < count; i++) {\n    const value = list[i];\n    if (predicate.call(null, value, i, list)) {\n      return value;\n    }\n  }\n  return null;\n}\n\nconst keyCodes = {\n  'a': 65,\n  'b': 66,\n  'c': 67,\n  'd': 68,\n  'e': 69,\n  'f': 70,\n  'g': 71,\n  'h': 72,\n  'i': 73,\n  'j': 74,\n  'k': 75,\n  'l': 76,\n  'm': 77,\n  'n': 78,\n  'o': 79,\n  'p': 80,\n  'q': 81,\n  'r': 82,\n  's': 83,\n  't': 84,\n  'u': 85,\n  'v': 86,\n  'w': 87,\n  'x': 88,\n  'y': 89,\n  'z': 90,\n  '0': 48,\n  '1': 49,\n  '2': 50,\n  '3': 51,\n  '4': 52,\n  '5': 53,\n  '6': 54,\n  '7': 55,\n  '8': 56,\n  '9': 57,\n  'SPACE': 32,\n  'ENTER': 13,\n  'ESCAPE': 27,\n  'LEFT': 37,\n  'UP': 38,\n  'RIGHT': 39,\n  'DOWN': 40\n};\n\nconst svgNamespace = 'http://www.w3.org/2000/svg';\nconst xlinkNamespace = 'http://www.w3.org/1999/xlink';\n\nexport {\n  isInDevMode,\n  listenToMultipleForMultiple,\n  createElement,\n  containsClass,\n  toggleClass,\n  getPageOffset,\n  getViewportSize,\n  removeChildIfPresent,\n  addClass,\n  removeClass,\n  clearClasses,\n  getTextWidth,\n  encodeQueryString,\n  getQueryStringParameterValue,\n  setTransition,\n  setTransitionDurationSeconds,\n  setTransitionDelaySeconds,\n  setUserSelectNone,\n  removeChildrenWithClass,\n  setTransitionCubicBezierTimingFunction,\n  easingFunctions,\n  inverseEasingFunctions,\n  getXYFromPercentWithBezier,\n  setTransform,\n  shuffle,\n  shallowCopy,\n  deepCopy,\n  hsvToHsl,\n  hslToHsv,\n  hslToRgb,\n  rgbToHsl,\n  createHslColorString,\n  findClassInSelfOrAncestors,\n  addRuleToStyleSheet,\n  checkForSafari,\n  checkForIos,\n  debounce,\n  throttle,\n  loadImageSrc,\n  loadText,\n  loadJson,\n  getStackTrace,\n  deepFreeze,\n  createGuid,\n  mod,\n  randomFloatInRange,\n  randomIntInRange,\n  pickRandom,\n  handlePageFocusChange,\n  range,\n  isInt,\n  find,\n  keyCodes,\n  svgNamespace,\n  xlinkNamespace,\n};\n\n/**\n * @typedef {Object} HslColor\n * @property {Number} h In the range of [0, 1].\n * @property {Number} s In the range of [0, 1].\n * @property {Number} l In the range of [0, 1].\n * @property {Number} [a] In the range of [0, 1].\n */\n\n/**\n * @typedef {Object} RgbColor\n * @property {Number} r In the range of [0, 1].\n * @property {Number} g In the range of [0, 1].\n * @property {Number} b In the range of [0, 1].\n * @property {Number} [a] In the range of [0, 1].\n */\n","/**\n * An AnimationJob is used with the animator controller to update and re-draw something each frame.\n *\n * @abstract\n */\nclass AnimationJob {\n  /**\n   * @param {Function} [onComplete] A callback to be called when this AnimationJob is finished.\n   */\n  constructor(onComplete) {\n    // AnimationJob is an abstract class. It should not be instantiated directly.\n    if (new.target === AnimationJob) {\n      throw new TypeError('Cannot construct AnimationJob instances directly');\n    }\n\n    this._startTime = 0;\n    this._isComplete = true;\n    this._onComplete = onComplete;\n  }\n\n  /**\n   * Indicates whether this AnimationJob is complete.\n   *\n   * @return {boolean}\n   */\n  get isComplete() {\n    return this._isComplete;\n  }\n\n  /**\n   * Sets this AnimationJob as started.\n   *\n   * @param {DOMHighResTimeStamp} startTime\n   */\n  start(startTime) {\n    this._startTime = startTime;\n    this._isComplete = false;\n  }\n\n  /**\n   * Updates the animation progress of this AnimationJob to match the given time.\n   *\n   * This is called from the overall animation loop.\n   *\n   * @param {DOMHighResTimeStamp} currentTime\n   * @param {DOMHighResTimeStamp} deltaTime\n   * @abstract\n   */\n  update(currentTime, deltaTime) {\n    // Extending classes should implement this method.\n    throw new TypeError('Method not implemented');\n  }\n\n  /**\n   * Draws the current state of this AnimationJob.\n   *\n   * This is called from the overall animation loop.\n   *\n   * @abstract\n   */\n  draw() {\n    // Extending classes should implement this method.\n    throw new TypeError('Method not implemented');\n  }\n\n  /**\n   * Handles any necessary state for this AnimationJob being finished.\n   *\n   * @param {boolean} isCancelled\n   */\n  finish(isCancelled) {\n    console.log(`${this.constructor.name} ${isCancelled ? 'cancelled' : 'completed'}`);\n\n    this._isComplete = true;\n\n    if (this._onComplete) {\n      this._onComplete();\n    }\n  }\n}\n\nexport {AnimationJob};\n","import {FrameLatencyProfiler} from './frame-latency-profiler';\nimport {PersistentAnimationJob} from './persistent-animation-job';\nimport {TransientAnimationJob} from './transient-animation-job';\n\nconst _DELTA_TIME_UPPER_THRESHOLD = 200;\nconst _FRAME_DURATION_WARNING_THRESHOLD = 1000 / 30;\nconst _FRAME_LATENCY_LOG_PERIOD = 5000;\nconst _LATENCY_LOG_LABEL = 'Animation frame period';\n\n/**\n * This class handles the animation loop.\n *\n * This class's responsibilities include:\n * - updating modules for the current frame,\n * - drawing renderables for the current frame,\n * - starting and stopping transient animation jobs,\n * - capping time step durations at a max threshold.\n */\nclass Animator {\n  constructor() {\n    this._jobs = [];\n    this._previousTime = null;\n    this._isPaused = true;\n    this._requestAnimationFrameId = null;\n    this._totalUnpausedRunTime = 0;\n    this._lastUnpauseTime = null;\n    this._latencyProfiler = new FrameLatencyProfiler(_FRAME_LATENCY_LOG_PERIOD,\n        _FRAME_DURATION_WARNING_THRESHOLD, _LATENCY_LOG_LABEL);\n  }\n\n  /**\n   * Starts the given AnimationJob.\n   *\n   * @param {AnimationJob} job\n   */\n  startJob(job) {\n    // Is this a restart?\n    if (!job.isComplete) {\n      console.debug(`Restarting AnimationJob: ${job.constructor.name}`);\n\n      if (job instanceof PersistentAnimationJob) {\n        job.reset();\n      } else {\n        job.finish(true);\n        job.start(window.performance.now());\n      }\n    } else {\n      console.debug(`Starting AnimationJob: ${job.constructor.name}`);\n\n      job.start(this._previousTime);\n      this._jobs.push(job);\n    }\n\n    this._startAnimationLoop();\n  }\n\n  /**\n   * Cancels the given AnimationJob.\n   *\n   * @param {AnimationJob} job\n   */\n  cancelJob(job) {\n    console.debug(`Cancelling AnimationJob: ${job.constructor.name}`);\n    job.finish(true);\n  }\n\n  /**\n   * Cancels all running AnimationJobs.\n   */\n  cancelAll() {\n    while (this._jobs.length) {\n      this.cancelJob(this._jobs[0]);\n    }\n  }\n\n  /** @returns {DOMHighResTimeStamp} */\n  get currentTime() {\n    return this._previousTime;\n  }\n\n  /** @returns {boolean} */\n  get isPaused() {\n    return this._isPaused;\n  }\n\n  pause() {\n    this._stopAnimationLoop();\n    console.debug('Animator paused');\n  }\n\n  unpause() {\n    this._startAnimationLoop();\n    console.debug('Animator unpaused');\n  }\n\n  /**\n   * This is the animation loop that drives all of the animation.\n   *\n   * @param {DOMHighResTimeStamp} currentTime\n   * @private\n   */\n  _animationLoop(currentTime) {\n    // When pausing and restarting, it's possible for the previous time to be slightly inconsistent\n    // with the animationFrame time.\n    if (currentTime < this._previousTime) {\n      this._previousTime = currentTime - 1;\n    }\n\n    let deltaTime = currentTime - this._previousTime;\n    this._previousTime = currentTime;\n\n    this._latencyProfiler.recordFrameLatency(deltaTime);\n\n    // Large delays between frames can cause lead to instability in the system, so this caps them to\n    // a max threshold.\n    deltaTime = deltaTime > _DELTA_TIME_UPPER_THRESHOLD ?\n        _DELTA_TIME_UPPER_THRESHOLD : deltaTime;\n\n    if (!this._isPaused) {\n      this._requestAnimationFrameId =\n          window.requestAnimationFrame(currentTime => this._animationLoop(currentTime));\n      this._updateJobs(currentTime, deltaTime);\n      this._drawJobs();\n    }\n  }\n\n  /**\n   * Updates all of the active AnimationJobs.\n   *\n   * @param {DOMHighResTimeStamp} currentTime\n   * @param {DOMHighResTimeStamp} deltaTime\n   * @private\n   */\n  _updateJobs(currentTime, deltaTime) {\n    for (let i = 0, count = this._jobs.length; i < count; i++) {\n      let job = this._jobs[i];\n\n      // Remove jobs from the list after they are complete.\n      if (job.isComplete) {\n        this._removeJob(job, i);\n        i--;\n        count--;\n        continue;\n      }\n\n      // Check whether the job is transient and has reached its end.\n      if (job instanceof TransientAnimationJob && job.endTime < currentTime) {\n        job.finish(false);\n      } else {\n        job.update(currentTime, deltaTime);\n      }\n    }\n  }\n\n  /**\n   * Removes the given job from the collection of active, animating jobs.\n   *\n   * @param {AnimationJob} job\n   * @param {number} [index=-1]\n   * @private\n   */\n  _removeJob(job, index = -1) {\n    console.debug(`Removing AnimationJob: ${job.constructor.name}`);\n\n    if (index >= 0) {\n      this._jobs.splice(index, 1);\n    } else {\n      const count = this._jobs.length;\n      for (index = 0; index < count; index++) {\n        if (this._jobs[index] === job) {\n          this._jobs.splice(index, 1);\n          break;\n        }\n      }\n    }\n\n    // Stop the animation loop when there are no more jobs to animate.\n    if (this._jobs.length === 0) {\n      this._stopAnimationLoop();\n    }\n  }\n\n  /**\n   * Draws all of the active AnimationJobs.\n   *\n   * @private\n   */\n  _drawJobs() {\n    for (let i = 0, count = this._jobs.length; i < count; i++) {\n      this._jobs[i].draw();\n    }\n  }\n\n  /**\n   * Starts the animation loop if it is not already running.\n   *\n   * This method is idempotent.\n   *\n   * @private\n   */\n  _startAnimationLoop() {\n    if (this._isPaused) {\n      this._lastUnpauseTime = window.performance.now();\n    }\n    this._isPaused = false;\n\n    // Only actually start the loop if it isn't already running and the page has focus.\n    if (!this._requestAnimationFrameId && !document.hidden) {\n      this._latencyProfiler.start();\n      this._previousTime = window.performance.now();\n      this._requestAnimationFrameId =\n          window.requestAnimationFrame(time => this._animationLoop(time));\n    }\n  }\n\n  /**\n   * Stops the animation loop.\n   *\n   * @private\n   */\n  _stopAnimationLoop() {\n    if (!this._isPaused) {\n      this._totalUnpausedRunTime += this._timeSinceLastPaused;\n    }\n    this._isPaused = true;\n    window.cancelAnimationFrame(this._requestAnimationFrameId);\n    this._requestAnimationFrameId = null;\n    this._latencyProfiler.stop();\n  }\n\n  /**\n   * Creates a promise that will resolve on the next animation loop.\n   *\n   * @returns {Promise}\n   */\n  resolveOnNextFrame() {\n    return new Promise(window.requestAnimationFrame);\n  }\n\n  /**\n   * Gets the total amount of time the animator has been running while not paused.\n   *\n   * @returns {DOMHighResTimeStamp}\n   */\n  get totalRunTime() {\n    return this._isPaused\n        ? this._totalUnpausedRunTime\n        : this._totalUnpausedRunTime + this._timeSinceLastPaused;\n  }\n\n  /**\n   * @returns {DOMHighResTimeStamp}\n   */\n  get _timeSinceLastPaused() {\n    return window.performance.now() - this._lastUnpauseTime;\n  }\n}\n\nconst animator = new Animator();\n\nexport {animator};\n\n/**\n * @typedef {number} DOMHighResTimeStamp A number of milliseconds, accurate to one thousandth of a\n * millisecond.\n */\n\n","/**\n * This class keeps track of avg/min/max frame latencies over the last logging time period and\n * periodically logs these values.\n */\nclass FrameLatencyProfiler {\n  /**\n   * @param {number} logPeriod The period at which to print latency log messages. In milliseconds.\n   * @param {number} latencyWarningThreshold If the average latency exceeds this threshold, then the\n   * log message is shown as a warning. In milliseconds.\n   * @param {string} logLabel A label to show for each latency log message.\n   */\n  constructor(logPeriod, latencyWarningThreshold, logLabel) {\n    this._logPeriod = logPeriod;\n    this._latencyWarningThreshold = latencyWarningThreshold;\n    this._logLabel = logLabel;\n\n    this._frameCount = null;\n    this._maxFrameLatency = null;\n    this._minFrameLatency = null;\n    this._avgFrameLatency = null;\n\n    this._intervalId = null;\n  }\n\n  start() {\n    this.stop();\n    this.reset();\n\n    this._intervalId = setInterval(() => {\n      this.logFrameLatency();\n      this.reset();\n    }, this._logPeriod);\n  }\n\n  stop() {\n    clearInterval(this._intervalId);\n  }\n\n  reset() {\n    this._frameCount = 0;\n    this._maxFrameLatency = Number.MIN_VALUE;\n    this._minFrameLatency = Number.MAX_VALUE;\n    this._avgFrameLatency = 0;\n  }\n\n  /**\n   * Keeps track of a running average, min value, and max value for the frame latencies.\n   *\n   * @param {DOMHighResTimeStamp} frameLatency\n   */\n  recordFrameLatency(frameLatency) {\n    this._frameCount++;\n    this._maxFrameLatency =\n        this._maxFrameLatency < frameLatency ? frameLatency : this._maxFrameLatency;\n    this._minFrameLatency =\n        this._minFrameLatency > frameLatency ? frameLatency : this._minFrameLatency;\n    this._avgFrameLatency =\n        this._avgFrameLatency + (frameLatency - this._avgFrameLatency) / this._frameCount;\n  }\n\n  logFrameLatency() {\n    if (this._frameCount > 0) {\n      const message = `${this._logLabel}:  AVG=${this._avgFrameLatency.toFixed(3)}  ` +\n          `(MAX=${this._maxFrameLatency.toFixed(3)}; MIN=${this._minFrameLatency.toFixed(3)})`;\n      if (this._maxFrameLatency >= this._latencyWarningThreshold) {\n        console.warn(message);\n      } else {\n        console.debug(message);\n      }\n    }\n  }\n}\n\nexport {FrameLatencyProfiler};\n","export * from './animation-job';\nexport * from './animator';\nexport * from './frame-latency-profiler';\nexport * from './persistent-animation-job';\nexport * from './transient-animation-job';\n","import {AnimationJob} from './animation-job';\n\n/**\n * A PersistentAnimationJob recurs or has an indefinite duration.\n *\n * @abstract\n */\nclass PersistentAnimationJob extends AnimationJob {\n  /**\n   * @param {Function} [onComplete] A callback to be called when this AnimationJob is finished.\n   */\n  constructor(onComplete) {\n    super(onComplete);\n\n    // PersistentAnimationJob is an abstract class. It should not be instantiated directly.\n    if (new.target === PersistentAnimationJob) {\n      throw new TypeError('Cannot construct PersistentAnimationJob instances directly');\n    }\n  }\n\n  /**\n   * @abstract\n   */\n  reset() {\n    // Extending classes should implement this method.\n    throw new TypeError('Method not implemented');\n  }\n}\n\nexport {PersistentAnimationJob};\n","import {_util} from './util';\n\nimport {AnimationJob} from './animation-job';\n\n/**\n * A TransientAnimationJob is temporary and has a definite beginning and end.\n *\n * @abstract\n */\nclass TransientAnimationJob extends AnimationJob {\n  /**\n   * @param {number} duration\n   * @param {number} delay\n   * @param {Function|String} easingFunction\n   * @param {Function} [onComplete] A callback to be called when this AnimationJob is finished.\n   */\n  constructor(duration, delay, easingFunction, onComplete) {\n    super(onComplete);\n\n    // TransientAnimationJob is an abstract class. It should not be instantiated directly.\n    if (new.target === TransientAnimationJob) {\n      throw new TypeError('Cannot construct TransientAnimationJob instances directly');\n    }\n\n    this._duration = duration;\n    this._delay = delay;\n    this._easingFunction = typeof easingFunction === 'function'\n        ? easingFunction\n        : _util.easingFunctions[easingFunction];\n  }\n\n  /**\n   * @returns {number}\n   */\n  get endTime() {\n    return this._startTime + this._duration + this._delay;\n  }\n}\n\nexport {TransientAnimationJob};\n","/**\n * This module defines a collection of static utility functions.\n */\n\n// A collection of different types of easing functions.\nconst easingFunctions = {\n  linear: t => t,\n  easeInQuad: t => t * t,\n  easeOutQuad: t => t * (2 - t),\n  easeInOutQuad: t => t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t,\n  easeInCubic: t => t * t * t,\n  easeOutCubic: t => 1 + --t * t * t,\n  easeInOutCubic: t => t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1,\n  easeInQuart: t => t * t * t * t,\n  easeOutQuart: t => 1 - --t * t * t * t,\n  easeInOutQuart: t => t < 0.5 ? 8 * t * t * t * t : 1 - 8 * --t * t * t * t,\n  easeInQuint: t => t * t * t * t * t,\n  easeOutQuint: t => 1 + --t * t * t * t * t,\n  easeInOutQuint: t => t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * --t * t * t * t * t\n};\n\nconst _util = {\n  easingFunctions,\n};\n\nexport {\n  _util,\n};\n","export * from './src/aabb-collidable';\nexport * from './src/capsule-collidable';\nexport * from './src/collidable';\nexport * from './src/line-segment';\nexport * from './src/obb-collidable';\nexport * from './src/sphere-collidable';\n","import {Collidable} from './collidable';\nimport {LineSegment} from './line-segment';\nimport {tmpVec1, tmpVec2} from '../../../util';\n\n/**\n * This class represents an axially-aligned bounding box (AABB).\n *\n * This is primarily useful for collision detection. An AABB is only appropriate for some\n * geometries. For other geometries, an oriented bounding box (OBB) or a bounding sphere may be more\n * appropriate.\n */\nclass Aabb extends Collidable {\n  /**\n   * @param {number} minX\n   * @param {number} minY\n   * @param {number} minZ\n   * @param {number} maxX\n   * @param {number} maxY\n   * @param {number} maxZ\n   * @param {boolean} [isStationary=false]\n   * @param {CollidablePhysicsJob} [physicsJob]\n   */\n  constructor(minX, minY, minZ, maxX, maxY, maxZ, isStationary = false, physicsJob) {\n    super(isStationary, physicsJob);\n    this.minX = minX;\n    this.minY = minY;\n    this.minZ = minZ;\n    this.maxX = maxX;\n    this.maxY = maxY;\n    this.maxZ = maxZ;\n  }\n\n  /**\n   * Creates a new bounding box with the dimensions of an axially-aligned cube centered around the \n   * given center and with the given half-side length.\n   *\n   * @param {vec3} center\n   * @param {number} halfSideLength\n   */\n  static createAsUniformAroundCenter(center, halfSideLength) {\n    const bounds = new Aabb(0, 0, 0, 0, 0, 0);\n    bounds.setAsUniformAroundCenter(center, halfSideLength);\n    return bounds;\n  }\n\n  /**\n   * Updates the dimensions of this bounding box to represent an axially-aligned cube centered\n   * around the given center and with the given half-side length.\n   *\n   * @param {vec3} center\n   * @param {number} halfSideLength\n   */\n  setAsUniformAroundCenter(center, halfSideLength) {\n    this.minX = center[0] - halfSideLength;\n    this.minY = center[1] - halfSideLength;\n    this.minZ = center[2] - halfSideLength;\n    this.maxX = center[0] + halfSideLength;\n    this.maxY = center[1] + halfSideLength;\n    this.maxZ = center[2] + halfSideLength;\n  }\n\n  /** @returns {number} */\n  get rangeX() {\n    return this.maxX - this.minX;\n  }\n  /** @returns {number} */\n  get rangeY() {\n    return this.maxY - this.minY;\n  }\n  /** @returns {number} */\n  get rangeZ() {\n    return this.maxZ - this.minZ;\n  }\n\n  /** @returns {number} */\n  get centerX() {\n    return this.minX + this.rangeX / 2;\n  }\n  /** @returns {number} */\n  get centerY() {\n    return this.minY + this.rangeY / 2;\n  }\n  /** @returns {number} */\n  get centerZ() {\n    return this.minZ + this.rangeZ / 2;\n  }\n\n  /** @returns {number} */\n  get surfaceArea() {\n    const rangeX = this.rangeX;\n    const rangeY = this.rangeY;\n    const rangeZ = this.rangeZ;\n    return 2 * (rangeX * rangeY + rangeX * rangeZ + rangeY * rangeZ);\n  }\n\n  /**\n   * @returns {vec3}\n   * @override\n   */\n  get centerOfVolume() {\n    // Reuse the same object when this is called multiple times.\n    this._centerOfVolume = this._centerOfVolume || vec3.create();\n    vec3.set(this._centerOfVolume, this.centerX, this.centerY, this.centerZ);\n    return this._centerOfVolume;\n  }\n\n  /**\n   * @returns {Collidable}\n   * @override\n   */\n  get boundingVolume() {\n    return this;\n  }\n\n  /**\n   * @param {vec3} value\n   * @override\n   */\n  set position(value) {\n    const rangeX = this.rangeX;\n    const rangeY = this.rangeY;\n    const rangeZ = this.rangeZ;\n    this.minX = value[0] - rangeX / 2;\n    this.minY = value[1] - rangeY / 2;\n    this.minZ = value[2] - rangeZ / 2;\n    this.maxX = value[0] + rangeX / 2;\n    this.maxY = value[1] + rangeY / 2;\n    this.maxZ = value[2] + rangeZ / 2;\n  }\n\n  /**\n   * @param {quat} value\n   * @override\n   */\n  set orientation(value) {\n    // Do nothing.\n  }\n\n  /**\n   * Calls the given callback once for each vertex.\n   *\n   * Stops as soon as the callback returns true for a vertex.\n   *\n   * @param {VertexCallback} callback\n   * @param {vec3} [vertex] Output param.\n   * @returns {boolean} True if one of the callbacks returned true.\n   */\n  someVertex(callback, vertex) {\n    vertex = vertex || tmpVec1;\n\n    vec3.set(vertex, this.minX, this.minY, this.minZ);\n    if (callback(vertex)) return true;\n\n    vec3.set(vertex, this.maxX, this.minY, this.minZ);\n    if (callback(vertex)) return true;\n\n    vec3.set(vertex, this.minX, this.maxY, this.minZ);\n    if (callback(vertex)) return true;\n\n    vec3.set(vertex, this.maxX, this.maxY, this.minZ);\n    if (callback(vertex)) return true;\n\n    vec3.set(vertex, this.minX, this.minY, this.maxZ);\n    if (callback(vertex)) return true;\n\n    vec3.set(vertex, this.maxX, this.minY, this.maxZ);\n    if (callback(vertex)) return true;\n\n    vec3.set(vertex, this.minX, this.maxY, this.maxZ);\n    if (callback(vertex)) return true;\n\n    vec3.set(vertex, this.maxX, this.maxY, this.maxZ);\n    if (callback(vertex)) return true;\n\n    return false;\n  }\n\n  /**\n   * Calls the given callback once for each edge.\n   *\n   * @param {EdgeCallback} callback\n   * @param {LineSegment} [edge] Output param.\n   * @returns {boolean} True if one of the callbacks returned true.\n   */\n  someEdge(callback, edge) {\n    edge = edge || _segment;\n\n    //\n    // Edges along front face.\n    //\n\n    vec3.set(tmpVec1, this.minX, this.minY, this.minZ);\n    vec3.set(tmpVec2, this.maxX, this.minY, this.minZ);\n    edge.reset(tmpVec1, tmpVec2);\n    if (callback(edge)) return true;\n\n    vec3.set(tmpVec1, this.minX, this.maxY, this.minZ);\n    vec3.set(tmpVec2, this.maxX, this.maxY, this.minZ);\n    edge.reset(tmpVec1, tmpVec2);\n    if (callback(edge)) return true;\n\n    vec3.set(tmpVec1, this.minX, this.minY, this.minZ);\n    vec3.set(tmpVec2, this.minX, this.maxY, this.minZ);\n    edge.reset(tmpVec1, tmpVec2);\n    if (callback(edge)) return true;\n\n    vec3.set(tmpVec1, this.maxX, this.minY, this.minZ);\n    vec3.set(tmpVec2, this.maxX, this.maxY, this.minZ);\n    edge.reset(tmpVec1, tmpVec2);\n    if (callback(edge)) return true;\n\n    //\n    // Edges along back face.\n    //\n\n    vec3.set(tmpVec1, this.minX, this.minY, this.maxZ);\n    vec3.set(tmpVec2, this.maxX, this.minY, this.maxZ);\n    edge.reset(tmpVec1, tmpVec2);\n    if (callback(edge)) return true;\n\n    vec3.set(tmpVec1, this.minX, this.maxY, this.maxZ);\n    vec3.set(tmpVec2, this.maxX, this.maxY, this.maxZ);\n    edge.reset(tmpVec1, tmpVec2);\n    if (callback(edge)) return true;\n\n    vec3.set(tmpVec1, this.minX, this.minY, this.maxZ);\n    vec3.set(tmpVec2, this.minX, this.maxY, this.maxZ);\n    edge.reset(tmpVec1, tmpVec2);\n    if (callback(edge)) return true;\n\n    vec3.set(tmpVec1, this.maxX, this.minY, this.maxZ);\n    vec3.set(tmpVec2, this.maxX, this.maxY, this.maxZ);\n    edge.reset(tmpVec1, tmpVec2);\n    if (callback(edge)) return true;\n\n    //\n    // Edges between front and back faces.\n    //\n\n    vec3.set(tmpVec1, this.minX, this.minY, this.minZ);\n    vec3.set(tmpVec2, this.minX, this.minY, this.maxZ);\n    edge.reset(tmpVec1, tmpVec2);\n    if (callback(edge)) return true;\n\n    vec3.set(tmpVec1, this.maxX, this.minY, this.minZ);\n    vec3.set(tmpVec2, this.maxX, this.minY, this.maxZ);\n    edge.reset(tmpVec1, tmpVec2);\n    if (callback(edge)) return true;\n\n    vec3.set(tmpVec1, this.minX, this.maxY, this.minZ);\n    vec3.set(tmpVec2, this.minX, this.maxY, this.maxZ);\n    edge.reset(tmpVec1, tmpVec2);\n    if (callback(edge)) return true;\n\n    vec3.set(tmpVec1, this.maxX, this.maxY, this.minZ);\n    vec3.set(tmpVec2, this.maxX, this.maxY, this.maxZ);\n    edge.reset(tmpVec1, tmpVec2);\n    if (callback(edge)) return true;\n\n    return false;\n  }\n}\n\nconst _segment = new LineSegment(vec3.create(), vec3.create());\n\nexport {Aabb};\n","import {Collidable} from './collidable';\nimport {LineSegment} from './line-segment';\n\n/**\n * This class represents a capsule.\n *\n * - A capsule is a cylinder with semi-spheres on either end.\n * - A capsule can represent a rough approximation of many useful shapes.\n * - A capsule can be used for relatively efficient collision detection.\n */\nclass Capsule extends Collidable {\n  /**\n   * The default orientation of the capsule is along the z-axis.\n   *\n   * @param {number} halfDistance Half the distance from the centers of the capsule end spheres.\n   * @param {number} radius\n   * @param {boolean} [isStationary=false]\n   * @param {CollidablePhysicsJob} [physicsJob]\n   */\n  constructor(halfDistance, radius, isStationary = false, physicsJob) {\n    super(isStationary, physicsJob);\n    this.halfDistance = halfDistance;\n    this.segment = new LineSegment(vec3.fromValues(0, 0, -halfDistance),\n        vec3.fromValues(0, 0, halfDistance));\n    this.radius = radius;\n  }\n\n  /**\n   * @returns {vec3}\n   * @override\n   */\n  get centerOfVolume() {\n    return this.segment.center;\n  }\n\n  /**\n   * @returns {Collidable}\n   * @override\n   */\n  get boundingVolume() {\n    return this;\n  }\n\n  /**\n   * @param {vec3} value\n   * @override\n   */\n  set position(value) {\n    this.segment.center = value;\n  }\n\n  /**\n   * @param {quat} value\n   * @override\n   */\n  set orientation(value) {\n    this.segment.orientation = value;\n  }\n}\n\nexport {Capsule};\n","/**\n * This class represents a 3D collidable rigid object.\n *\n * This is useful for collision detection and response.\n *\n * @abstract\n */\nclass Collidable {\n  /**\n   * @param {boolean} isStationary\n   * @param {CollidablePhysicsJob} [physicsJob]\n   */\n  constructor(isStationary, physicsJob) {\n    // Collidable is an abstract class. It should not be instantiated directly.\n    if (new.target === Collidable) {\n      throw new TypeError('Cannot construct Collidable instances directly');\n    }\n\n    this.isStationary = isStationary;\n    this.physicsJob = physicsJob;\n    this.collisions = [];\n    this.previousCollisions = [];\n  }\n\n  /**\n   * Implementing classes can override this to provide a center of mass that is different than the\n   * center of volume.\n   *\n   * @returns {vec3}\n   */\n  get centerOfMass() {\n    return this.centerOfVolume;\n  }\n\n  /**\n   * @returns {vec3}\n   * @abstract\n   */\n  get centerOfVolume() {\n    // Extending classes should implement this method.\n    throw new TypeError('Method not implemented');\n  }\n\n  /**\n   * @returns {Collidable}\n   * @abstract\n   */\n  get boundingVolume() {\n    // Extending classes should implement this method.\n    throw new TypeError('Method not implemented');\n  }\n\n  /**\n   * @param {vec3} value\n   * @abstract\n   */\n  set position(value) {\n    // Extending classes should implement this method.\n    throw new TypeError('Method not implemented');\n  }\n\n  /**\n   * @param {quat} value\n   * @abstract\n   */\n  set orientation(value) {\n    // Extending classes should implement this method.\n    throw new TypeError('Method not implemented');\n  }\n}\n\nexport {Collidable};\n","import {tmpVec1, tmpVec2} from '../../../util';\n\n/**\n * This class represents a line segment.\n */\nclass LineSegment {\n  /**\n   * @param {vec3} start\n   * @param {vec3} end\n   */\n  constructor(start, end) {\n    this.start = vec3.create();\n    this.end = vec3.create();\n    this._center = vec3.create();\n    this._originalOrientationStart = vec3.create();\n    this._originalOrientationEnd = vec3.create();\n    this.reset(start, end);\n  }\n\n  /**\n   * @param {vec3} start\n   * @param {vec3} end\n   */\n  reset(start, end) {\n    vec3.copy(this.start, start);\n    vec3.copy(this.end, end);\n    vec3.subtract(this._originalOrientationStart, this.start, this.center);\n    vec3.subtract(this._originalOrientationEnd, this.end, this.center);\n  }\n\n  /** @returns {LineSegment} */\n  clone() {\n    const segment = new LineSegment(this.start, this.end);\n    segment._originalOrientationStart = this._originalOrientationStart;\n    segment._originalOrientationEnd = this._originalOrientationEnd;\n    return segment;\n  }\n\n  /**\n   * The UN-NORMALIZED direction of this segment.\n   *\n   * @returns {vec3}\n   */\n  get dir() {\n    // Reuse the same object when this is called multiple times.\n    this._dir = this._dir || vec3.create();\n    return vec3.subtract(this._dir, this.end, this.start);\n  }\n\n  /** @returns {vec3} */\n  get center() {\n    vec3.lerp(this._center, this.start, this.end, 0.5);\n    return this._center;\n  }\n\n  /** @param {vec3} value */\n  set center(value) {\n    // Reuse the same object when this is called multiple times.\n    this._displacement = this._displacement || vec3.create();\n    vec3.subtract(this._displacement, value, this.center);\n\n    vec3.add(this.start, this.start, this._displacement);\n    vec3.add(this.end, this.end, this._displacement);\n  }\n\n  /** @param {quat} value */\n  set orientation(value) {\n    vec3.transformQuat(tmpVec1, this._originalOrientationStart, value);\n    vec3.transformQuat(tmpVec2, this._originalOrientationEnd, value);\n\n    // We don't want this to be re-calculated between start/end updates.\n    const center = this.center;\n\n    vec3.add(this.start, center, tmpVec1);\n    vec3.add(this.end, center, tmpVec2);\n  }\n}\n\nexport {LineSegment};\n","import {Collidable} from './collidable';\nimport {Sphere} from './sphere-collidable';\nimport {LineSegment} from './line-segment';\n\n/**\n * This class represents an oriented bounding box (OBB).\n *\n * This is useful both for collision detection and for representing any rotated rectangular cuboid.\n * An OBB is only appropriate for some geometries. For other geometries, an axially-aligned bounding\n * box (AABB) or a bounding sphere may be more appropriate.\n */\nclass Obb extends Collidable {\n  /**\n   * Defaults to being centered at the origin with its local axes aligned with the world axes.\n   *\n   * @param {number} halfSideLengthX\n   * @param {number} halfSideLengthY\n   * @param {number} halfSideLengthZ\n   * @param {boolean} [isStationary=false]\n   * @param {CollidablePhysicsJob} [physicsJob]\n   */\n  constructor(halfSideLengthX, halfSideLengthY, halfSideLengthZ, isStationary = false, physicsJob) {\n    super(isStationary, physicsJob);\n    this.extents = [\n      vec3.fromValues(halfSideLengthX, 0, 0),\n      vec3.fromValues(0, halfSideLengthY, 0),\n      vec3.fromValues(0, 0, halfSideLengthZ)\n    ];\n    this.axes = [\n      vec3.fromValues(1, 0, 0),\n      vec3.fromValues(0, 1, 0),\n      vec3.fromValues(0, 0, 1)\n    ];\n    this.halfSideLengths = [\n      halfSideLengthX,\n      halfSideLengthY,\n      halfSideLengthZ\n    ];\n    this._center = vec3.create();\n    this._orientation = quat.create();\n  }\n\n  /**\n   * @returns {vec3}\n   * @override\n   */\n  get centerOfVolume() {\n    return this._center;\n  }\n\n  /**\n   * @returns {Collidable}\n   * @override\n   */\n  get boundingVolume() {\n    // Reuse the same value when this is called multiple times.\n    if (!this._boundingSphere) {\n      const radius = Math.sqrt(this.halfSideLengthX * this.halfSideLengthX +\n          this.halfSideLengthY * this.halfSideLengthY +\n          this.halfSideLengthZ * this.halfSideLengthZ);\n      this._boundingSphere = new Sphere(0, 0, 0, radius, this.isStationary);\n    }\n    this._boundingSphere.position = this._center;\n    return this._boundingSphere;\n  }\n\n  /**\n   * @param {vec3} value\n   * @override\n   */\n  set position(value) {\n    vec3.copy(this._center, value);\n  }\n\n  /**\n   * @param {quat} value\n   * @override\n   */\n  set orientation(value) {\n    quat.copy(this._orientation, value);\n    this._updateExtents();\n  }\n  /** @returns {quat} */\n  get orientation() {\n    return this._orientation;\n  }\n\n  /** @returns {number} */\n  get halfSideLengthX() {\n    return this.halfSideLengths[0];\n  }\n  /** @param {number} value */\n  set halfSideLengthX(value) {\n    this.halfSideLengths[0] = value;\n    this._updateExtents();\n  }\n\n  /** @returns {number} */\n  get halfSideLengthY() {\n    return this.halfSideLengths[1];\n  }\n  /** @param {number} value */\n  set halfSideLengthY(value) {\n    this.halfSideLengths[1] = value;\n    this._updateExtents();\n  }\n\n  /** @returns {number} */\n  get halfSideLengthZ() {\n    return this.halfSideLengths[2];\n  }\n  /** @param {number} value */\n  set halfSideLengthZ(value) {\n    this.halfSideLengths[2] = value;\n    this._updateExtents();\n  }\n\n  /**\n   * Calls the given callback once for each vertex.\n   *\n   * Stops as soon as the callback returns true for a vertex.\n   *\n   * @param {VertexCallback} callback\n   * @param {vec3} [vertex] Output param.\n   * @returns {boolean} True if one of the callbacks returned true.\n   */\n  someVertex(callback, vertex) {\n    vertex = vertex || _vertex1;\n\n    for (let xScale = -1; xScale <= 1; xScale += 2) {\n      for (let yScale = -1; yScale <= 1; yScale += 2) {\n        for (let zScale = -1; zScale <= 1; zScale += 2) {\n          vec3.copy(vertex, this._center);\n          vec3.scaleAndAdd(vertex, vertex, this.extents[0], xScale);\n          vec3.scaleAndAdd(vertex, vertex, this.extents[1], yScale);\n          vec3.scaleAndAdd(vertex, vertex, this.extents[2], zScale);\n          if (callback(vertex)) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Calls the given callback once for each edge.\n   *\n   * @param {EdgeCallback} callback\n   * @param {LineSegment} [edge] Output param.\n   * @returns {boolean} True if one of the callbacks returned true.\n   */\n  someEdge(callback, edge) {\n    edge = edge || _segment;\n\n    return _edgeExtentScales.some(edgeExtentScalePair => {\n      const vertex1ExtentScales = edgeExtentScalePair[0];\n      const vertex2ExtentScales = edgeExtentScalePair[1];\n\n      // Calculate the edge's first and second vertex.\n      vec3.copy(_vertex1, this._center);\n      vec3.copy(_vertex2, this._center);\n      for (let i = 0; i < 3; i++) {\n        vec3.scaleAndAdd(_vertex1, _vertex1, this.extents[i], vertex1ExtentScales[i]);\n        vec3.scaleAndAdd(_vertex2, _vertex2, this.extents[i], vertex2ExtentScales[i]);\n      }\n\n      // Call back with the edge.\n      edge.reset(_vertex1, _vertex2);\n      return callback(edge);\n    });\n  }\n\n  /**\n   * Calls the given callback once for each face.\n   *\n   * @param {FaceCallback} callback\n   * @param {Array.<vec3>} [face] Output param.\n   * @returns {boolean} True if one of the callbacks returned true.\n   */\n  someFace(callback, face) {\n    face = face || [];\n\n    return _faceExtentScales.some(faceExtentScales => {\n      const vertex1ExtentScales = faceExtentScales[0];\n      const vertex2ExtentScales = faceExtentScales[1];\n      const vertex3ExtentScales = faceExtentScales[2];\n      const vertex4ExtentScales = faceExtentScales[3];\n\n      // Calculate the face's vertices.\n      vec3.copy(_vertex1, this._center);\n      vec3.copy(_vertex2, this._center);\n      vec3.copy(_vertex3, this._center);\n      vec3.copy(_vertex4, this._center);\n      for (let i = 0; i < 3; i++) {\n        vec3.scaleAndAdd(_vertex1, _vertex1, this.extents[i], vertex1ExtentScales[i]);\n        vec3.scaleAndAdd(_vertex2, _vertex2, this.extents[i], vertex2ExtentScales[i]);\n        vec3.scaleAndAdd(_vertex3, _vertex3, this.extents[i], vertex3ExtentScales[i]);\n        vec3.scaleAndAdd(_vertex4, _vertex4, this.extents[i], vertex4ExtentScales[i]);\n      }\n\n      // Call back with the face.\n      face.splice(0, 4, _vertex1, _vertex2, _vertex3, _vertex4);\n      return callback(face);\n    });\n  }\n\n  /**\n   * Calls the given callback once for each face with a given additional offset from the center\n   * applied to each face.\n   *\n   * @param {FaceCallback} callback\n   * @param {number} radiusOffset\n   * @param {Array.<vec3>} [face] Output param.\n   * @returns {boolean} True if one of the callbacks returned true.\n   */\n  somePushedOutFace(callback, radiusOffset, face) {\n    face = face || [];\n\n    return _faceExtentScales.some((faceExtentScales, index) => {\n      const vertex1ExtentScales = faceExtentScales[0];\n      const vertex2ExtentScales = faceExtentScales[1];\n      const vertex3ExtentScales = faceExtentScales[2];\n      const vertex4ExtentScales = faceExtentScales[3];\n      const directionOffsets = _pushedOutFaceOffsetDirections[index];\n\n      // Calculate the face's vertices.\n      vec3.copy(_vertex1, this._center);\n      vec3.copy(_vertex2, this._center);\n      vec3.copy(_vertex3, this._center);\n      vec3.copy(_vertex4, this._center);\n      for (let i = 0; i < 3; i++) {\n        // Add the offset for the normal vertex position.\n        vec3.scaleAndAdd(_vertex1, _vertex1, this.extents[i], vertex1ExtentScales[i]);\n        vec3.scaleAndAdd(_vertex2, _vertex2, this.extents[i], vertex2ExtentScales[i]);\n        vec3.scaleAndAdd(_vertex3, _vertex3, this.extents[i], vertex3ExtentScales[i]);\n        vec3.scaleAndAdd(_vertex4, _vertex4, this.extents[i], vertex4ExtentScales[i]);\n        // Add the pushed-out offset.\n        vec3.scaleAndAdd(_vertex1, _vertex1, this.extents[i],\n            radiusOffset / this.halfSideLengths[i] * directionOffsets[i]);\n        vec3.scaleAndAdd(_vertex2, _vertex2, this.extents[i],\n            radiusOffset / this.halfSideLengths[i] * directionOffsets[i]);\n        vec3.scaleAndAdd(_vertex3, _vertex3, this.extents[i],\n            radiusOffset / this.halfSideLengths[i] * directionOffsets[i]);\n        vec3.scaleAndAdd(_vertex4, _vertex4, this.extents[i],\n            radiusOffset / this.halfSideLengths[i] * directionOffsets[i]);\n      }\n\n      // Call back with the face.\n      face.splice(0, 4, _vertex1, _vertex2, _vertex3, _vertex4);\n      return callback(face);\n    });\n  }\n\n  _updateExtents() {\n    vec3.set(_vertex1, this.halfSideLengths[0], 0, 0);\n    vec3.transformQuat(this.extents[0], _vertex1, this._orientation);\n    vec3.set(_vertex1, 0, this.halfSideLengths[1], 0);\n    vec3.transformQuat(this.extents[1], _vertex1, this._orientation);\n    vec3.set(_vertex1, 0, 0, this.halfSideLengths[2]);\n    vec3.transformQuat(this.extents[2], _vertex1, this._orientation);\n\n    vec3.set(_vertex1, 1, 0, 0);\n    vec3.transformQuat(this.axes[0], _vertex1, this._orientation);\n    vec3.set(_vertex1, 0, 1, 0);\n    vec3.transformQuat(this.axes[1], _vertex1, this._orientation);\n    vec3.set(_vertex1, 0, 0, 1);\n    vec3.transformQuat(this.axes[2], _vertex1, this._orientation);\n  }\n}\n\nconst _vertex1 = vec3.create();\nconst _vertex2 = vec3.create();\nconst _vertex3 = vec3.create();\nconst _vertex4 = vec3.create();\nconst _segment = new LineSegment(vec3.create(), vec3.create());\n\nconst _edgeExtentScales = [\n  // Front-face edges.\n  [[1, -1, -1], [1, -1, 1]],\n  [[1, -1, -1], [1, 1, -1]],\n  [[1, 1, 1], [1, -1, 1]],\n  [[1, 1, 1], [1, 1, -1]],\n  // Back-face edges.\n  [[-1, -1, -1], [-1, -1, 1]],\n  [[-1, -1, -1], [-1, 1, -1]],\n  [[-1, 1, 1], [-1, -1, 1]],\n  [[-1, 1, 1], [-1, 1, -1]],\n  // Front-to-back edges.\n  [[1, -1, 1], [-1, -1, 1]],\n  [[1, 1, -1], [-1, 1, -1]],\n  [[1, 1, 1], [-1, 1, 1]],\n  [[1, -1, -1], [-1, -1, -1]],\n];\n\nconst _faceExtentScales = [\n  [[1, -1, -1], [1, -1, 1], [1, 1, 1], [1, 1, -1]],\n  [[-1, -1, -1], [-1, -1, 1], [-1, 1, 1], [-1, 1, -1]],\n  [[-1, 1, -1], [1, 1, -1], [1, 1, 1], [-1, 1, 1]],\n  [[-1, -1, -1], [1, -1, -1], [1, -1, 1], [-1, -1, 1]],\n  [[-1, -1, 1], [1, -1, 1], [1, 1, 1], [-1, 1, 1]],\n  [[-1, -1, -1], [1, -1, -1], [1, 1, -1], [-1, 1, -1]],\n];\n\nconst _pushedOutFaceOffsetDirections = [\n  vec3.fromValues(1, 0, 0),\n  vec3.fromValues(-1, 0, 0),\n  vec3.fromValues(0, 1, 0),\n  vec3.fromValues(0, -1, 0),\n  vec3.fromValues(0, 0, 1),\n  vec3.fromValues(0, 0, -1),\n];\n\nexport {Obb};\n\n/**\n * @callback VertexCallback\n * @param {vec3}\n * @returns {boolean} If true, iteration will stop.\n */\n\n/**\n * @callback EdgeCallback\n * @param {LineSegment}\n * @returns {boolean} If true, iteration will stop.\n */\n\n/**\n * @callback FaceCallback\n * @param {Array.<vec3>}\n * @returns {boolean} If true, iteration will stop.\n */\n","import {Collidable} from './collidable';\n\n/**\n * This class represents a bounding sphere.\n *\n * This is primarily useful for collision detection. A bounding sphere is only appropriate for some\n * geometries. For other geometries, an axially-aligned bounding box may be more appropriate. For\n * others still, an oriented bounding box or a more complicated hierarchical model may be more\n * appropriate.\n */\nclass Sphere extends Collidable {\n  /**\n   * @param {number} centerX\n   * @param {number} centerY\n   * @param {number} centerZ\n   * @param {number} radius\n   * @param {boolean} [isStationary=false]\n   * @param {CollidablePhysicsJob} [physicsJob]\n   */\n  constructor(centerX, centerY, centerZ, radius, isStationary = false, physicsJob) {\n    super(isStationary, physicsJob);\n    this.centerX = centerX;\n    this.centerY = centerY;\n    this.centerZ = centerZ;\n    this.radius = radius;\n  }\n\n  /**\n   * @returns {vec3}\n   * @override\n   */\n  get centerOfVolume() {\n    // Reuse the same object when this is called multiple times.\n    this._center = this._center || vec3.create();\n    vec3.set(this._center, this.centerX, this.centerY, this.centerZ);\n    return this._center;\n  }\n\n  /**\n   * @returns {Collidable}\n   * @override\n   */\n  get boundingVolume() {\n    return this;\n  }\n\n  /**\n   * @param {vec3} value\n   * @override\n   */\n  set position(value) {\n    this.centerX = value[0];\n    this.centerY = value[1];\n    this.centerZ = value[2];\n  }\n\n  /**\n   * @param {quat} value\n   * @override\n   */\n  set orientation(value) {\n    // Do nothing.\n  }\n}\n\nexport {Sphere};\n","import * as aabbCollisionDetection from './src/aabb-collision-detection';\nimport * as capsuleCollisionDetection from './src/capsule-collision-detection';\nimport * as obbCollisionDetection from './src/obb-collision-detection';\nimport * as sphereCollisionDetection from './src/sphere-collision-detection';\n\nexport {\n  aabbCollisionDetection,\n  capsuleCollisionDetection,\n  obbCollisionDetection,\n  sphereCollisionDetection,\n};\n","import * as sphereCollisionDetection from './sphere-collision-detection';\nimport * as obbCollisionDetection from './obb-collision-detection';\nimport * as capsuleCollisionDetection from './capsule-collision-detection';\nimport {aabbVsPoint as geometryAabbVsPoint} from '../../../util';\n\n/**\n * This module defines utility methods for detecting whether intersection has occurred between\n * axially-aligned bounding boxes and other shapes.\n */\n\n/**\n * @param {Aabb} aabb\n * @param {vec3} point\n * @returns {boolean}\n */\nfunction aabbVsPoint(aabb, point) {\n  return geometryAabbVsPoint(aabb, point);\n}\n\n/**\n * @param {Aabb} aabb\n * @param {Sphere} sphere\n * @returns {boolean}\n */\nfunction aabbVsSphere(aabb, sphere) {\n  return sphereCollisionDetection.sphereVsAabb(sphere, aabb);\n}\n\n/**\n * @param {Aabb} aabbA\n * @param {Aabb} aabbB\n * @returns {boolean}\n */\nfunction aabbVsAabb(aabbA, aabbB) {\n  return aabbA.maxX >= aabbB.minX && aabbA.minX <= aabbB.maxX &&\n      aabbA.maxY >= aabbB.minY && aabbA.minY <= aabbB.maxY &&\n      aabbA.maxZ >= aabbB.minZ && aabbA.minZ <= aabbB.maxZ;\n}\n\n/**\n * @param {Aabb} aabb\n * @param {Obb} obb\n * @returns {boolean}\n */\nfunction aabbVsObb(aabb, obb) {\n  return obbCollisionDetection.obbVsAabb(obb, aabb);\n}\n\n/**\n * @param {Aabb} aabb\n * @param {Capsule} capsule\n * @returns {boolean}\n */\nfunction aabbVsCapsule(aabb, capsule) {\n  return capsuleCollisionDetection.capsuleVsAabb(capsule, aabb);\n}\n\nexport {\n  aabbVsPoint,\n  aabbVsSphere,\n  aabbVsAabb,\n  aabbVsObb,\n  aabbVsCapsule,\n};\n","/**\n * This module defines utility methods for detecting whether intersection has occurred between\n * capsules and other shapes.\n */\n\nimport {\n  findClosestPointFromAabbToPoint,\n  findSquaredDistanceBetweenSegments,\n  findSquaredDistanceFromSegmentToPoint,\n  tmpVec1\n} from '../../../util';\nimport * as obbCollisionDetection from './obb-collision-detection';\n\n/**\n * @param {Capsule} capsule\n * @param {vec3} point\n * @returns {boolean}\n */\nfunction capsuleVsPoint(capsule, point) {\n  return findSquaredDistanceFromSegmentToPoint(capsule.segment, point) <=\n      capsule.radius * capsule.radius;\n}\n\n/**\n * @param {Capsule} capsule\n * @param {Sphere} sphere\n * @returns {boolean}\n */\nfunction capsuleVsSphere(capsule, sphere) {\n  const sumOfRadii = capsule.radius + sphere.radius;\n  return findSquaredDistanceFromSegmentToPoint(capsule.segment, sphere.centerOfVolume) <=\n      sumOfRadii * sumOfRadii;\n}\n\n/**\n * NOTE: This implementation cheats by checking whether vertices from one shape lie within the\n * other. Due to the tunnelling problem, it is possible that intersection occurs without any\n * vertices lying within the other shape. However, (A) this is unlikely, and (B) we are ignoring the\n * tunnelling problem for the rest of this collision system anyway.\n *\n * @param {Capsule} capsule\n * @param {Aabb} aabb\n * @returns {boolean}\n */\nfunction capsuleVsAabb(capsule, aabb) {\n  const squaredRadius = capsule.radius * capsule.radius;\n\n  // Check whether the two capsule ends intersect the AABB (sphere vs AABB) (addresses the\n  // capsule-vs-AABB-face case).\n  findClosestPointFromAabbToPoint(tmpVec1, aabb, capsule.segment.start);\n  if (vec3.squaredDistance(tmpVec1, capsule.segment.start) <= squaredRadius) {\n    return true;\n  }\n  findClosestPointFromAabbToPoint(tmpVec1, aabb, capsule.segment.end);\n  if (vec3.squaredDistance(tmpVec1, capsule.segment.end) <= squaredRadius) {\n    return true;\n  }\n\n  // Check whether the capsule intersects with any AABB edge (addresses the capsule-vs-AABB-edge\n  // case).\n  return aabb.someEdge(edge =>\n      findSquaredDistanceBetweenSegments(capsule.segment, edge) <= squaredRadius);\n\n  // (The capsule-vs-AABB-vertex case is covered by the capsule-vs-AABB-edge case).\n}\n\n/**\n * @param {Capsule} capsule\n * @param {Obb} obb\n * @returns {boolean}\n */\nfunction capsuleVsObb(capsule, obb) {\n  return obbCollisionDetection.obbVsCapsule(obb, capsule);\n}\n\n/**\n * @param {Capsule} capsuleA\n * @param {Capsule} capsuleB\n * @returns {boolean}\n */\nfunction capsuleVsCapsule(capsuleA, capsuleB) {\n  const sumOfRadii = capsuleA.radius + capsuleB.radius;\n  return findSquaredDistanceBetweenSegments(capsuleA.segment, capsuleB.segment) <=\n      sumOfRadii * sumOfRadii;\n}\n\nexport {\n  capsuleVsPoint,\n  capsuleVsSphere,\n  capsuleVsAabb,\n  capsuleVsObb,\n  capsuleVsCapsule,\n};\n","/**\n * This module defines utility methods for detecting whether intersection has occurred between\n * oriented bounding boxes and other shapes.\n */\n\nimport {\n  findClosestPointFromObbToPoint,\n  findPoiBetweenSegmentAndPlaneRegion,\n  findSquaredDistanceBetweenSegments,\n  tmpVec1,\n  tmpVec2,\n  tmpVec3,\n  tmpVec4\n} from '../../../util';\nimport * as aabbCollisionDetection from './aabb-collision-detection';\nimport * as capsuleCollisionDetection from './capsule-collision-detection';\n\n// TODO: Refactor these to not actually calculate the point of intersection. These checks can\n// instead be done more efficiently using SAT.\n\n/**\n * @param {Obb} obb\n * @param {vec3} point\n * @returns {boolean}\n */\nfunction obbVsPoint(obb, point) {\n  vec3.subtract(tmpVec4, point, obb.centerOfVolume);\n\n  vec3.set(tmpVec1, 1, 0, 0);\n  vec3.transformQuat(tmpVec1, tmpVec1, obb.orientation);\n  const axis1Distance = vec3.dot(tmpVec4, tmpVec1);\n\n  if (axis1Distance >= -obb.halfSideLengthX && axis1Distance <= obb.halfSideLengthX) {\n    vec3.set(tmpVec2, 0, 1, 0);\n    vec3.transformQuat(tmpVec2, tmpVec2, obb.orientation);\n    const axis2Distance = vec3.dot(tmpVec4, tmpVec2);\n\n    if (axis2Distance >= -obb.halfSideLengthY && axis2Distance <= obb.halfSideLengthY) {\n      vec3.set(tmpVec3, 0, 0, 1);\n      vec3.transformQuat(tmpVec3, tmpVec3, obb.orientation);\n      const axis3Distance = vec3.dot(tmpVec4, tmpVec3);\n\n      return axis3Distance >= -obb.halfSideLengthZ && axis3Distance <= obb.halfSideLengthZ;\n    }\n  }\n\n  return false;\n}\n\n/**\n * @param {Obb} obb\n * @param {Sphere} sphere\n * @returns {boolean}\n */\nfunction obbVsSphere(obb, sphere) {\n  findClosestPointFromObbToPoint(tmpVec1, obb, sphere.centerOfVolume);\n  return vec3.squaredDistance(tmpVec1, sphere.centerOfVolume) <=\n      sphere.radius * sphere.radius;\n}\n\n/**\n * NOTE: This implementation cheats by checking whether vertices from one shape lie within the\n * other. Due to the tunnelling problem, it is possible that intersection occurs without any\n * vertices lying within the other shape. However, (A) this is unlikely, and (B) we are ignoring the\n * tunnelling problem for the rest of this collision system anyway.\n *\n * @param {Obb} obb\n * @param {Aabb} aabb\n * @returns {boolean}\n */\nfunction obbVsAabb(obb, aabb) {\n  return _obbVsBoxHelper(obb, aabb, aabbCollisionDetection.aabbVsPoint);\n}\n\n/**\n * NOTE: This implementation cheats by checking whether vertices from one shape lie within the\n * other. Due to the tunnelling problem, it is possible that intersection occurs without any\n * vertices lying within the other shape. However, (A) this is unlikely, and (B) we are ignoring the\n * tunnelling problem for the rest of this collision system anyway.\n *\n * @param {Obb} obbA\n * @param {Obb} obbB\n * @returns {boolean}\n */\nfunction obbVsObb(obbA, obbB) {\n  return _obbVsBoxHelper(obbA, obbB, obbVsPoint);\n}\n\n/**\n * @param {Obb} obb\n * @param {Obb|Aabb} other\n * @param {Function} otherVsPointCallback\n * @returns {boolean}\n * @private\n */\nfunction _obbVsBoxHelper(obb, other, otherVsPointCallback) {\n  // Check whether any vertices from A lie within B's bounds.\n  if (obb.someVertex(vertex => otherVsPointCallback(other, vertex))) return true;\n\n  // Check whether any vertices from B lie within A's bounds.\n  if (other.someVertex(vertex => obbVsPoint(obb, vertex))) return true;\n\n  // We assume that a vertex-to-face collision would have been detected by one of the two above\n  // checks. Any edge-to-edge collision must involve both an edge from A through a face of B and\n  // vice versa. So it is sufficient to only check the edges of one and the faces of the other.\n  if (other.someEdge(edge =>\n          obb.someFace(face =>\n              findPoiBetweenSegmentAndPlaneRegion(tmpVec1, edge, ...face))))\n    return true;\n\n  return false;\n}\n\n/**\n * @param {Obb} obb\n * @param {Capsule} capsule\n * @returns {boolean}\n */\nfunction obbVsCapsule(obb, capsule) {\n  // Check the edges.\n  const squaredRadius = capsule.radius * capsule.radius;\n  let areIntersecting = obb.someEdge(edge =>\n      findSquaredDistanceBetweenSegments(capsule.segment, edge) < squaredRadius);\n\n  if (areIntersecting) return true;\n\n  // Check the faces.\n  areIntersecting = obb.somePushedOutFace(face =>\n          findPoiBetweenSegmentAndPlaneRegion(tmpVec1, capsule.segment, ...face), capsule.radius);\n\n  // Check for inclusion of one shape inside the other.\n  areIntersecting = areIntersecting || obbVsPoint(obb, capsule.centerOfVolume);\n  areIntersecting = areIntersecting || capsuleCollisionDetection.capsuleVsPoint(capsule,\n      obb.centerOfVolume);\n\n  return areIntersecting;\n}\n\nexport {\n  obbVsPoint,\n  obbVsSphere,\n  obbVsAabb,\n  obbVsObb,\n  obbVsCapsule,\n};\n","import {findClosestPointFromAabbToPoint, tmpVec1} from '../../../util';\nimport * as obbCollisionDetection from './obb-collision-detection';\nimport * as capsuleCollisionDetection from './capsule-collision-detection';\n\n/**\n * This module defines utility methods for detecting whether intersection has occurred between\n * spheres and other shapes.\n */\n\n/**\n * @param {Sphere} sphere\n * @param {vec3} point\n * @returns {boolean}\n */\nfunction sphereVsPoint(sphere, point) {\n  return vec3.squaredDistance(point, sphere.centerOfVolume) <= sphere.radius * sphere.radius;\n}\n\n/**\n * @param {Sphere} sphereA\n * @param {Sphere} sphereB\n * @returns {boolean}\n */\nfunction sphereVsSphere(sphereA, sphereB) {\n  const sumOfRadii = sphereA.radius + sphereB.radius;\n  return vec3.squaredDistance(sphereA.centerOfVolume, sphereB.centerOfVolume) <=\n      sumOfRadii * sumOfRadii;\n}\n\n/**\n * @param {Sphere} sphere\n * @param {Aabb} aabb\n * @returns {boolean}\n */\nfunction sphereVsAabb(sphere, aabb) {\n  findClosestPointFromAabbToPoint(tmpVec1, aabb, sphere.centerOfVolume);\n  return vec3.squaredDistance(tmpVec1, sphere.centerOfVolume) <= sphere.radius * sphere.radius;\n}\n\n/**\n * @param {Sphere} sphere\n * @param {Obb} obb\n * @returns {boolean}\n */\nfunction sphereVsObb(sphere, obb) {\n  return obbCollisionDetection.obbVsSphere(obb, sphere);\n}\n\n/**\n * @param {Sphere} sphere\n * @param {Capsule} capsule\n * @returns {boolean}\n */\nfunction sphereVsCapsule(sphere, capsule) {\n  return capsuleCollisionDetection.capsuleVsSphere(capsule, sphere);\n}\n\nexport {\n  sphereVsPoint,\n  sphereVsSphere,\n  sphereVsAabb,\n  sphereVsObb,\n  sphereVsCapsule,\n};\n","import * as aabbContactCalculation from './src/aabb-contact-calculation';\nimport * as capsuleContactCalculation from './src/capsule-contact-calculation';\nimport * as obbContactCalculation from './src/obb-contact-calculation';\nimport * as sphereContactCalculation from './src/sphere-contact-calculation';\n\nexport {\n  aabbContactCalculation,\n  capsuleContactCalculation,\n  obbContactCalculation,\n  sphereContactCalculation,\n};\n","/**\n * This module defines utility methods for calculating a contact point between axially-aligned \n * bounding boxes and other shapes.\n *\n * - Each of these functions assumes that the objects are actually colliding.\n * - The resulting contact point may be anywhere within the intersection of the two objects.\n */\n\nimport * as sphereContactCalculation from './sphere-contact-calculation';\nimport * as obbContactCalculation from './obb-contact-calculation';\nimport * as capsuleContactCalculation from './capsule-contact-calculation';\nimport {tmpVec1} from '../../../util';\nimport {aabbCollisionDetection} from '../../collision-detection';\n\n/**\n * @param {vec3} contactPoint Output param.\n * @param {vec3} contactNormal Output param.\n * @param {Aabb} aabb\n * @param {vec3} point\n */\nfunction aabbVsPoint(contactPoint, contactNormal, aabb, point) {\n  vec3.copy(contactPoint, point);\n  findAabbNormalFromContactPoint(contactNormal, contactPoint, aabb);\n}\n\n/**\n * @param {vec3} contactPoint Output param.\n * @param {vec3} contactNormal Output param.\n * @param {Aabb} aabb\n * @param {Sphere} sphere\n */\nfunction aabbVsSphere(contactPoint, contactNormal, aabb, sphere) {\n  sphereContactCalculation.sphereVsAabb(contactPoint, contactNormal, sphere, aabb);\n  vec3.negate(contactNormal, contactNormal);\n}\n\n/**\n * @param {vec3} contactPoint Output param.\n * @param {vec3} contactNormal Output param.\n * @param {Aabb} aabbA\n * @param {Aabb} aabbB\n */\nfunction aabbVsAabb(contactPoint, contactNormal, aabbA, aabbB) {\n  // Compute the contact normal.\n  vec3.set(contactNormal, 0, 0, 0);\n  const xIntersectionDepth = Math.min(aabbA.maxX - aabbB.minX, aabbB.maxX - aabbA.minX);\n  const yIntersectionDepth = Math.min(aabbA.maxY - aabbB.minY, aabbB.maxY - aabbA.minY);\n  const zIntersectionDepth = Math.min(aabbA.maxZ - aabbB.minZ, aabbB.maxZ - aabbA.minZ);\n  // Assume that the direction of intersection corresponds to whichever axis has the shallowest\n  // intersection.\n  if (xIntersectionDepth <= yIntersectionDepth) {\n    if (xIntersectionDepth <= zIntersectionDepth) {\n      contactNormal[0] = aabbA.maxX - aabbB.minX <= aabbB.maxX - aabbA.minX ? 1 : -1;\n    } else {\n      contactNormal[2] = aabbA.maxZ - aabbB.minZ <= aabbB.maxZ - aabbA.minZ ? 1 : -1;\n    }\n  } else {\n    if (yIntersectionDepth <= zIntersectionDepth) {\n      contactNormal[1] = aabbA.maxY - aabbB.minY <= aabbB.maxY - aabbA.minY ? 1 : -1;\n    } else {\n      contactNormal[2] = aabbA.maxZ - aabbB.minZ <= aabbB.maxZ - aabbA.minZ ? 1 : -1;\n    }\n  }\n\n  // TODO: The two AABBs form a square intersection cross-section region along the direction of the\n  // normal. Calculate the center of that square to use as the point of contact.\n  if (!aabbA.someVertex(vertex => aabbCollisionDetection.aabbVsPoint(aabbB, vertex),\n          contactPoint)) {\n    aabbB.someVertex(vertex => aabbCollisionDetection.aabbVsPoint(aabbA, vertex), contactPoint);\n  }\n}\n\n/**\n * @param {vec3} contactPoint Output param.\n * @param {vec3} contactNormal Output param.\n * @param {Aabb} aabb\n * @param {Obb} obb\n */\nfunction aabbVsObb(contactPoint, contactNormal, aabb, obb) {\n  obbContactCalculation.obbVsAabb(contactPoint, contactNormal, obb, aabb);\n  vec3.negate(contactNormal, contactNormal);\n}\n\n/**\n * @param {vec3} contactPoint Output param.\n * @param {vec3} contactNormal Output param.\n * @param {Aabb} aabb\n * @param {Capsule} capsule\n */\nfunction aabbVsCapsule(contactPoint, contactNormal, aabb, capsule) {\n  capsuleContactCalculation.capsuleVsAabb(contactPoint, contactNormal, capsule, aabb);\n  vec3.negate(contactNormal, contactNormal);\n}\n\n/**\n * @param {vec3} contactNormal Output param.\n * @param {vec3} contactPoint\n * @param {Aabb} aabb\n * @private\n */\nfunction findAabbNormalFromContactPoint(contactNormal, contactPoint, aabb) {\n  vec3.set(contactNormal, 0, 0, 0);\n  vec3.subtract(tmpVec1, contactPoint, aabb.centerOfVolume);\n  const xDistanceFromFace = aabb.rangeX / 2 - Math.abs(tmpVec1[0]);\n  const yDistanceFromFace = aabb.rangeY / 2 - Math.abs(tmpVec1[1]);\n  const zDistanceFromFace = aabb.rangeZ / 2 - Math.abs(tmpVec1[2]);\n  // Assume that the point is contacting whichever face it's closest to.\n  if (xDistanceFromFace <= yDistanceFromFace) {\n    if (xDistanceFromFace <= zDistanceFromFace) {\n      contactNormal[0] = tmpVec1[0] > 0 ? 1 : -1;\n    } else {\n      contactNormal[2] = tmpVec1[2] > 0 ? 1 : -1;\n    }\n  } else {\n    if (yDistanceFromFace <= zDistanceFromFace) {\n      contactNormal[1] = tmpVec1[1] > 0 ? 1 : -1;\n    } else {\n      contactNormal[2] = tmpVec1[2] > 0 ? 1 : -1;\n    }\n  }\n}\n\nexport {\n  aabbVsPoint,\n  aabbVsSphere,\n  aabbVsAabb,\n  aabbVsObb,\n  aabbVsCapsule,\n  findAabbNormalFromContactPoint,\n};\n","/**\n * This module defines utility methods for calculating a contact point between capsules and other \n * shapes.\n *\n * - Each of these functions assumes that the objects are actually colliding.\n * - The resulting contact point may be anywhere within the intersection of the two objects.\n */\n\nimport {\n  findClosestPointFromAabbToPoint,\n  findClosestPointOnSegmentToPoint,\n  findClosestPointsFromSegmentToSegment,\n  tmpVec1,\n  tmpVec2\n} from '../../../util';\nimport * as obbContactCalculation from './obb-contact-calculation';\n\n/**\n * @param {vec3} contactPoint Output param.\n * @param {vec3} contactNormal Output param.\n * @param {Capsule} capsule\n * @param {vec3} point\n */\nfunction capsuleVsPoint(contactPoint, contactNormal, capsule, point) {\n  vec3.copy(contactPoint, point);\n  findClosestPointOnSegmentToPoint(contactNormal, capsule.segment, point);\n  vec3.subtract(contactNormal, contactPoint, contactNormal);\n  vec3.normalize(contactNormal, contactNormal);\n}\n\n/**\n * Finds the closest point on the surface of the capsule to the sphere center.\n *\n * @param {vec3} contactPoint Output param.\n * @param {vec3} contactNormal Output param.\n * @param {Capsule} capsule\n * @param {Sphere} sphere\n */\nfunction capsuleVsSphere(contactPoint, contactNormal, capsule, sphere) {\n  const sphereCenter = sphere.centerOfVolume;\n  findClosestPointOnSegmentToPoint(contactPoint, capsule.segment, sphereCenter);\n  vec3.subtract(contactNormal, sphereCenter, contactPoint);\n  vec3.normalize(contactNormal, contactNormal);\n  vec3.scaleAndAdd(contactPoint, contactPoint, contactNormal, capsule.radius);\n}\n\n/**\n * Finds the closest point on the surface of the capsule to the AABB.\n *\n * NOTE: This implementation cheats by checking whether vertices from one shape lie within the\n * other. Due to the tunnelling problem, it is possible that intersection occurs without any\n * vertices lying within the other shape. However, (A) this is unlikely, and (B) we are ignoring the\n * tunnelling problem for the rest of this collision system anyway.\n *\n * @param {vec3} contactPoint Output param.\n * @param {vec3} contactNormal Output param.\n * @param {Capsule} capsule\n * @param {Aabb} aabb\n */\nfunction capsuleVsAabb(contactPoint, contactNormal, capsule, aabb) {\n  // tmpVec1 represents the closest point on the capsule to the AABB. tmpVec2\n  // represents the closest point on the AABB to the capsule.\n\n  //\n  // Check whether the two capsule ends intersect the AABB (sphere vs AABB) (addresses the\n  // capsule-vs-AABB-face case).\n  //\n\n  const squaredRadius = capsule.radius * capsule.radius;\n  let doesAabbIntersectAnEndPoint = false;\n\n  let endPoint = capsule.segment.start;\n  findClosestPointFromAabbToPoint(tmpVec2, aabb, endPoint);\n  if (vec3.squaredDistance(tmpVec2, endPoint) <= squaredRadius) {\n    doesAabbIntersectAnEndPoint = true;\n  } else {\n    endPoint = capsule.segment.end;\n    findClosestPointFromAabbToPoint(tmpVec2, aabb, endPoint);\n    if (vec3.squaredDistance(tmpVec2, endPoint) <= squaredRadius) {\n      doesAabbIntersectAnEndPoint = true;\n    }\n  }\n\n  if (!doesAabbIntersectAnEndPoint) {\n    //\n    // Check whether the capsule intersects with any AABB edge (addresses the capsule-vs-AABB-edge\n    // case).\n    //\n    aabb.someEdge(edge => {\n      findClosestPointsFromSegmentToSegment(tmpVec1, tmpVec2,\n          capsule.segment, edge);\n      const distance = vec3.squaredDistance(tmpVec1, tmpVec2);\n      return distance <= squaredRadius;\n    });\n  }\n\n  // (The capsule-vs-AABB-vertex case is covered by the capsule-vs-AABB-edge case).\n\n  findClosestPointOnSegmentToPoint(tmpVec1, capsule.segment, tmpVec2);\n  vec3.subtract(contactNormal, tmpVec2, tmpVec1);\n  vec3.normalize(contactNormal, contactNormal);\n  vec3.scaleAndAdd(contactPoint, tmpVec1, contactNormal, capsule.radius);\n}\n\n/**\n * @param {vec3} contactPoint Output param.\n * @param {vec3} contactNormal Output param.\n * @param {Capsule} capsule\n * @param {Obb} obb\n */\nfunction capsuleVsObb(contactPoint, contactNormal, capsule, obb) {\n  obbContactCalculation.obbVsCapsule(contactPoint, contactNormal, obb, capsule);\n  vec3.negate(contactNormal, contactNormal);\n}\n\n/**\n * Finds the closest point on the surface of capsule A to capsule B.\n *\n * @param {vec3} contactPoint Output param.\n * @param {vec3} contactNormal Output param.\n * @param {Capsule} capsuleA\n * @param {Capsule} capsuleB\n */\nfunction capsuleVsCapsule(contactPoint, contactNormal, capsuleA, capsuleB) {\n  findClosestPointsFromSegmentToSegment(tmpVec1, tmpVec2,\n      capsuleA.segment, capsuleB.segment);\n  vec3.subtract(contactNormal, tmpVec2, tmpVec1);\n  vec3.normalize(contactNormal, contactNormal);\n  vec3.scaleAndAdd(contactPoint, tmpVec1, contactNormal, capsuleA.radius);\n}\n\nexport {\n  capsuleVsPoint,\n  capsuleVsSphere,\n  capsuleVsAabb,\n  capsuleVsObb,\n  capsuleVsCapsule,\n};\n","/**\n * This module defines utility methods for calculating a contact point between oriented bounding\n * boxes and other shapes.\n *\n * - Each of these functions assumes that the objects are actually colliding.\n * - The resulting contact point may be anywhere within the intersection of the two objects.\n */\n\nimport {\n  findPoiBetweenSegmentAndPlaneRegion,\n  findClosestPointFromObbToPoint,\n  findSquaredDistanceBetweenSegments,\n  findClosestPointsFromSegmentToSegment,\n  tmpVec1\n} from '../../../util';\nimport {aabbCollisionDetection, obbCollisionDetection} from '../../collision-detection';\nimport {LineSegment} from '../../collidables';\nimport * as aabbContactCalculation from './aabb-contact-calculation';\n\n// TODO: There are more efficient (but far more complicated) algorithms for finding the point of\n// intersection with OBBs. Port over some other pre-existing solutions for these.\n\n/**\n * @param {vec3} contactPoint Output param.\n * @param {vec3} contactNormal Output param.\n * @param {Obb} obb\n * @param {vec3} point\n */\nfunction obbVsPoint(contactPoint, contactNormal, obb, point) {\n  vec3.copy(contactPoint, point);\n  findObbNormalFromContactPoint(contactNormal, contactPoint, obb);\n}\n\n/**\n * Finds the closest point anywhere inside the OBB to the center of the sphere.\n *\n * @param {vec3} contactPoint Output param.\n * @param {vec3} contactNormal Output param.\n * @param {Obb} obb\n * @param {Sphere} sphere\n */\nfunction obbVsSphere(contactPoint, contactNormal, obb, sphere) {\n  findClosestPointFromObbToPoint(contactPoint, obb, sphere.centerOfVolume);\n  vec3.subtract(contactNormal, sphere.centerOfVolume, contactPoint);\n  vec3.normalize(contactNormal, contactNormal);\n}\n\n/**\n * NOTE: This implementation cheats by checking whether vertices from one shape lie within the\n * other. Due to the tunnelling problem, it is possible that intersection occurs without any\n * vertices lying within the other shape. However, (A) this is unlikely, and (B) we are ignoring the\n * tunnelling problem for the rest of this collision system anyway.\n *\n * @param {vec3} contactPoint Output param.\n * @param {vec3} contactNormal Output param.\n * @param {Obb} obb\n * @param {Aabb} aabb\n */\nfunction obbVsAabb(contactPoint, contactNormal, obb, aabb) {\n  return _obbVsBoxHelper(contactPoint, contactNormal, obb, aabb, aabbCollisionDetection.aabbVsPoint,\n      aabbContactCalculation.findAabbNormalFromContactPoint);\n}\n\n/**\n * NOTE: This implementation cheats by checking whether vertices from one shape lie within the\n * other. Due to the tunnelling problem, it is possible that intersection occurs without any\n * vertices lying within the other shape. However, (A) this is unlikely, and (B) we are ignoring the\n * tunnelling problem for the rest of this collision system anyway.\n *\n * @param {vec3} contactPoint Output param.\n * @param {vec3} contactNormal Output param.\n * @param {Obb} obbA\n * @param {Obb} obbB\n */\nfunction obbVsObb(contactPoint, contactNormal, obbA, obbB) {\n  return _obbVsBoxHelper(contactPoint, contactNormal, obbA, obbB, obbCollisionDetection.obbVsPoint,\n      findObbNormalFromContactPoint);\n}\n\n/**\n * @param {vec3} contactPoint Output param.\n * @param {vec3} contactNormal Output param.\n * @param {Obb} obb\n * @param {Obb|Aabb} other\n * @param {Function} otherVsPointCollisionDetectionCallback\n * @param {Function} findOtherNormalFromContactPoint\n * @private\n */\nfunction _obbVsBoxHelper(contactPoint, contactNormal, obb, other,\n                         otherVsPointCollisionDetectionCallback,\n                         findOtherNormalFromContactPoint) {\n  // Check whether any vertices from A lie within B's bounds.\n  if (obb.someVertex(vertex => otherVsPointCollisionDetectionCallback(other, vertex),\n          contactPoint)) {\n    findOtherNormalFromContactPoint(contactNormal, contactPoint, other);\n    vec3.negate(contactNormal, contactNormal);\n    return;\n  }\n\n  // Check whether any vertices from B lie within A's bounds.\n  if (other.someVertex(vertex => obbCollisionDetection.obbVsPoint(obb, vertex), contactPoint)) {\n    findObbNormalFromContactPoint(contactNormal, contactPoint, obb);\n    return;\n  }\n\n  // We assume that a vertex-to-face collision would have been detected by one of the two above\n  // checks. Any edge-to-edge collision must involve both an edge from A through a face of B and\n  // vice versa. So it is sufficient to only check the edges of one and the faces of the other.\n  other.someEdge(edge =>\n      obb.someFace(face => findPoiBetweenSegmentAndPlaneRegion(contactPoint, edge, ...face)));\n  findObbNormalFromContactPoint(contactNormal, contactPoint, obb);\n}\n\n/**\n * @param {vec3} contactPoint Output param.\n * @param {vec3} contactNormal Output param.\n * @param {Obb} obb\n * @param {Capsule} capsule\n */\nfunction obbVsCapsule(contactPoint, contactNormal, obb, capsule) {\n  // tmpVec1 is the point on the capsule segment that is closest to the OBB.\n\n  //\n  // Check the edges.\n  //\n\n  const segment = new LineSegment(vec3.create(), vec3.create());\n  const squaredRadius = capsule.radius * capsule.radius;\n  const areIntersecting = obb.someEdge(edge =>\n      findSquaredDistanceBetweenSegments(capsule.segment, edge) < squaredRadius, segment);\n\n  if (areIntersecting) {\n    findClosestPointsFromSegmentToSegment(tmpVec1, contactPoint, capsule.segment, segment);\n    vec3.subtract(contactNormal, tmpVec1, contactPoint);\n    vec3.normalize(contactNormal, contactNormal);\n    return;\n  }\n\n  //\n  // Check the faces.\n  //\n\n  obb.somePushedOutFace(face =>\n      findPoiBetweenSegmentAndPlaneRegion(tmpVec1, capsule.segment, ...face), capsule.radius);\n\n  findObbNormalFromContactPoint(contactNormal, tmpVec1, obb);\n\n  // NOTE: This assumes that the angle between the capsule segment and the face plane is not oblique\n  // and that the depth of penetration is shallow. When both of these conditions are not true, the\n  // contact point will be offset from the intersection point on the pushed-out face.\n  vec3.scaleAndAdd(contactPoint, tmpVec1, contactNormal, -capsule.radius);\n}\n\n/**\n * @param {vec3} contactNormal Output param.\n * @param {vec3} contactPoint\n * @param {Obb} obb\n * @private\n */\nfunction findObbNormalFromContactPoint(contactNormal, contactPoint, obb) {\n  // Calculate the displacement along each axis.\n  const projections = [];\n  vec3.subtract(tmpVec1, contactPoint, obb.centerOfVolume);\n  for (let i = 0; i < 3; i++) {\n    projections[i] = vec3.dot(obb.axes[i], tmpVec1);\n  }\n\n  // Determine which face the normal is pointing away from.\n  vec3.set(contactNormal, 0, 0, 0);\n  const xDistanceFromFace = obb.halfSideLengths[0] - Math.abs(projections[0]);\n  const yDistanceFromFace = obb.halfSideLengths[1] - Math.abs(projections[1]);\n  const zDistanceFromFace = obb.halfSideLengths[2] - Math.abs(projections[2]);\n  // Assume that the point is contacting whichever face it's closest to.\n  if (xDistanceFromFace <= yDistanceFromFace) {\n    if (xDistanceFromFace <= zDistanceFromFace) {\n      contactNormal[0] = projections[0] > 0 ? 1 : -1;\n    } else {\n      contactNormal[2] = projections[2] > 0 ? 1 : -1;\n    }\n  } else {\n    if (yDistanceFromFace <= zDistanceFromFace) {\n      contactNormal[1] = projections[1] > 0 ? 1 : -1;\n    } else {\n      contactNormal[2] = projections[2] > 0 ? 1 : -1;\n    }\n  }\n\n  // Apply the OBB's orientation to the normal.\n  vec3.transformQuat(contactNormal, contactNormal, obb.orientation);\n}\n\nexport {\n  obbVsPoint,\n  obbVsSphere,\n  obbVsAabb,\n  obbVsObb,\n  obbVsCapsule,\n  findObbNormalFromContactPoint,\n};\n","/**\n * This module defines utility methods for calculating a contact point between spheres and other\n * shapes.\n *\n * - Each of these functions assumes that the objects are actually colliding.\n * - The resulting contact point may be anywhere within the intersection of the two objects.\n */\n\nimport {findClosestPointFromAabbSurfaceToPoint} from '../../../util';\nimport {findAabbNormalFromContactPoint} from './aabb-contact-calculation';\nimport * as obbContactCalculation from './obb-contact-calculation';\nimport * as capsuleContactCalculation from './capsule-contact-calculation';\n\n/**\n * @param {vec3} contactPoint Output param.\n * @param {vec3} contactNormal Output param.\n * @param {Sphere} sphere\n * @param {vec3} point\n */\nfunction sphereVsPoint(contactPoint, contactNormal, sphere, point) {\n  vec3.copy(contactPoint, point);\n  // Assume that the point is contacting the closest point on the surface of the sphere.\n  vec3.subtract(contactNormal, point, sphere.centerOfVolume);\n  vec3.normalize(contactNormal, contactNormal);\n}\n\n/**\n * @param {vec3} contactPoint Output param.\n * @param {vec3} contactNormal Output param.\n * @param {Sphere} sphereA\n * @param {Sphere} sphereB\n */\nfunction sphereVsSphere(contactPoint, contactNormal, sphereA, sphereB) {\n  vec3.subtract(contactNormal, sphereB.centerOfVolume, sphereA.centerOfVolume);\n  vec3.normalize(contactNormal, contactNormal);\n  // The point on the surface of sphere A that is closest to the center of sphere B.\n  vec3.scaleAndAdd(contactPoint, sphereA.centerOfVolume, contactNormal, sphereA.radius);\n}\n\n/**\n * Finds the closest point on the surface of the AABB to the sphere center.\n *\n * @param {vec3} contactPoint Output param.\n * @param {vec3} contactNormal Output param.\n * @param {Sphere} sphere\n * @param {Aabb} aabb\n */\nfunction sphereVsAabb(contactPoint, contactNormal, sphere, aabb) {\n  findClosestPointFromAabbSurfaceToPoint(contactPoint, aabb, sphere.centerOfVolume);\n  findAabbNormalFromContactPoint(contactNormal, contactPoint, aabb);\n  vec3.negate(contactNormal, contactNormal);\n}\n\n/**\n * @param {vec3} contactPoint Output param.\n * @param {vec3} contactNormal Output param.\n * @param {Sphere} sphere\n * @param {Obb} obb\n */\nfunction sphereVsObb(contactPoint, contactNormal, sphere, obb) {\n  obbContactCalculation.obbVsSphere(contactPoint, contactNormal, obb, sphere);\n  vec3.negate(contactNormal, contactNormal);\n}\n\n/**\n * @param {vec3} contactPoint Output param.\n * @param {vec3} contactNormal Output param.\n * @param {Sphere} sphere\n * @param {Capsule} capsule\n */\nfunction sphereVsCapsule(contactPoint, contactNormal, sphere, capsule) {\n  capsuleContactCalculation.capsuleVsSphere(contactPoint, contactNormal, capsule, sphere);\n  vec3.negate(contactNormal, contactNormal);\n}\n\nexport {\n  sphereVsPoint,\n  sphereVsSphere,\n  sphereVsAabb,\n  sphereVsObb,\n  sphereVsCapsule,\n};\n","export * from './collidables';\nexport * from './collision-detection';\nexport * from './contact-calculation';\n\nexport * from './src/collidable-factories';\nexport * from './src/collidable-physics-job';\nexport * from './src/collidable-store';\nexport * from './src/collision-handler';\nexport * from './src/collision-utils';\n","/**\n * This module defines a set of factory functions for creating Collidable instances.\n */\n\nimport {\n  Capsule,\n  Obb,\n  Sphere\n} from '../collidables';\nimport {_geometry} from '../../util';\n\n/**\n * @param {CollidableShapeConfig} params\n * @param {CollidablePhysicsJob} [physicsJob]\n * @returns {Collidable}\n */\nfunction createCollidableFromRenderableShape(params, physicsJob) {\n  return _collidableCreators[params.collidableShapeId](params, physicsJob);\n}\n\n/**\n * This assumes the base RenderableShape has a side length of one unit.\n *\n * @param {CollidableShapeConfig} params\n * @param {CollidablePhysicsJob} [physicsJob]\n * @returns {Collidable}\n */\nfunction createObbFromRenderableShape(params, physicsJob) {\n  const halfRangeX = params.scale[0] / 2;\n  const halfRangeY = params.scale[1] / 2;\n  const halfRangeZ = params.scale[2] / 2;\n  return new Obb(halfRangeX, halfRangeY, halfRangeZ, params.isStationary, physicsJob);\n}\n\n/**\n * This assumes the base RenderableShape has a \"radius\" of one unit.\n *\n * @param {CollidableShapeConfig} params\n * @param {CollidablePhysicsJob} [physicsJob]\n * @returns {Collidable}\n */\nfunction createSphereFromRenderableShape(params, physicsJob) {\n  const radius = params.radius || vec3.length(params.scale) / Math.sqrt(3);\n  return new Sphere(0, 0, 0, radius, params.isStationary, physicsJob);\n}\n\n/**\n * The radius of the created capsule will be an average from the two shortest sides.\n *\n * There are two modes: either we use scale, or we use radius and capsuleEndPointsDistance.\n *\n * @param {CollidableShapeConfig} params\n * @param {CollidablePhysicsJob} [physicsJob]\n * @returns {Collidable}\n */\nfunction createCapsuleFromRenderableShape(params, physicsJob) {\n  const scale = params.scale;\n  const capsuleEndPointsDistance = params.capsuleEndPointsDistance;\n  const isStationary = params.isStationary;\n  let radius = params.radius;\n\n  let halfDistance;\n\n  // There are two modes: either we use scale, or we use radius and capsuleEndPointsDistance.\n  if (typeof radius === 'number' && typeof capsuleEndPointsDistance === 'number') {\n    halfDistance = capsuleEndPointsDistance / 2;\n  } else {\n    const copy = vec3.clone(scale);\n    copy.sort();\n\n    const length = copy[2];\n    radius = (copy[0] + copy[1]) / 2;\n    halfDistance = length / 2 - radius;\n  }\n\n  const orientation = quat.create();\n  if (scale[0] > scale[1]) {\n    if (scale[0] > scale[2]) {\n      vec3.rotateY(orientation, orientation, _geometry.HALF_PI);\n    } else {\n      // Do nothing; the capsule defaults to being aligned with the z-axis.\n    }\n  } else {\n    if (scale[1] > scale[2]) {\n      vec3.rotateX(orientation, orientation, -_geometry.HALF_PI);\n    } else {\n      // Do nothing; the capsule defaults to being aligned with the z-axis.\n    }\n  }\n\n  const capsule = new Capsule(halfDistance, radius, isStationary, physicsJob);\n  capsule.orientation = orientation;\n\n  return capsule;\n}\n\n/**\n * @param {CollidableShapeConfig} params\n * @param {CollidablePhysicsJob} [physicsJob]\n * @returns {Collidable}\n */\nfunction createSphereOrCapsuleFromRenderableShape(params, physicsJob) {\n  const scale = params.scale;\n  const radius = params.radius;\n  const capsuleEndPointsDistance = params.capsuleEndPointsDistance;\n\n  const halfLengthX = scale[0] * radius;\n  const halfLengthY = scale[1] * radius;\n  const halfLengthZ = scale[2] * (radius + capsuleEndPointsDistance) / 2;\n\n  const minLength = Math.min(Math.min(halfLengthX, halfLengthY), halfLengthZ);\n  const maxLength = Math.max(Math.max(halfLengthX, halfLengthY), halfLengthZ);\n\n  if (maxLength / minLength >= _SPHERE_VS_CAPSULE_ASPECT_RATIO_THRESHOLD) {\n    return createCapsuleFromRenderableShape(params, physicsJob);\n  } else {\n    return createSphereFromRenderableShape(params, physicsJob);\n  }\n}\n\nconst _SPHERE_VS_CAPSULE_ASPECT_RATIO_THRESHOLD = 2;\n\nconst _collidableCreators = {\n  'CUBE': createObbFromRenderableShape,\n  'SPHERE_OR_CAPSULE': createSphereOrCapsuleFromRenderableShape,\n  'SPHERE': createSphereFromRenderableShape,\n  'CAPSULE': createCapsuleFromRenderableShape,\n};\n\nexport {\n  createCapsuleFromRenderableShape,\n  createCollidableFromRenderableShape,\n  createObbFromRenderableShape,\n  createSphereFromRenderableShape,\n  createSphereOrCapsuleFromRenderableShape,\n};\n\n/**\n * @typedef {Object} CollidableShapeConfig\n * @property {string} collidableShapeId The ID of the type of collidable shape.\n * @property {vec3} [scale]\n * @property {boolean} [isStationary=false] Whether the collidable is fixed in place.\n */\n\n/**\n * @typedef {CollidableShapeConfig} SphericalCollidableShapeParams\n * @property {number} radius\n */\n\n/**\n * @typedef {SphericalCollidableShapeParams} CapsuleCollidableShapeParams\n * @property {number} capsuleEndPointsDistance The distance between the centers of the spheres on either end\n * of the capsule.\n */\n","import {createCollidableFromRenderableShape} from './collidable-factories';\nimport {collidableStore} from './collidable-store';\nimport {PhysicsJob} from '../../src/physics-job';\nimport {createForCollidable} from '../../util';\n\n/**\n * A CollidablePhysicsJob extends the standard PhysicsJob with a collidable geometry.\n */\nclass CollidablePhysicsJob extends PhysicsJob {\n  /**\n   * @param {CollidableShapeConfig} collidableParams\n   * @param {PhysicsState} state\n   * @param {Array.<ForceApplier>} forceAppliers\n   * @param {Object} controller\n   * @param {CollisionHandler} collisionHandler\n   */\n  constructor(collidableParams, state, forceAppliers, controller, collisionHandler) {\n    super(forceAppliers, state);\n\n    collidableParams.scale = collidableParams.scale || vec3.fromValues(1, 1, 1);\n    this.collidable = createCollidableFromRenderableShape(collidableParams, this);\n    this.currentState.unrotatedInertiaTensor =\n        createForCollidable(this.collidable, this.currentState.mass);\n    this.currentState.updateDependentFields();\n    this.isAtRest = false;\n    this.controller = controller;\n    this._collisionHandler = collisionHandler;\n  }\n\n  /**\n   * @param {ForceApplier} forceApplier\n   */\n  addForceApplier(forceApplier) {\n    super.addForceApplier(forceApplier);\n    this.isAtRest = false;\n  }\n\n  /**\n   * @param {ForceApplier} forceApplier\n   */\n  removeForceApplier(forceApplier) {\n    super.removeForceApplier(forceApplier);\n    this.isAtRest = false;\n  }\n\n  /**\n   * This callback is triggered in response to a collision.\n   *\n   * @param {Collision} collision\n   * @returns {boolean} True if this needs the standard collision restitution to proceed.\n   */\n  handleCollision(collision) {\n    return this._collisionHandler(collision);\n  }\n\n  /**\n   * @param {number} [startTime]\n   * @override\n   */\n  start(startTime) {\n    super.start(startTime);\n    collidableStore.registerCollidable(this.collidable);\n  }\n\n  /**\n   * @override\n   */\n  finish() {\n    super.finish();\n    collidableStore.unregisterCollidable(this.collidable);\n  }\n\n  /** @returns {vec3} */\n  get position() {\n    return this.currentState.position;\n  }\n\n  /** @param {vec3} value */\n  set position(value) {\n    this.currentState.position = vec3.clone(value);\n    this.collidable.position = vec3.clone(value);\n  }\n}\n\nexport {CollidablePhysicsJob};\n\n/**\n * @typedef {Function} CollisionHandler\n * @param {Collision} collision\n * @returns {boolean} True if this needs the standard collision restitution to proceed.\n */\n","import {detectBoundingVolumeIntersection} from './collision-utils';\n\n// TODO: Implement some form of bounding volume hierarchy to make searching for potential collisions\n// more efficient.\n\n/**\n * This class registers and retrieves all Collidables within a scene.\n */\nclass CollidableStore {\n  constructor() {\n    this._collidables = [];\n  }\n\n  /**\n   * Caches the given program wrapper.\n   *\n   * This method is idempotent; a given program will only be cached once.\n   *\n   * @param {Collidable} collidable\n   */\n  registerCollidable(collidable) {\n    this._collidables.push(collidable);\n  }\n\n  /**\n   * @param {Collidable} collidable\n   */\n  unregisterCollidable(collidable) {\n    const index = this._collidables.indexOf(collidable);\n    if (index >= 0) {\n      this._collidables.splice(index, 1);\n    }\n  }\n\n  /**\n   * @param {Collidable} collidable\n   * @returns {Array.<Collidable>}\n   */\n  getPossibleCollisionsForCollidable(collidable) {\n    return this._collidables.filter(other =>\n      collidable !== other &&\n      detectBoundingVolumeIntersection(collidable, other));\n  }\n\n  /**\n   * @returns {Array.<Collision>}\n   */\n  getPossibleCollisionsForAllCollidables() {\n    const result = [];\n    for (let i = 0, count = this._collidables.length; i < count; i++) {\n      const collidableA = this._collidables[i];\n      for (let j = i + 1; j < count; j++) {\n        const collidableB = this._collidables[j];\n        if (detectBoundingVolumeIntersection(collidableA, collidableB)) {\n          result.push({collidableA: collidableA, collidableB: collidableB});\n        }\n      }\n    }\n    return result;\n  }\n\n  /**\n   * @param {Function} callback\n   */\n  forEach(callback) {\n    this._collidables.forEach(callback);\n  }\n}\n\nconst collidableStore = new CollidableStore();\nexport {collidableStore};\n\n/**\n * @typedef {Object} Collision\n * @property {Collidable} collidableA\n * @property {Collidable} collidableB\n * @property {vec3} [contactPoint] In world coordinates.\n * @property {vec3} [contactNormal] Points away from body A and toward body B.\n * @property {number} [time]\n */\n","import {\n  areVec3sClose,\n  tmpVec1,\n  tmpVec2,\n  tmpVec3,\n  tmpVec4,\n} from '../../util';\n\nimport {collidableStore} from './collidable-store';\nimport {detectIntersection, calculateContact} from './collision-utils';\n\n/**\n * This module defines a collision pipeline.\n *\n * These functions will detect collisions between collidable bodies and update their momenta in\n * response to the collisions.\n *\n * - Consists of an efficient broad-phase collision detection step followed by a precise\n *   narrow-phase step.\n * - Calculates the position, surface normal, and time of each contact.\n * - Calculates the impulse of a collision and updates the bodies' linear and angular momenta in\n *   response.\n * - Applies Coulomb friction to colliding bodies.\n * - Sub-divides the time step to more precisely determine when and where a collision occurs.\n * - Supports multiple collisions with a single body in a single time step.\n * - Efficiently supports bodies coming to rest against each other.\n * - Bodies will never penetrate one another.\n * - This does not address the tunnelling problem. That is, it is possible for two fast-moving\n *   bodies to pass through each other as long as they did not intersect each other during any time\n *   step.\n * - This only supports collisions between certain types of shapes. Fortunately, this set provides\n *   reasonable approximations for most other shapes. The supported types of shapes are: spheres,\n *   capsules, AABBs, and OBBs.\n *\n * ## Objects that come to rest\n *\n * An important efficiency improvement is to not process objects through the physics engine pipeline\n * after they have come to rest. The isAtRest field indicates when a body has come to rest.\n *\n * isAtRest is set to true after a physics frame is finished if the collisions, forces, position,\n * and orientation of a job have not changed from the previous to the current state.\n *\n * isAtRest is set to false from two possible events: after a physics frame is finished if the\n * collisions have changed from the previous to the current state, or when a force is added to\n * removed from the job.\n *\n * ## Collision calculations do not consider velocity\n *\n * Collision detection works by waiting until two bodies intersect. However, because time frames are\n * not infinitely small, when an intersection is detected, it's already past the exact instance of\n * collision. To alleviate problems from this, the velocity of each body can be considered when\n * calculating the collision time, position, and contact normal. However, taking velocity into\n * account makes the contact calculations much more complex, so we do not consider velocity in our\n * calculations.\n *\n * A notable consequence of this is that the calculated contact normals can be incorrect. Consider\n * the following moving squares. At time t2 they are found to have collided. The calculated contact\n * point will be somewhere within the intersection of the corners. But the calculated contact normal\n * will point upwards, while the true contact normal should point to the right. This is because the\n * contact calculations do not consider velocity and instead only consider the shallowest direction\n * of overlap.\n *\n * // Time t1\n *                    +------------+\n *                    |            |\n *                    |            |\n *                <-- |      B     |\n *                    |            |\n *  +------------+    |            |\n *  |            |    +------------+\n *  |            |\n *  |      A     | -->\n *  |            |\n *  |            |\n *  +------------+\n *\n * // Time t2\n *         +------------+\n *         |            |\n *         |            |\n *         |      B     |\n *         |            |\n *  +------------+      |\n *  |      +-----|------+\n *  |            |\n *  |      A     |\n *  |            |\n *  |            |\n *  +------------+\n */\n\n/**\n * Detect and handle any collisions between a given job and all other collidable bodies.\n *\n * @param {CollidablePhysicsJob} job\n * @param {DOMHighResTimeStamp} elapsedTime\n * @param {PhysicsConfig} physicsParams\n */\nfunction handleCollisionsForJob(job, elapsedTime, physicsParams) {\n  const collidable = job.collidable;\n\n  // Clear any previous collision info.\n  collidable.previousCollisions = collidable.collisions;\n  collidable.collisions = [];\n\n  // Find all colliding collidables.\n  const collidingCollidables = findIntersectingCollidablesForCollidable(collidable);\n\n  // Store the time of collision for each collision.\n  const collisions = _recordCollisions(collidable, collidingCollidables, elapsedTime);\n\n  // Calculate the points of contact for each collision.\n  _calculatePointsOfContact(collisions);\n\n  // Collision resolution.\n  _resolveCollisions(collisions, physicsParams);\n}\n\n/**\n * Finds all other collidables that intersect with the given collidable.\n *\n * @param {Collidable} collidable\n * @returns {Array.<Collidable>}\n */\nfunction findIntersectingCollidablesForCollidable(collidable) {\n  // Broad-phase collision detection (pairs whose bounding volumes intersect).\n  const collidingCollidables = collidableStore.getPossibleCollisionsForCollidable(collidable);\n\n  // Narrow-phase collision detection (pairs that actually intersect).\n  return _detectPreciseCollisionsFromCollidingCollidables(collidable, collidingCollidables);\n}\n\n/**\n * @param {Array.<CollidablePhysicsJob>} jobs\n */\nfunction determineJobsAtRest(jobs) {\n  jobs.forEach(job => job.isAtRest = _isJobAtRest(job));\n}\n\nfunction recordOldCollisionsForDevModeForAllCollidables() {\n  collidableStore.forEach(_recordOldCollisionsForDevModeForCollidable);\n}\n\n/**\n * Logs a warning message for any pair of objects that intersect.\n */\nfunction checkThatNoObjectsCollide() {\n  // Broad-phase collision detection (pairs whose bounding volumes intersect).\n  let collisions = collidableStore.getPossibleCollisionsForAllCollidables();\n\n  // Narrow-phase collision detection (pairs that actually intersect).\n  collisions = _detectPreciseCollisionsFromCollisions(collisions);\n\n  collisions.forEach(collision => {\n    console.warn('Objects still intersect after collision resolution', collision);\n  });\n}\n\n/**\n * Create collision objects that record the time of collision and the collidables in the collision.\n *\n * Also record references to these collisions on the collidables.\n *\n * @param {Collidable} collidable\n * @param {Array.<Collidable>} collidingCollidables\n * @param {DOMHighResTimeStamp} elapsedTime\n * @returns {Array.<Collision>}\n * @private\n */\nfunction _recordCollisions(collidable, collidingCollidables, elapsedTime) {\n  return collidingCollidables.map(other => {\n    const collision = {\n      collidableA: collidable,\n      collidableB: other,\n      time: elapsedTime\n    };\n\n    // Record the fact that these objects collided (the ModelController may want to handle this).\n    collision.collidableA.collisions.push(collision);\n    collision.collidableB.collisions.push(collision);\n\n    return collision;\n  });\n}\n\n/**\n * Narrow-phase collision detection.\n *\n * Given a list of possible collision pairs, filter out which pairs are actually colliding.\n *\n * @param {Array.<Collision>} collisions\n * @returns {Array.<Collision>}\n * @private\n */\nfunction _detectPreciseCollisionsFromCollisions(collisions) {\n  return collisions.filter(collision => {\n    // TODO:\n    // - Use temporal bisection with discrete sub-time steps to find time of collision (use\n    //       x-vs-y-specific intersection detection methods).\n    // - Make sure the collision object is set up with the \"previousState\" from the sub-step\n    //   before collision and the time from the sub-step after collision (determined from the\n    //   previous temporal bisection search...)\n\n    return detectIntersection(collision.collidableA, collision.collidableB);\n  });\n}\n\n/**\n * Narrow-phase collision detection.\n *\n * Given a list of possible collision pairs, filter out which pairs are actually colliding.\n *\n * @param {Collidable} collidable\n * @param {Array.<Collidable>} collidingCollidables\n * @returns {Array.<Collidable>}\n * @private\n */\nfunction _detectPreciseCollisionsFromCollidingCollidables(collidable, collidingCollidables) {\n  return collidingCollidables.filter(other => {\n    // TODO:\n    // - Use temporal bisection with discrete sub-time steps to find time of collision (use\n    //       x-vs-y-specific intersection detection methods).\n    // - Make sure the collision object is set up with the \"previousState\" from the sub-step\n    //   before collision and the time from the sub-step after collision (determined from the\n    //   previous temporal bisection search...)\n\n    return detectIntersection(collidable, other);\n  });\n}\n\n/**\n * Calculate the intersection position and contact normal of each collision.\n *\n * @param {Array.<Collision>} collisions\n * @private\n */\nfunction _calculatePointsOfContact(collisions) {\n  collisions.forEach(calculateContact);\n}\n\n/**\n * Updates the linear and angular momenta of each body in response to its collision.\n *\n * @param {Array.<Collision>} collisions\n * @param {PhysicsConfig} physicsParams\n * @private\n */\nfunction _resolveCollisions(collisions, physicsParams) {\n  collisions.forEach(collision => {\n    // If neither physics job needs the standard collision restitution, then don't do it.\n    if (_notifyPhysicsJobsOfCollision(collision)) {\n      if (collision.collidableA.physicsJob && collision.collidableB.physicsJob) {\n        // Neither of the collidables is stationary.\n        _resolveCollision(collision, physicsParams);\n      } else {\n        // One of the two collidables is stationary.\n        _resolveCollisionWithStationaryObject(collision, physicsParams);\n      }\n    }\n  });\n}\n\n/**\n * @param {Collision} collision\n * @returns {boolean} True if one of the PhysicsJobs need the standard collision restitution to\n * proceed.\n * @private\n */\nfunction _notifyPhysicsJobsOfCollision(collision) {\n  return collision.collidableA.physicsJob.handleCollision(collision) ||\n      collision.collidableB.physicsJob.handleCollision(collision)\n}\n\n/**\n * Resolve a collision between two moving, physics-based objects.\n *\n * This is based on collision-response algorithms from Wikipedia\n * (https://en.wikipedia.org/wiki/Collision_response#Impulse-based_reaction_model).\n *\n * @param {Collision} collision\n * @param {PhysicsConfig} physicsParams\n * @private\n */\nfunction _resolveCollision(collision, physicsParams) {\n  const collidableA = collision.collidableA;\n  const collidableB = collision.collidableB;\n  const previousStateA = collidableA.physicsJob.previousState;\n  const previousStateB = collidableB.physicsJob.previousState;\n  const nextStateA = collidableA.physicsJob.currentState;\n  const nextStateB = collidableB.physicsJob.currentState;\n  const centerA = collidableA.centerOfMass;\n  const centerB = collidableB.centerOfMass;\n  const contactPoint = collision.contactPoint;\n\n  const contactPointOffsetA = tmpVec3;\n  vec3.subtract(contactPointOffsetA, contactPoint, centerA);\n  const contactPointOffsetB = tmpVec4;\n  vec3.subtract(contactPointOffsetB, contactPoint, centerB);\n\n  //\n  // Calculate the relative velocity of the bodies at the point of contact.\n  //\n  // We use the velocity from the previous state, since it is the velocity that led to the\n  // collision.\n  //\n\n  const velocityA = tmpVec1;\n  vec3.cross(tmpVec1, previousStateA.angularVelocity, contactPointOffsetA);\n  vec3.add(velocityA, previousStateA.velocity, tmpVec1);\n\n  const velocityB = tmpVec2;\n  vec3.cross(tmpVec2, previousStateB.angularVelocity, contactPointOffsetB);\n  vec3.add(velocityB, previousStateB.velocity, tmpVec2);\n\n  const relativeVelocity = vec3.create();\n  vec3.subtract(relativeVelocity, velocityB, velocityA);\n\n  if (vec3.dot(relativeVelocity, collision.contactNormal) >= 0) {\n    // If the relative velocity is not pointing against the normal, then the normal was calculated\n    // incorrectly (this is likely due to the time step being too large and the fact that our\n    // contact calculations don't consider velocity). So update the contact normal to be in the\n    // direction of the relative velocity.\n\n    // TODO: Check that this works as expected.\n\n    // console.warn('Non-collision because objects are moving away from each other.');\n\n    vec3.copy(collision.contactNormal, relativeVelocity);\n    vec3.normalize(collision.contactNormal, collision.contactNormal);\n    vec3.negate(collision.contactNormal, collision.contactNormal);\n  }\n\n  _applyImpulseFromCollision(collision, relativeVelocity, contactPointOffsetA,\n      contactPointOffsetB, physicsParams);\n\n  // NOTE: This state reversion is only applied to collidableA. This assumes that only A is moving\n  // during this iteration of the collision pipeline.\n\n  // Revert to the position and orientation from immediately before the collision.\n  vec3.copy(nextStateA.position, previousStateA.position);\n  quat.copy(nextStateA.orientation, previousStateA.orientation);\n\n  // Also revert the collidables' position and orientation.\n  collidableA.position = previousStateA.position;\n  collidableA.orientation = previousStateA.orientation;\n\n  nextStateA.updateDependentFields();\n  nextStateB.updateDependentFields();\n}\n\n/**\n * Resolve a collision between one moving, physics-based object and one stationary object.\n *\n * @param {Collision} collision\n * @param {PhysicsConfig} physicsParams\n * @private\n */\nfunction _resolveCollisionWithStationaryObject(collision, physicsParams) {\n  const contactNormal = collision.contactNormal;\n\n  let physicsCollidable;\n  if (collision.collidableA.physicsJob) {\n    physicsCollidable = collision.collidableA;\n  } else {\n    physicsCollidable = collision.collidableB;\n    vec3.negate(contactNormal, contactNormal);\n  }\n\n  const previousState = physicsCollidable.physicsJob.previousState;\n  const nextState = physicsCollidable.physicsJob.currentState;\n  const center = physicsCollidable.centerOfMass;\n  const contactPoint = collision.contactPoint;\n\n  const contactPointOffset = tmpVec3;\n  vec3.subtract(contactPointOffset, contactPoint, center);\n\n  // Calculate the relative velocity of the bodies at the point of contact. We use the velocity from\n  // the previous state, since it is the velocity that led to the collision.\n  const velocity = vec3.create();\n  vec3.cross(tmpVec1, previousState.angularVelocity, contactPointOffset);\n  vec3.add(velocity, previousState.velocity, tmpVec1);\n\n  if (vec3.dot(velocity, contactNormal) <= 0) {\n    // If the relative velocity is not pointing against the normal, then the normal was calculated\n    // incorrectly (this is likely due to the time step being too large and the fact that our\n    // contact calculations don't consider velocity). So update the contact normal to be in the\n    // direction of the relative velocity.\n\n    // TODO: Check that this works as expected.\n\n    console.warn('Non-collision because object is moving away from stationary object.');\n\n    vec3.copy(collision.contactNormal, velocity);\n    vec3.normalize(collision.contactNormal, collision.contactNormal);\n    vec3.negate(collision.contactNormal, collision.contactNormal);\n  }\n\n  _applyImpulseFromCollisionWithStationaryObject(physicsCollidable, collision, velocity,\n      contactPointOffset, physicsParams);\n\n  // Revert to the position and orientation from immediately before the collision.\n  vec3.copy(nextState.position, previousState.position);\n  quat.copy(nextState.orientation, previousState.orientation);\n\n  // Also revert the collidable's position and orientation.\n  physicsCollidable.position = previousState.position;\n  physicsCollidable.orientation = previousState.orientation;\n\n  nextState.updateDependentFields();\n}\n\n/**\n * This is based on collision-response algorithms from Wikipedia\n * (https://en.wikipedia.org/wiki/Collision_response#Impulse-based_reaction_model). This algorithm\n * has been simplified by assuming the stationary body has infinite mass and zero velocity.\n *\n * @param {Collision} collision\n * @param {vec3} relativeVelocity\n * @param {vec3} contactPointOffsetA\n * @param {vec3} contactPointOffsetB\n * @param {PhysicsConfig} physicsParams\n * @private\n */\nfunction _applyImpulseFromCollision(collision, relativeVelocity, contactPointOffsetA,\n                                    contactPointOffsetB, physicsParams) {\n  const collidableA = collision.collidableA;\n  const collidableB = collision.collidableB;\n\n  const stateA = collidableA.physicsJob.currentState;\n  const stateB = collidableB.physicsJob.currentState;\n\n  const contactNormal = collision.contactNormal;\n\n  //\n  // Calculate and apply the main collision impulse.\n  //\n\n  vec3.scale(tmpVec1, relativeVelocity, -(1 + physicsParams.coefficientOfRestitution));\n  const numerator = vec3.dot(tmpVec1, contactNormal);\n\n  vec3.cross(tmpVec1, contactPointOffsetA, contactNormal);\n  vec3.transformMat3(tmpVec1, tmpVec1, stateA.inverseInertiaTensor);\n  vec3.cross(tmpVec1, tmpVec1, contactPointOffsetA);\n\n  vec3.cross(tmpVec2, contactPointOffsetB, contactNormal);\n  vec3.transformMat3(tmpVec2, tmpVec2, stateB.inverseInertiaTensor);\n  vec3.cross(tmpVec2, tmpVec2, contactPointOffsetB);\n\n  vec3.add(tmpVec1, tmpVec1, tmpVec2);\n  const denominator = vec3.dot(tmpVec1, contactNormal) + stateA.inverseMass + stateB.inverseMass;\n\n  const impulseMagnitude = numerator / denominator;\n\n  _applyImpulse(stateA, -impulseMagnitude, contactNormal, contactPointOffsetA);\n  _applyImpulse(stateB, impulseMagnitude, contactNormal, contactPointOffsetB);\n\n  //\n  // Calculate and apply a dynamic friction impulse.\n  //\n\n  const frictionImpulseMagnitude = impulseMagnitude * physicsParams.coefficientOfFriction;\n\n  const tangent = tmpVec2;\n  vec3.scale(tmpVec1, contactNormal, vec3.dot(relativeVelocity, contactNormal));\n  vec3.subtract(tangent, relativeVelocity, tmpVec1);\n  vec3.normalize(tangent, tangent);\n\n  _applyImpulse(stateA, frictionImpulseMagnitude, tangent, contactPointOffsetA);\n  _applyImpulse(stateB, -frictionImpulseMagnitude, tangent, contactPointOffsetB);\n}\n\n/**\n * This is based on collision-response algorithms from Wikipedia\n * (https://en.wikipedia.org/wiki/Collision_response#Impulse-based_reaction_model). This algorithm\n * has been simplified by assuming the stationary body has infinite mass and zero velocity.\n *\n * @param {Collidable} physicsCollidable\n * @param {Collision} collision\n * @param {vec3} velocity\n * @param {vec3} contactPointOffset\n * @param {PhysicsConfig} physicsParams\n * @private\n */\nfunction _applyImpulseFromCollisionWithStationaryObject(physicsCollidable, collision, velocity,\n                                                        contactPointOffset, physicsParams) {\n  const state = physicsCollidable.physicsJob.currentState;\n  const contactNormal = collision.contactNormal;\n\n  //\n  // Calculate and apply the main collision impulse.\n  //\n\n  vec3.scale(tmpVec1, velocity, -(1 + physicsParams.coefficientOfRestitution));\n  const numerator = vec3.dot(tmpVec1, contactNormal);\n\n  vec3.cross(tmpVec1, contactPointOffset, contactNormal);\n  vec3.transformMat3(tmpVec1, tmpVec1, state.inverseInertiaTensor);\n  vec3.cross(tmpVec1, tmpVec1, contactPointOffset);\n  const denominator = vec3.dot(tmpVec1, contactNormal) + state.inverseMass;\n\n  const impulseMagnitude = numerator / denominator;\n\n  _applyImpulse(state, impulseMagnitude, contactNormal, contactPointOffset);\n\n  //\n  // Calculate and apply a dynamic friction impulse.\n  //\n\n  const frictionImpulseMagnitude = impulseMagnitude * physicsParams.coefficientOfFriction;\n\n  const tangent = tmpVec2;\n  vec3.scale(tmpVec1, contactNormal, vec3.dot(velocity, contactNormal));\n  vec3.subtract(tangent, velocity, tmpVec1);\n  vec3.normalize(tangent, tangent);\n\n  _applyImpulse(state, frictionImpulseMagnitude, tangent, contactPointOffset);\n}\n\n/**\n * @param {PhysicsState} state\n * @param {number} impulseMagnitude\n * @param {vec3} impulseDirection\n * @param {vec3} contactPointOffset\n * @private\n */\nfunction _applyImpulse(state, impulseMagnitude, impulseDirection, contactPointOffset) {\n  // Calculate the updated linear momenta.\n  const finalLinearMomentum = vec3.create();\n  vec3.scaleAndAdd(finalLinearMomentum, state.momentum, impulseDirection, impulseMagnitude);\n\n  // Calculate the updated angular momenta.\n  const finalAngularMomentum = vec3.create();\n  vec3.cross(tmpVec1, contactPointOffset, impulseDirection);\n  vec3.scaleAndAdd(finalAngularMomentum, state.angularMomentum, tmpVec1, impulseMagnitude);\n\n  // Apply the updated momenta.\n  vec3.copy(state.momentum, finalLinearMomentum);\n  vec3.copy(state.angularMomentum, finalAngularMomentum);\n}\n\n/**\n * @param {CollidablePhysicsJob} job\n * @returns {boolean}\n * @private\n */\nfunction _isJobAtRest(job) {\n  return areVec3sClose(job.currentState.position, job.previousState.position) &&\n      areVec3sClose(job.currentState.velocity, job.previousState.velocity) &&\n      areVec3sClose(job.currentState.orientation, job.previousState.orientation) &&\n      _doCollisionsMatch(job.collidable.collisions, job.collidable.previousCollisions);\n}\n\n/**\n * @param {Array.<Collision>} collisionsA\n * @param {Array.<Collision>} collisionsB\n * @returns {boolean}\n * @private\n */\nfunction _doCollisionsMatch(collisionsA, collisionsB) {\n  const count = collisionsA.length;\n\n  if (count !== collisionsB.length) return false;\n\n  for (let i = 0; i < count; i++) {\n    const collisionA = collisionsA[i];\n    const collisionB = collisionsB[i];\n    if (collisionA.collidableA !== collisionB.collidableA ||\n        collisionA.collidableB !== collisionB.collidableB ||\n        !areVec3sClose(collisionA.contactPoint, collisionB.contactPoint) ||\n        !areVec3sClose(collisionA.contactNormal, collisionB.contactNormal)) {\n      return false\n    }\n  }\n\n  return true;\n}\n\n/**\n * @param {Collidable} collidable\n * @private\n */\nfunction _recordOldCollisionsForDevModeForCollidable(collidable) {\n  if (!collidable.extraPreviousCollisions) {\n    collidable.extraPreviousCollisions = [];\n  }\n\n  for (let i = 3; i > 0; i--) {\n    collidable.extraPreviousCollisions[i] = collidable.extraPreviousCollisions[i - 1];\n  }\n  collidable.extraPreviousCollisions[0] = collidable.previousCollisions;\n}\n\n/**\n * @param {Collision} collision\n * @param {Object} thisController\n * @returns {Object}\n */\nfunction getOtherControllerFromCollision(collision, thisController) {\n  const controllerA = collision.collidableA.physicsJob.controller;\n  const controllerB = collision.collidableB.physicsJob.controller;\n  if (controllerA === thisController) {\n    return controllerB;\n  } else if (controllerB === thisController) {\n    return controllerA;\n  } else {\n    throw new Error('Neither collidable corresponds to the given controller');\n  }\n}\n\nexport {\n  handleCollisionsForJob,\n  findIntersectingCollidablesForCollidable,\n  determineJobsAtRest,\n  recordOldCollisionsForDevModeForAllCollidables,\n  checkThatNoObjectsCollide,\n  getOtherControllerFromCollision,\n};\n","import {\n  Aabb,\n  Capsule,\n  Obb,\n  Sphere\n} from '../collidables';\n\nimport {\n  aabbCollisionDetection,\n  capsuleCollisionDetection,\n  obbCollisionDetection,\n  sphereCollisionDetection,\n} from '../collision-detection';\n\nimport {\n  aabbContactCalculation,\n  capsuleContactCalculation,\n  obbContactCalculation,\n  sphereContactCalculation,\n} from '../contact-calculation';\n\n/**\n * This module defines a collection of static utility functions for detecting and responding to\n * collisions.\n */\n\n/**\n * @param {Collidable} a\n * @param {Collidable} b\n * @returns {boolean}\n */\nfunction detectIntersection(a, b) {\n  if (a instanceof Sphere) {\n    if (b instanceof Sphere) {\n      return sphereCollisionDetection.sphereVsSphere(a, b);\n    } else if (b instanceof Aabb) {\n      return sphereCollisionDetection.sphereVsAabb(a, b);\n    } else if (b instanceof Capsule) {\n      return sphereCollisionDetection.sphereVsCapsule(a, b);\n    } else if (b instanceof Obb) {\n      return sphereCollisionDetection.sphereVsObb(a, b);\n    } else {\n      return sphereCollisionDetection.sphereVsPoint(a, b);\n    }\n  } else if (a instanceof Aabb) {\n    if (b instanceof Sphere) {\n      return aabbCollisionDetection.aabbVsSphere(a, b);\n    } else if (b instanceof Aabb) {\n      return aabbCollisionDetection.aabbVsAabb(a, b);\n    } else if (b instanceof Capsule) {\n      return aabbCollisionDetection.aabbVsCapsule(a, b);\n    } else if (b instanceof Obb) {\n      return aabbCollisionDetection.aabbVsObb(a, b);\n    } else {\n      return aabbCollisionDetection.aabbVsPoint(a, b);\n    }\n  } else if (a instanceof Capsule) {\n    if (b instanceof Sphere) {\n      return capsuleCollisionDetection.capsuleVsSphere(a, b);\n    } else if (b instanceof Aabb) {\n      return capsuleCollisionDetection.capsuleVsAabb(a, b);\n    } else if (b instanceof Capsule) {\n      return capsuleCollisionDetection.capsuleVsCapsule(a, b);\n    } else if (b instanceof Obb) {\n      return capsuleCollisionDetection.capsuleVsObb(a, b);\n    } else {\n      return capsuleCollisionDetection.capsuleVsPoint(a, b);\n    }\n  } else if (a instanceof Obb) {\n    if (b instanceof Sphere) {\n      return obbCollisionDetection.obbVsSphere(a, b);\n    } else if (b instanceof Aabb) {\n      return obbCollisionDetection.obbVsAabb(a, b);\n    } else if (b instanceof Capsule) {\n      return obbCollisionDetection.obbVsCapsule(a, b);\n    } else if (b instanceof Obb) {\n      return obbCollisionDetection.obbVsObb(a, b);\n    } else {\n      return obbCollisionDetection.obbVsPoint(a, b);\n    }\n  } else {\n    if (b instanceof Sphere) {\n      return sphereCollisionDetection.sphereVsPoint(b, a);\n    } else if (b instanceof Aabb) {\n      return aabbCollisionDetection.aabbVsPoint(b, a);\n    } else if (b instanceof Capsule) {\n      return capsuleCollisionDetection.capsuleVsPoint(b, a);\n    } else if (b instanceof Obb) {\n      return obbCollisionDetection.obbVsPoint(b, a);\n    } else {\n      return false;\n    }\n  }\n}\n\n/**\n * @param {Collision} collision\n */\nfunction calculateContact(collision) {\n  const a = collision.collidableA;\n  const b = collision.collidableB;\n  const contactPoint = vec3.create();\n  const contactNormal = vec3.create();\n\n  if (a instanceof Sphere) {\n    if (b instanceof Sphere) {\n      sphereContactCalculation.sphereVsSphere(contactPoint, contactNormal, a, b);\n    } else if (b instanceof Aabb) {\n      sphereContactCalculation.sphereVsAabb(contactPoint, contactNormal, a, b);\n    } else if (b instanceof Capsule) {\n      sphereContactCalculation.sphereVsCapsule(contactPoint, contactNormal, a, b);\n    } else if (b instanceof Obb) {\n      sphereContactCalculation.sphereVsObb(contactPoint, contactNormal, a, b);\n    } else {\n      sphereContactCalculation.sphereVsPoint(contactPoint, contactNormal, a, b);\n    }\n  } else if (a instanceof Aabb) {\n    if (b instanceof Sphere) {\n      aabbContactCalculation.aabbVsSphere(contactPoint, contactNormal, a, b);\n    } else if (b instanceof Aabb) {\n      aabbContactCalculation.aabbVsAabb(contactPoint, contactNormal, a, b);\n    } else if (b instanceof Capsule) {\n      aabbContactCalculation.aabbVsCapsule(contactPoint, contactNormal, a, b);\n    } else if (b instanceof Obb) {\n      aabbContactCalculation.aabbVsObb(contactPoint, contactNormal, a, b);\n    } else {\n      aabbContactCalculation.aabbVsPoint(contactPoint, contactNormal, a, b);\n    }\n  } else if (a instanceof Capsule) {\n    if (b instanceof Sphere) {\n      capsuleContactCalculation.capsuleVsSphere(contactPoint, contactNormal, a, b);\n    } else if (b instanceof Aabb) {\n      capsuleContactCalculation.capsuleVsAabb(contactPoint, contactNormal, a, b);\n    } else if (b instanceof Capsule) {\n      capsuleContactCalculation.capsuleVsCapsule(contactPoint, contactNormal, a, b);\n    } else if (b instanceof Obb) {\n      capsuleContactCalculation.capsuleVsObb(contactPoint, contactNormal, a, b);\n    } else {\n      capsuleContactCalculation.capsuleVsPoint(contactPoint, contactNormal, a, b);\n    }\n  } else if (a instanceof Obb) {\n    if (b instanceof Sphere) {\n      obbContactCalculation.obbVsSphere(contactPoint, contactNormal, a, b);\n    } else if (b instanceof Aabb) {\n      obbContactCalculation.obbVsAabb(contactPoint, contactNormal, a, b);\n    } else if (b instanceof Capsule) {\n      obbContactCalculation.obbVsCapsule(contactPoint, contactNormal, a, b);\n    } else if (b instanceof Obb) {\n      obbContactCalculation.obbVsObb(contactPoint, contactNormal, a, b);\n    } else {\n      obbContactCalculation.obbVsPoint(contactPoint, contactNormal, a, b);\n    }\n  } else {\n    if (b instanceof Sphere) {\n      sphereContactCalculation.sphereVsPoint(contactPoint, contactNormal, b, a);\n    } else if (b instanceof Aabb) {\n      aabbContactCalculation.aabbVsPoint(contactPoint, contactNormal, b, a);\n    } else if (b instanceof Capsule) {\n      capsuleContactCalculation.capsuleVsPoint(contactPoint, contactNormal, b, a);\n    } else if (b instanceof Obb) {\n      obbContactCalculation.obbVsPoint(contactPoint, contactNormal, b, a);\n    } else {}\n    vec3.negate(contactNormal, contactNormal);\n  }\n\n  collision.contactPoint = contactPoint;\n  collision.contactNormal = contactNormal;\n}\n\n/**\n * @param {Collidable} a\n * @param {Collidable} b\n * @returns {boolean}\n */\nfunction detectBoundingVolumeIntersection(a, b) {\n  return detectIntersection(a.boundingVolume, b.boundingVolume);\n}\n\nexport {\n  detectIntersection,\n  calculateContact,\n  detectBoundingVolumeIntersection,\n};\n","/**\n * This module re-exports all of the exports in the grafx framework. This makes the entire framework\n * conveniently accessible via this single module.\n */\n\nexport * from './collisions';\nexport * from './integrator';\nexport * from './util';\n\nexport * from './src/physics-engine';\nexport * from './src/physics-job';\nexport * from './src/physics-state';\n","export * from './src/integrator';\nexport * from './src/rk4-integrator';\n","/**\n * This class numerically integrates the equations of motion. That is, an integrator implements\n * physics simulations by updating position and velocity values for each time step.\n *\n * @abstract\n */\nclass Integrator {\n  constructor() {\n    // Integrator is an abstract class. It should not be instantiated directly.\n    if (new.target === Integrator) {\n      throw new TypeError('Cannot construct Integrator instances directly');\n    }\n  }\n\n  /**\n   * Integrate the state from t to t + dt.\n   *\n   * @param {PhysicsJob} job\n   * @param {number} t Total elapsed time.\n   * @param {number} dt Duration of the current time step.\n   * @abstract\n   */\n  integrate(job, t, dt) {\n    // Extending classes should implement this method.\n    throw new TypeError('Method not implemented');\n  }\n\n  /**\n   * @returns {PhysicsDerivative}\n   */\n  static createDerivative() {\n    return {\n      velocity: vec3.create(),\n      force: vec3.create(),\n      spin: quat.create(),\n      torque: vec3.create()\n    };\n  }\n}\n\nexport {Integrator};\n\n/**\n * @typedef {Object} PhysicsDerivative\n * @property {vec3} velocity Derivative of position.\n * @property {vec3} force Derivative of momentum.\n * @property {quat} spin Derivative of orientation.\n * @property {vec3} torque Derivative of angular momentum.\n */\n\n/**\n * @typedef {Object} ForceApplierOutput\n * @property {vec3} force\n * @property {vec3} torque\n */\n\n/**\n * @typedef {Object} ForceApplierInput\n * @property {PhysicsState} state\n * @property {number} t\n * @property {number} dt\n */\n","import {_geometry, _util} from '../../util';\nimport {Integrator} from './integrator';\nimport {PhysicsState} from '../../src/physics-state';\n\n// TODO: Account for the fact that collisions take place between time steps; integration should\n// really consider the previous state as being the time and state at the moment of collision.\n\n/**\n * This class numerically integrates the equations of motion. That is, this implements physics\n * simulations by updating position and velocity values for each time step.\n *\n * This integrator is an implementation of the classical Runge-Kutta method (RK4)\n * (https://en.wikipedia.org/wiki/Runge_kutta).\n *\n * This integrator causes energy to be lost at a small rate. This is a common problem for numerical\n * integrators, and is usually negligible.\n */\nclass RK4Integrator extends Integrator {\n  constructor() {\n    super();\n    if (_util.isInDevMode) {\n      this._wrapForDevMode();\n    }\n  }\n\n  /**\n   * Integrate the state from t to t + dt.\n   *\n   * @param {PhysicsJob} job\n   * @param {number} t Total elapsed time.\n   * @param {number} dt Duration of the current time step.\n   */\n  integrate(job, t, dt) {\n    const state = job.currentState;\n    _tempState.copy(state);\n\n    _calculateDerivative(_a, _tempState, job, t, 0, _EMPTY_DERIVATIVE);\n    _calculateDerivative(_b, _tempState, job, t, dt * 0.5, _a);\n    _calculateDerivative(_c, _tempState, job, t, dt * 0.5, _b);\n    _calculateDerivative(_d, _tempState, job, t, dt, _c);\n\n    _calculateVec3DerivativeWeightedSum(\n        _positionDerivative, _a.velocity, _b.velocity, _c.velocity, _d.velocity);\n    _calculateVec3DerivativeWeightedSum(\n        _momentumDerivative, _a.force, _b.force, _c.force, _d.force);\n    _calculateQuatDerivativeWeightedSum(_orientationDerivative, _a.spin, _b.spin, _c.spin, _d.spin);\n    _calculateVec3DerivativeWeightedSum(\n        _angularMomentumDerivative, _a.torque, _b.torque, _c.torque, _d.torque);\n\n    vec3.scaleAndAdd(state.position, state.position, _positionDerivative, dt);\n    vec3.scaleAndAdd(state.momentum, state.momentum, _momentumDerivative, dt);\n    _geometry.scaleAndAddQuat(state.orientation, state.orientation, _orientationDerivative, dt);\n    vec3.scaleAndAdd(state.angularMomentum, state.angularMomentum, _angularMomentumDerivative, dt);\n\n    state.updateDependentFields();\n  }\n\n  /**\n   * Wraps the integrate method and check for NaN values after each integration.\n   *\n   * @private\n   */\n  _wrapForDevMode() {\n    const unguardedIntegrate = this.integrate.bind(this);\n    this.integrate = (job, t, dt) => {\n      unguardedIntegrate(job, t, dt);\n      _checkForStateError(job.currentState);\n    };\n  }\n}\n\n/**\n * Calculate the derivative from the given state with the given time step.\n *\n * @param {PhysicsDerivative} out\n * @param {PhysicsState} state\n * @param {PhysicsJob} job\n * @param {number} t\n * @param {number} dt\n * @param {PhysicsDerivative} d\n * @private\n */\nfunction _calculateDerivative(out, state, job, t, dt, d) {\n  vec3.scaleAndAdd(state.position, state.position, d.velocity, dt);\n  vec3.scaleAndAdd(state.momentum, state.momentum, d.force, dt);\n  _geometry.scaleAndAddQuat(state.orientation, state.orientation, d.spin, dt);\n  vec3.scaleAndAdd(state.angularMomentum, state.angularMomentum, d.torque, dt);\n\n  state.updateDependentFields();\n\n  out.velocity = state.velocity;\n  out.spin = state.spin;\n  vec3.set(out.force, 0, 0, 0);\n  vec3.set(out.torque, 0, 0, 0);\n\n  _forceApplierOutput.force = out.force;\n  _forceApplierOutput.torque = out.torque;\n  _forceApplierInput.state = state;\n  _forceApplierInput.t = t + dt;\n  _forceApplierInput.dt = dt;\n\n  job.applyForces(_forceApplierOutput, _forceApplierInput);\n}\n\nconst _EMPTY_DERIVATIVE = Integrator.createDerivative();\n\nconst _tempState = new PhysicsState();\nconst _a = Integrator.createDerivative();\nconst _b = Integrator.createDerivative();\nconst _c = Integrator.createDerivative();\nconst _d = Integrator.createDerivative();\n\nconst _positionDerivative = vec3.create();\nconst _momentumDerivative = vec3.create();\nconst _orientationDerivative = quat.create();\nconst _angularMomentumDerivative = vec3.create();\n\nconst _forceApplierOutput = {};\nconst _forceApplierInput = {};\n\n/**\n * @param {vec3} out\n * @param {vec3} a\n * @param {vec3} b\n * @param {vec3} c\n * @param {vec3} d\n * @private\n */\nfunction _calculateVec3DerivativeWeightedSum(out, a, b, c, d) {\n  out[0] = 1 / 6 * (a[0] + 2 * (b[0] + c[0]) + d[0]);\n  out[1] = 1 / 6 * (a[1] + 2 * (b[1] + c[1]) + d[1]);\n  out[2] = 1 / 6 * (a[2] + 2 * (b[2] + c[2]) + d[2]);\n}\n\n/**\n * @param {quat} out\n * @param {quat} a\n * @param {quat} b\n * @param {quat} c\n * @param {quat} d\n * @private\n */\nfunction _calculateQuatDerivativeWeightedSum(out, a, b, c, d) {\n  out[0] = 1 / 6 * (a[0] + 2 * (b[0] + c[0]) + d[0]);\n  out[1] = 1 / 6 * (a[1] + 2 * (b[1] + c[1]) + d[1]);\n  out[2] = 1 / 6 * (a[2] + 2 * (b[2] + c[2]) + d[2]);\n  out[3] = 1 / 6 * (a[3] + 2 * (b[3] + c[3]) + d[3]);\n}\n\n/**\n * @param {PhysicsState} state\n * @private\n */\nfunction _checkForStateError(state) {\n  const errorProperties = [\n    'position',\n    'momentum',\n    'orientation',\n    'angularMomentum',\n  ].filter(property => _containsNaN(state[property]));\n  const property = errorProperties[0];\n  if (property) {\n    throw new Error(`${property} contains a NaN value after integrating: ${state[property]}`);\n  }\n}\n\n/**\n * Determines whether the given vector contains a NaN value.\n *\n * @param {vec3} v\n * @private\n */\nfunction _containsNaN(v) {\n  return isNaN(v[0]) || isNaN(v[1]) || isNaN(v[2]);\n}\n\nconst rk4Integrator = new RK4Integrator();\n\nexport {rk4Integrator};\n","import {FrameLatencyProfiler, PersistentAnimationJob} from 'lsl-animatex';\nimport {_util} from '../util';\n\nimport {\n  checkThatNoObjectsCollide,\n  CollidablePhysicsJob,\n  determineJobsAtRest,\n  handleCollisionsForJob,\n  recordOldCollisionsForDevModeForAllCollidables,\n} from '../collisions';\nimport {PhysicsState} from './physics-state';\nimport {rk4Integrator} from '../integrator';\n\nconst _FRAME_LATENCY_LOG_PERIOD = 5000;\nconst _LATENCY_LOG_LABEL = 'Physics frame duration';\n\n/**\n * This physics engine simulates high-performance, three-dimensional rigid-body dynamics.\n *\n * Notable features:\n * - Includes collision detection with impulse-based resolution.\n * - Decouples the physics simulation and animation rendering time steps, and uses a fixed timestep\n * for the physics loop. This gives us numerical stability and precise reproducibility.\n * - Suppresses linear and angular momenta below a certain threshold.\n *\n * The engine consists primarily of a collection of individual physics jobs and an update loop. This\n * update loop is in turn controlled by the animation loop. However, whereas the animation loop\n * renders each job once per frame loop--regardless of how much time actually elapsed since the\n * previous frame--the physics loop updates its jobs at a constant rate. To reconcile these frame\n * rates, the physics loop runs as many times as is needed in order to catch up to the time of the\n * current animation frame. The physics frame rate should be much higher than the animation frame\n * rate.\n *\n * It is VERY IMPORTANT for a PhysicsJob to minimize the runtime of its update step.\n *\n * ## A note on job order\n *\n * The integration+collision pipeline handle one job at a time. A consequence of this design\n * is that half of the collisions technically represent a false interaction between the state of the\n * first object at time t and the state of the second object at time t - 1.\n *\n * This implementation prevents a more problematic issue. If all objects were first integrated, then\n * all objects were checked for collisions, then all collisions were resolved, then the following\n * scenario could arise:\n * - The next position of object A collides with the previous position of object B, but not with the\n *   next position of object B, so object A moves successfully to its new position.\n * - The next position of object B collides with the next position of object C, so objects B and C\n *   are reset to their previous positions.\n * - Object B and C now intersect.\n */\nclass PhysicsEngine extends PersistentAnimationJob {\n  /**\n   * Clients should call PhysicsEngine.create instead of instantiating a PhysicsEngine directly.\n   *\n   * @param {PhysicsConfig} physicsParams\n   */\n  constructor(physicsParams) {\n    super();\n\n    if (_physicsEngine) {\n      throw new Error('Can\\'t instantiate multiple instances of PhysicsEngine.');\n    }\n\n    _physicsEngine = this;\n\n    this._physicsParams = physicsParams;\n    this.integrator = rk4Integrator;\n    this._elapsedTime = 0.0;\n    this._remainingTime = 0.0;\n    this._nonCollidableJobs = [];\n    this._collidableJobs = [];\n\n    if (_util.isInDevMode) {\n      this._setUpForInDevMode();\n    }\n  }\n\n  /**\n   * @param {PhysicsConfig} physicsParams\n   */\n  static create(physicsParams) {\n    new PhysicsEngine(physicsParams);\n  }\n\n  reset() {\n    this._elapsedTime = 0.0;\n    this._remainingTime = 0.0;\n    this._nonCollidableJobs = [];\n    this._collidableJobs = [];\n  }\n\n  /**\n   * Adds the given PhysicsJob.\n   *\n   * @param {PhysicsJob} job\n   */\n  addJob(job) {\n    // console.debug(`Starting PhysicsJob`);\n\n    if (job instanceof CollidablePhysicsJob) {\n      this._collidableJobs.push(job);\n    } else {\n      this._nonCollidableJobs.push(job);\n    }\n  }\n\n  /**\n   * Removes the given PhysicsJob.\n   *\n   * Throws no error if the job is not registered.\n   *\n   * @param {PhysicsJob} job\n   */\n  removeJob(job) {\n    // console.debug(`Cancelling PhysicsJob`);\n    this._removeJob(job);\n  }\n\n  /**\n   * Wraps the draw and update methods in a profiler function that will track the frame latencies.\n   *\n   * @private\n   */\n  _setUpForInDevMode() {\n    const unwrappedUpdate = this.update.bind(this);\n    const latencyProfiler = new FrameLatencyProfiler(_FRAME_LATENCY_LOG_PERIOD, \n        this._physicsParams.timeStepDuration, _LATENCY_LOG_LABEL);\n    latencyProfiler.start();\n\n    this.update = (...args) => {\n      const beforeTime = performance.now();\n      unwrappedUpdate(...args);\n      const deltaTime = performance.now() - beforeTime;\n      latencyProfiler.recordFrameLatency(deltaTime);\n    };\n  }\n\n  /**\n   * Update the physics state for the current animation update frame.\n   *\n   * @param {DOMHighResTimeStamp} currentTime\n   * @param {DOMHighResTimeStamp} deltaTime\n   */\n  update(currentTime, deltaTime) {\n    this._remainingTime += deltaTime;\n\n    // Run as many constant-interval physics updates as are needed for the given animation frame\n    // interval.\n    while (this._remainingTime >= this._physicsParams.timeStepDuration) {\n      this._updateToNextPhysicsFrame();\n      this._elapsedTime += this._physicsParams.timeStepDuration;\n      this._remainingTime -= this._physicsParams.timeStepDuration;\n    }\n\n    // Calculate the intermediate physics state to use for rendering the current animation frame.\n    const partialRatio = this._remainingTime / this._physicsParams.timeStepDuration;\n    this._setPartialStateForRenderTimeStepForAllJobs(partialRatio);\n  }\n\n  _updateToNextPhysicsFrame() {\n    if (_util.isInDevMode) {\n      this._recordOldStatesForAllJobsForDevMode();\n      recordOldCollisionsForDevModeForAllCollidables();\n    }\n\n    this._nonCollidableJobs.forEach(this._integratePhysicsStateForJob.bind(this));\n    this._collidableJobs.forEach(job => {\n      if (!job.isAtRest) {\n        this._integratePhysicsStateForCollidableJob(job);\n        handleCollisionsForJob(job, this._elapsedTime, this._physicsParams);\n      }\n    });\n\n    if (_util.isInDevMode) {\n      checkThatNoObjectsCollide();\n    }\n\n    this._suppressLowMomentaForAllJobs();\n\n    determineJobsAtRest(this._collidableJobs);\n  }\n\n  /**\n   * Removes the given job from the collection of active jobs if it exists.\n   *\n   * @param {PhysicsJob} job\n   * @param {number} [index=-1]\n   * @private\n   */\n  _removeJob(job, index = -1) {\n    if (job instanceof CollidablePhysicsJob) {\n      _removeJobFromCollection(job, index, this._collidableJobs);\n    } else {\n      _removeJobFromCollection(job, index, this._nonCollidableJobs);\n    }\n  }\n\n  /**\n   * Update the current physics state for a job for the current physics update frame.\n   *\n   * This includes applying all forces that have been registered with the physics job.\n   *\n   * @param {CollidablePhysicsJob} job\n   * @private\n   */\n  _integratePhysicsStateForCollidableJob(job) {\n    this._integratePhysicsStateForJob(job);\n\n    // Update the collidable's position and orientation.\n    job.collidable.position = job.currentState.position;\n    job.collidable.orientation = job.currentState.orientation;\n  }\n\n  /**\n   * Update the current physics state for a job for the current physics update frame.\n   *\n   * This includes applying all forces that have been registered with the physics job.\n   *\n   * @param {PhysicsJob} job\n   * @private\n   */\n  _integratePhysicsStateForJob(job) {\n    job.previousState.copy(job.currentState);\n    this.integrator.integrate(job, this._elapsedTime, this._physicsParams.timeStepDuration);\n  }\n\n  _suppressLowMomentaForAllJobs() {\n    this._collidableJobs.forEach(job => _suppressLowMomentaForJob(job,\n        this._physicsParams.lowMomentumSuppressionThreshold,\n        this._physicsParams.lowAngularMomentumSuppressionThreshold));\n    this._nonCollidableJobs.forEach(job => _suppressLowMomentaForJob(job,\n        this._physicsParams.lowMomentumSuppressionThreshold,\n        this._physicsParams.lowAngularMomentumSuppressionThreshold));\n  }\n\n  /**\n   * Calculate the intermediate physics state to use for rendering the current animation frame. The\n   * given ratio specifies how far the current render frame is between the previous and current\n   * physics update frames.\n   *\n   * @param {number} partialRatio\n   * @private\n   */\n  _setPartialStateForRenderTimeStepForAllJobs(partialRatio) {\n    this._collidableJobs.forEach(_setPartialStateForRenderTimeStepForJob.bind(null, partialRatio));\n    this._nonCollidableJobs.forEach(_setPartialStateForRenderTimeStepForJob.bind(null, partialRatio));\n  }\n\n  _recordOldStatesForAllJobsForDevMode() {\n    this._collidableJobs.forEach(_recordOldStatesForJob);\n    this._nonCollidableJobs.forEach(_recordOldStatesForJob);\n  }\n\n  draw() {}\n\n  /**\n   * @returns {PhysicsEngine}\n   */\n  static get instance() {\n    if (!_physicsEngine) {\n      throw new Error('Can\\'t access PhysicsEngine.instance before it has been instantiated.');\n    }\n    return _physicsEngine;\n  }\n}\n\n/**\n * @param {PhysicsJob} job\n * @param {number} lowMomentumSuppressionThreshold\n * @param {number} lowAngularMomentumSuppressionThreshold\n * @private\n */\nfunction _suppressLowMomentaForJob(job, lowMomentumSuppressionThreshold,\n                                   lowAngularMomentumSuppressionThreshold) {\n  const currentState = job.currentState;\n\n  if (vec3.squaredLength(currentState.momentum) < lowMomentumSuppressionThreshold) {\n    vec3.set(currentState.momentum, 0, 0, 0);\n  }\n\n  if (vec3.squaredLength(currentState.angularMomentum) < lowAngularMomentumSuppressionThreshold) {\n    vec3.set(currentState.angularMomentum, 0, 0, 0);\n  }\n}\n\n/**\n * @param {PhysicsJob} job\n * @param {number} index\n * @param {Array.<PhysicsJob>} jobs\n * @private\n */\nfunction _removeJobFromCollection(job, index, jobs) {\n  if (index >= 0) {\n    jobs.splice(index, 1);\n  } else {\n    const count = jobs.length;\n    for (index = 0; index < count; index++) {\n      if (jobs[index] === job) {\n        jobs.splice(index, 1);\n        break;\n      }\n    }\n  }\n}\n\n/**\n * @param {number} partialRatio\n * @param {PhysicsJob} job\n * @private\n */\nfunction _setPartialStateForRenderTimeStepForJob(partialRatio, job) {\n  job.renderState.lerp(job.previousState, job.currentState, partialRatio);\n}\n\n/**\n * @param {PhysicsJob} job\n * @private\n */\nfunction _recordOldStatesForJob(job) {\n  if (!job.extraPreviousStates) {\n    job.extraPreviousStates = [];\n    for (let i = 0; i < 4; i++) {\n      job.extraPreviousStates[i] = new PhysicsState();\n    }\n  }\n\n  for (let i = 3; i > 0; i--) {\n    job.extraPreviousStates[i].copy(job.extraPreviousStates[i - 1]);\n  }\n  job.extraPreviousStates[0].copy(job.previousState);\n}\n\nlet _physicsEngine = null;\n\nexport {PhysicsEngine};\n","import {animator} from 'lsl-animatex';\nimport {PhysicsEngine} from './physics-engine';\nimport {PhysicsState} from './physics-state';\nimport {_util} from '../util';\n\n/**\n * A PhysicsJob maintains a current force/momentum state and defines a method for applying forces at\n * a given physics time step.\n */\nclass PhysicsJob {\n  /**\n   * @param {Array.<ForceApplier>} [forceAppliers]\n   * @param {PhysicsState} [state]\n   */\n  constructor(forceAppliers, state) {\n    forceAppliers = forceAppliers || [];\n    state = state || new PhysicsState();\n\n    this.startTime = null;\n    this.currentState = state;\n    this.previousState = null;\n    this.renderState = null;\n    this._forceAppliers = forceAppliers;\n  }\n\n  /**\n   * @param {ForceApplierOutput} outputParams\n   * @param {ForceApplierInput} inputParams\n   */\n  applyForces(outputParams, inputParams) {\n    this._forceAppliers.forEach(forceApplier => forceApplier(outputParams, inputParams));\n  }\n\n  /**\n   * @param {ForceApplier} forceApplier\n   * @param {number} [index=0] The index to add the given force applier in the current list of\n   * appliers.\n   */\n  addForceApplier(forceApplier, index = 0) {\n    this._forceAppliers.splice(index, 0, forceApplier);\n  }\n\n  /**\n   * @param {ForceApplier} forceApplier\n   */\n  removeForceApplier(forceApplier) {\n    this._forceAppliers.splice(this._forceAppliers.indexOf(forceApplier), 1);\n  }\n\n  /**\n   * Registers this PhysicsJob and all of its descendant child jobs with the physics engine.\n   *\n   * @param {number} [startTime]\n   */\n  start(startTime) {\n    this.startTime = startTime || animator.currentTime;\n\n    const previousState = new PhysicsState();\n    previousState.copy(this.currentState);\n    const renderState = new PhysicsState();\n    renderState.copy(this.currentState);\n\n    this.previousState = previousState;\n    this.renderState = renderState;\n\n    if (_util.isInDevMode) {\n      // It is useful for debugging to be able to trace the states back to their jobs.\n      this.currentState.job = this;\n      this.previousState.job = this;\n      this.renderState.job = this;\n    }\n\n    PhysicsEngine.instance.addJob(this);\n  }\n\n  /**\n   * Unregisters this PhysicsJob and all of its descendant child jobs with the physics engine.\n   *\n   * Throws no error if the job is not registered.\n   */\n  finish() {\n    PhysicsEngine.instance.removeJob(this);\n  }\n\n  /**\n   * @param {number} [startTime]\n   */\n  restart(startTime) {\n    this.finish();\n    this.start(startTime);\n  }\n}\n\nexport {PhysicsJob};\n\n/**\n * @typedef {Function} ForceApplier\n * @property {vec3} force Output.\n * @property {vec3} torque Output.\n * @property {PhysicsState} state Input.\n * @property {number} t Input.\n * @property {number} dt Input.\n */\n\n/**\n * @typedef {Object} PhysicsConfig\n * @property {number} timeStepDuration\n * @property {number} gravity\n * @property {vec3} _gravityVec\n * @property {number} linearDragCoefficient\n * @property {number} angularDragCoefficient\n * @property {number} coefficientOfRestitution\n * @property {number} coefficientOfFriction\n * @property {number} lowMomentumSuppressionThreshold\n * @property {number} lowAngularMomentumSuppressionThreshold\n */\n","import {rotateTensor, createBoxInertiaTensor} from '../util';\n\n/**\n * This class represents the state of an object that is needed for a physics simulation (such as\n * position, momentum, and mass).\n */\nclass PhysicsState {\n  /**\n   * @param {DynamicsConfig} [dynamicsParams={}]\n   */\n  constructor(dynamicsParams = {}) {\n    const position = dynamicsParams.position || vec3.create();\n    const momentum = dynamicsParams.momentum || vec3.create();\n    const orientation = dynamicsParams.orientation || quat.create();\n    const angularMomentum = dynamicsParams.angularMomentum || vec3.create();\n    const mass = dynamicsParams.mass || 1;\n    const unrotatedInertiaTensor = dynamicsParams.unrotatedInertiaTensor || createBoxInertiaTensor(1, 1, 1, mass);\n\n    // Constant fields.\n\n    this.mass = mass;\n    this.inverseMass = 1 / mass;\n    this.unrotatedInertiaTensor = unrotatedInertiaTensor;\n\n    // Independent fields.\n\n    this.position = position;\n    this.momentum = momentum;\n    this.orientation = orientation;\n    this.angularMomentum = angularMomentum;\n\n    // Dependent fields.\n\n    // Linear velocity.\n    this.velocity = vec3.create();\n    // Quaternion-based representation of the rate of change in orientation.\n    this.spin = quat.create();\n    // Vector-based representation of the angular velocity.\n    this.angularVelocity = vec3.create();\n    // The inverse inertia tensor rotated to the world coordinate frame.\n    this.inverseInertiaTensor = mat3.create();\n\n    this.updateDependentFields();\n  }\n\n  updateDependentFields() {// TODO: Test this somehow...\n    // Update linear velocity.\n    vec3.scale(this.velocity, this.momentum, this.inverseMass);\n\n    // Update angular velocity.\n    quat.normalize(this.orientation, this.orientation);\n    rotateTensor(this.inverseInertiaTensor, this.unrotatedInertiaTensor, this.orientation);\n    mat3.invert(this.inverseInertiaTensor, this.unrotatedInertiaTensor);\n    vec3.transformMat3(this.angularVelocity, this.angularMomentum, this.inverseInertiaTensor);\n    quat.set(this.spin, this.angularVelocity[0], this.angularVelocity[1],\n        this.angularVelocity[2], 0);\n    quat.scale(this.spin, this.spin, 0.5);\n    quat.multiply(this.spin, this.spin, this.orientation);\n  }\n\n  /**\n   * Perform a deep copy.\n   *\n   * @param {PhysicsState} other\n   */\n  copy(other) {\n    this.mass = other.mass;\n    this.inverseMass = other.inverseMass;\n    mat3.copy(this.unrotatedInertiaTensor, other.unrotatedInertiaTensor);\n    mat3.copy(this.inverseInertiaTensor, other.inverseInertiaTensor);\n    vec3.copy(this.position, other.position);\n    vec3.copy(this.momentum, other.momentum);\n    quat.copy(this.orientation, other.orientation);\n    vec3.copy(this.angularMomentum, other.angularMomentum);\n    vec3.copy(this.velocity, other.velocity);\n    quat.copy(this.spin, other.spin);\n    vec3.copy(this.angularVelocity, other.angularVelocity);\n  }\n\n  /**\n   * @param {PhysicsState} a\n   * @param {PhysicsState} b\n   * @param {number} partialRatio\n   */\n  lerp(a, b, partialRatio) {\n    vec3.lerp(this.position, a.position, b.position, partialRatio);\n    vec3.lerp(this.momentum, a.momentum, b.momentum, partialRatio);\n    quat.slerp(this.orientation, a.orientation, b.orientation, partialRatio);\n    quat.normalize(this.orientation, this.orientation);\n    vec3.lerp(this.angularMomentum, a.angularMomentum, b.angularMomentum, partialRatio);\n    this.updateDependentFields();\n  }\n}\n\nexport {PhysicsState};\n\n/**\n * @typedef {Object} DynamicsConfig\n * @property {vec3} [position]\n * @property {vec3} [momentum]\n * @property {quat} [orientation]\n * @property {vec3} [angularMomentum]\n * @property {number} [mass]\n * @property {mat3} [unrotatedInertiaTensor]\n */\n","export * from './src/force-utils';\nexport * from './src/geometry';\nexport * from './src/inertia-tensor-utils';\nexport * from './src/util';\n","/**\n * This module defines a collection of static general utility functions for calculating forces.\n */\n\n/**\n * @param {GravityApplierConfig} config\n * @param {ForceApplierOutput} output\n * @param {ForceApplierInput} input\n */\nfunction applyGravity(config, output, input) {\n  vec3.scaleAndAdd(output.force, output.force, config._gravityVec, input.state.mass);\n}\n\n/**\n * @param {LinearDragApplierConfig} config\n * @param {ForceApplierOutput} output\n * @param {ForceApplierInput} input\n */\nfunction applyLinearDrag(config, output, input) {\n  const dragMagnitude = -vec3.squaredLength(input.state.velocity) * config.linearDragCoefficient;\n  vec3.normalize(_vec3, input.state.velocity);\n  vec3.scaleAndAdd(output.force, output.force, _vec3, dragMagnitude);\n}\n\n/**\n * @param {AngularDragApplierConfig} config\n * @param {ForceApplierOutput} output\n * @param {ForceApplierInput} input\n */\nfunction applyAngularDrag(config, output, input) {\n  vec3.scaleAndAdd(output.torque, output.torque, input.state.angularVelocity,\n      config.angularDragCoefficient);\n}\n\n/**\n * Applies a simple linear spring force (using Hooke's law).\n *\n * force = displacement * coefficient\n *\n * @param {LinearSpringForceApplierConfig} config\n * @param {ForceApplierOutput} output\n * @param {ForceApplierInput} input\n */\nfunction applyLinearSpringForce(config, output, input) {\n  vec3.subtract(_vec3, config.getIntendedPosition(), input.state.position);\n  vec3.scaleAndAdd(output.force, output.force, _vec3, config.springCoefficient);\n}\n\n/**\n * @param {SpringDampingApplierConfig} config\n * @param {ForceApplierOutput} output\n * @param {ForceApplierInput} input\n */\nfunction applySpringDamping(config, output, input) {\n  vec3.scale(_vec3, input.state.velocity, -config.dampingCoefficient);\n  vec3.add(output.force, output.force, _vec3);\n}\n\nconst _vec3 = vec3.create();\n\nexport {\n  applyAngularDrag,\n  applyGravity,\n  applyLinearDrag,\n  applyLinearSpringForce,\n  applySpringDamping,\n}\n\n/**\n * @typedef {Object} GravityApplierConfig\n * @property {vec3} _gravityVec\n */\n\n/**\n * @typedef {Object} LinearDragApplierConfig\n * @property {number} linearDragCoefficient\n */\n\n/**\n * @typedef {Object} AngularDragApplierConfig\n * @property {number} angularDragCoefficient\n */\n\n/**\n * @typedef {Object} LinearSpringForceApplierConfig\n * @property {number} springCoefficient\n * @property {Function.<vec3>} getIntendedPosition\n */\n\n/**\n * @typedef {Object} SpringDampingApplierConfig\n * @property {number} dampingCoefficient\n */\n","/**\n * This module defines a collection of static geometry utility functions.\n */\n\nconst EPSILON = 0.0000001;\nconst HALF_PI = Math.PI / 2;\nconst TWO_PI = Math.PI * 2;\n\n/**\n * Finds the minimum squared distance between two line segments.\n *\n * @param {LineSegment} segmentA\n * @param {LineSegment} segmentB\n * @returns {number}\n */\nfunction findSquaredDistanceBetweenSegments(segmentA, segmentB) {\n  findClosestPointsFromSegmentToSegment(_segmentDistance_tmpVecA, _segmentDistance_tmpVecB,\n      segmentA, segmentB);\n  return vec3.squaredDistance(_segmentDistance_tmpVecA, _segmentDistance_tmpVecB);\n}\n\n/**\n * Finds the minimum squared distance between a line segment and a point.\n *\n * @param {LineSegment} segment\n * @param {vec3} point\n * @returns {number}\n */\nfunction findSquaredDistanceFromSegmentToPoint(segment, point) {\n  findClosestPointOnSegmentToPoint(_segmentDistance_tmpVecA, segment, point);\n  return vec3.squaredDistance(_segmentDistance_tmpVecA, point);\n}\n\nconst _segmentDistance_tmpVecA = vec3.create();\nconst _segmentDistance_tmpVecB = vec3.create();\n\n/**\n * @param {vec3} outputPoint Output parameter.\n * @param {Aabb} aabb\n * @param {vec3} targetPoint\n */\nfunction findClosestPointFromAabbToPoint(outputPoint, aabb, targetPoint) {\n  outputPoint[0] = aabb.minX > targetPoint[0]\n      ? aabb.minX\n      : aabb.maxX < targetPoint[0]\n          ? aabb.maxX\n          : targetPoint[0];\n  outputPoint[1] = aabb.minY > targetPoint[1]\n      ? aabb.minY\n      : aabb.maxY < targetPoint[1]\n          ? aabb.maxY\n          : targetPoint[1];\n  outputPoint[2] = aabb.minZ > targetPoint[2]\n      ? aabb.minZ\n      : aabb.maxZ < targetPoint[2]\n          ? aabb.maxZ\n          : targetPoint[2];\n}\n\n/**\n * @param {vec3} outputPoint Output parameter.\n * @param {Aabb} aabb\n * @param {vec3} targetPoint\n */\nfunction findClosestPointFromAabbSurfaceToPoint(outputPoint, aabb, targetPoint) {\n  findClosestPointFromAabbToPoint(outputPoint, aabb, targetPoint);\n\n  // If the calculated point lies within the AABB, then we need to adjust one coordinate to lie\n  // along the edge of the AABB.\n  if (aabbVsPoint(aabb, outputPoint)) {\n    // Calculate the closest vertex.\n    _tmpVec1[0] = targetPoint[0] - aabb.minX < aabb.maxX - targetPoint[0]\n        ? aabb.minX\n        : aabb.maxX;\n    _tmpVec1[1] = targetPoint[1] - aabb.minY < aabb.maxY - targetPoint[1]\n        ? aabb.minY\n        : aabb.maxY;\n    _tmpVec1[2] = targetPoint[2] - aabb.minZ < aabb.maxZ - targetPoint[2]\n        ? aabb.minZ\n        : aabb.maxZ;\n\n    // Calculate the distance to the vertex along each dimension.\n    _tmpVec2[0] = _tmpVec1[0] - outputPoint[0];\n    _tmpVec2[0] = _tmpVec2[0] < 0 ? -_tmpVec2[0] : _tmpVec2[0];\n    _tmpVec2[1] = _tmpVec1[1] - outputPoint[1];\n    _tmpVec2[1] = _tmpVec2[1] < 1 ? -_tmpVec2[1] : _tmpVec2[1];\n    _tmpVec2[2] = _tmpVec1[2] - outputPoint[2];\n    _tmpVec2[2] = _tmpVec2[2] < 2 ? -_tmpVec2[2] : _tmpVec2[2];\n\n    // Determine along which dimension the point is closest to the AABB.\n    const index = _tmpVec2[0] < _tmpVec2[1]\n        ? (_tmpVec2[0] < _tmpVec2[2]\n            ? 0\n            : 2)\n        : (_tmpVec2[1] < _tmpVec2[2]\n            ? 1\n            : 2);\n\n    outputPoint[index] = _tmpVec1[index];\n  }\n}\n\n/**\n * Finds the point of intersection between a line segment and a coplanar quadrilateral.\n *\n * This assumes the region is not degenerate (has non-zero side lengths).\n *\n * @param {vec3} poi Output param. Null if there is no intersection.\n * @param {LineSegment} segment\n * @param {vec3} planeVertex1\n * @param {vec3} planeVertex2\n * @param {vec3} planeVertex3\n * @param {vec3} planeVertex4\n * @returns {boolean} True if there is an intersection.\n */\nfunction findPoiBetweenSegmentAndPlaneRegion(poi, segment, planeVertex1, planeVertex2, planeVertex3,\n                                             planeVertex4) {\n  return findPoiBetweenSegmentAndTriangle(poi, segment, planeVertex1, planeVertex2, planeVertex3) ||\n      findPoiBetweenSegmentAndTriangle(poi, segment, planeVertex1, planeVertex3, planeVertex4);\n}\n\n/**\n * Finds the point of intersection between a line segment and a triangle.\n *\n * This assumes the triangle is not degenerate (has non-zero side lengths).\n *\n * ----------------------------------------------------------------------------\n * Originally based on Dan Sunday's algorithms at http://geomalgorithms.com/a06-_intersect-2.html.\n *\n * Copyright 2001 softSurfer, 2012 Dan Sunday\n * This code may be freely used and modified for any purpose\n * providing that this copyright notice is included with it.\n * SoftSurfer makes no warranty for this code, and cannot be held\n * liable for any real or imagined damage resulting from its use.\n * Users of this code must verify correctness for their application.\n * ----------------------------------------------------------------------------\n *\n * @param {vec3} poi Output param. Null if there is no intersection.\n * @param {LineSegment} segment\n * @param {vec3} triangleVertex1\n * @param {vec3} triangleVertex2\n * @param {vec3} triangleVertex3\n * @returns {boolean} True if there is an intersection.\n */\nfunction findPoiBetweenSegmentAndTriangle(poi, segment, triangleVertex1, triangleVertex2,\n                                          triangleVertex3) {\n  //\n  // Find the point of intersection between the segment and the triangle's plane.\n  //\n\n  // First triangle edge.\n  vec3.subtract(_tmpVec1, triangleVertex2, triangleVertex1);\n  // Second triangle edge.\n  vec3.subtract(_tmpVec2, triangleVertex3, triangleVertex1);\n  // Triangle normal.\n  vec3.cross(_tmpVec3, _tmpVec1, _tmpVec2);\n  // Triangle to segment.\n  vec3.subtract(_tmpVec4, segment.start, triangleVertex1);\n\n  const normalToSegmentProj = vec3.dot(_tmpVec3, segment.dir);\n\n  if (normalToSegmentProj < EPSILON && normalToSegmentProj > -EPSILON) {\n    // The line segment is parallel to the triangle.\n    return false;\n  }\n\n  const normalToDiffProj = -vec3.dot(_tmpVec3, _tmpVec4);\n  const segmentNormalizedDistance = normalToDiffProj / normalToSegmentProj;\n\n  if (segmentNormalizedDistance < 0 || segmentNormalizedDistance > 1) {\n    // The line segment ends before intersecting the plane.\n    return false;\n  }\n\n  vec3.scaleAndAdd(poi, segment.start, segment.dir, segmentNormalizedDistance);\n\n  //\n  // Determine whether the point of intersection lies within the triangle.\n  //\n\n  const edge1DotEdge1 = vec3.dot(_tmpVec1, _tmpVec1);\n  const edge1DotEdge2 = vec3.dot(_tmpVec1, _tmpVec2);\n  const edge2DotEdge2 = vec3.dot(_tmpVec2, _tmpVec2);\n  // Triangle to point of intersection.\n  vec3.subtract(_tmpVec3, poi, triangleVertex1);\n  const diffDotEdge1 = vec3.dot(_tmpVec3, _tmpVec1);\n  const diffDotEdge2 = vec3.dot(_tmpVec3, _tmpVec2);\n  const denominator = edge1DotEdge2 * edge1DotEdge2 - edge1DotEdge1 * edge2DotEdge2;\n\n  // Check the triangle's parametric coordinates.\n  const s = (edge1DotEdge2 * diffDotEdge2 - edge2DotEdge2 * diffDotEdge1) / denominator;\n  if (s < 0 || s > 1) {\n    return false;\n  }\n  const t = (edge1DotEdge2 * diffDotEdge1 - edge1DotEdge1 * diffDotEdge2) / denominator;\n  if (t < 0 || s + t > 1) {\n    return false;\n  }\n\n  return true;\n}\n\n/**\n * ----------------------------------------------------------------------------\n * Originally based on Jukka Jylänki's algorithm at\n * https://github.com/juj/MathGeoLib/blob/1093e39d91def7ff6905fb7489893190d7d81353/src/Geometry/OBB.cpp.\n *\n * Copyright 2011 Jukka Jylänki\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * ----------------------------------------------------------------------------\n *\n * @param {vec3} outputPoint Output parameter.\n * @param {Obb} obb\n * @param {vec3} targetPoint\n */\nfunction findClosestPointFromObbToPoint(outputPoint, obb, targetPoint) {\n  vec3.subtract(_tmpVec1, targetPoint, obb.centerOfVolume);\n  vec3.copy(outputPoint, obb.centerOfVolume);\n  for (let i = 0; i < 3; i++) {\n    // Compute the displacement along this axis.\n    let projection = vec3.dot(obb.axes[i], _tmpVec1);\n    projection = projection > obb.halfSideLengths[i] ? obb.halfSideLengths[i] :\n        (projection < -obb.halfSideLengths[i] ? -obb.halfSideLengths[i] : projection);\n    vec3.scaleAndAdd(outputPoint, outputPoint, obb.axes[i], projection);\n  }\n}\n\n/**\n * Finds the closest position on one line segment to the other line segment, and vice versa.\n *\n * ----------------------------------------------------------------------------\n * Originally based on Jukka Jylänki's algorithm at\n * https://github.com/juj/MathGeoLib/blob/ff2d348a167008c831ae304483b824647f71fbf6/src/Geometry/LineSegment.cpp.\n *\n * Copyright 2011 Jukka Jylänki\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * ----------------------------------------------------------------------------\n *\n * @param {vec3} closestA Output param.\n * @param {vec3} closestB Output param.\n * @param {LineSegment} segmentA\n * @param {LineSegment} segmentB\n */\nfunction findClosestPointsFromSegmentToSegment(closestA, closestB, segmentA, segmentB) {\n  const {distA, distB} = findClosestPointsFromLineToLine(\n      segmentA.start, segmentA.dir, segmentB.start, segmentB.dir);\n\n  const isDistAInBounds = distA >= 0 && distA <= 1;\n  const isDistBInBounds = distB >= 0 && distB <= 1;\n\n  if (isDistAInBounds) {\n    if (isDistBInBounds) {\n      // The distances along both line segments are within bounds.\n      vec3.scaleAndAdd(closestA, segmentA.start, segmentA.dir, distA);\n      vec3.scaleAndAdd(closestB, segmentB.start, segmentB.dir, distB);\n    } else {\n      // Only the distance along the first line segment is within bounds.\n      if (distB < 0) {\n        vec3.copy(closestB, segmentB.start);\n      } else {\n        vec3.copy(closestB, segmentB.end);\n      }\n      findClosestPointOnSegmentToPoint(closestA, segmentA, closestB);\n    }\n  } else {\n    if (isDistBInBounds) {\n      // Only the distance along the second line segment is within bounds.\n      if (distA < 0) {\n        vec3.copy(closestA, segmentA.start);\n      } else {\n        vec3.copy(closestA, segmentA.end);\n      }\n      findClosestPointOnSegmentToPoint(closestB, segmentB, closestA);\n    } else {\n      // Neither of the distances along either line segment are within bounds.\n      if (distA < 0) {\n        vec3.copy(closestA, segmentA.start);\n      } else {\n        vec3.copy(closestA, segmentA.end);\n      }\n\n      if (distB < 0) {\n        vec3.copy(closestB, segmentB.start);\n      } else {\n        vec3.copy(closestB, segmentB.end);\n      }\n\n      const altClosestA = vec3.create();\n      const altClosestB = vec3.create();\n\n      findClosestPointOnSegmentToPoint(altClosestA, segmentA, closestB);\n      findClosestPointOnSegmentToPoint(altClosestB, segmentB, closestA);\n\n      if (vec3.squaredDistance(altClosestA, closestB) <\n          vec3.squaredDistance(altClosestB, closestA)) {\n        vec3.copy(closestA, altClosestA);\n      } else {\n        vec3.copy(closestB, altClosestB);\n      }\n    }\n  }\n}\n\n/**\n * Finds the closest position on a line segment to a point.\n *\n * ----------------------------------------------------------------------------\n * Originally based on Jukka Jylänki's algorithm at\n * https://github.com/juj/MathGeoLib/blob/ff2d348a167008c831ae304483b824647f71fbf6/src/Geometry/LineSegment.cpp.\n *\n * Copyright 2011 Jukka Jylänki\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * ----------------------------------------------------------------------------\n *\n * @param {vec3} closestPoint Output param.\n * @param {LineSegment} segment\n * @param {vec3} point\n * @private\n */\nfunction findClosestPointOnSegmentToPoint(closestPoint, segment, point) {\n  const dirSquaredLength = vec3.squaredLength(segment.dir);\n\n  if (!dirSquaredLength) {\n    // The point is at the segment start.\n    vec3.copy(closestPoint, segment.start);\n  } else {\n    // Calculate the projection of the point onto the line extending through the segment.\n    vec3.subtract(_tmpVec1, point, segment.start);\n    const t = vec3.dot(_tmpVec1, segment.dir) / dirSquaredLength;\n\n    if (t < 0) {\n      // The point projects beyond the segment start.\n      vec3.copy(closestPoint, segment.start);\n    } else if (t > 1) {\n      // The point projects beyond the segment end.\n      vec3.copy(closestPoint, segment.end);\n    } else {\n      // The point projects between the start and end of the segment.\n      vec3.scaleAndAdd(closestPoint, segment.start, segment.dir, t);\n    }\n  }\n}\n\n/**\n * Finds the closest position on one line to the other line, and vice versa.\n *\n * The positions are represented as scalar-value distances from the \"start\" positions of each line.\n * These are scaled according to the given direction vectors.\n *\n * ----------------------------------------------------------------------------\n * Originally based on Jukka Jylänki's algorithm at\n * https://github.com/juj/MathGeoLib/blob/ff2d348a167008c831ae304483b824647f71fbf6/src/Geometry/Line.cpp.\n *\n * Copyright 2011 Jukka Jylänki\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * ----------------------------------------------------------------------------\n *\n * @param {vec3} startA The start position of line A.\n * @param {vec3} dirA The (unnormalized) direction of line A. Cannot be zero.\n * @param {vec3} startB The start position of line B.\n * @param {vec3} dirB The (unnormalized) direction of line B. Cannot be zero.\n * @returns {{distA: Number, distB: Number}}\n */\nfunction findClosestPointsFromLineToLine(startA, dirA, startB, dirB) {\n  vec3.subtract(_tmpVec1, startA, startB);\n  const dirBDotDirAToB = vec3.dot(dirB, _tmpVec1);\n  const dirADotDirAToB = vec3.dot(dirA, _tmpVec1);\n\n  const sqrLenDirB = vec3.squaredLength(dirB);\n  const sqrLenDirA = vec3.squaredLength(dirA);\n\n  const dirADotDirB = vec3.dot(dirA, dirB);\n\n  const denominator = sqrLenDirA * sqrLenDirB - dirADotDirB * dirADotDirB;\n\n  const distA = denominator < EPSILON\n      ? 0\n      : (dirADotDirB * dirBDotDirAToB - sqrLenDirB * dirADotDirAToB) / denominator;\n  const distB = (dirBDotDirAToB + dirADotDirB * distA) / sqrLenDirB;\n\n  return {\n    distA: distA,\n    distB: distB\n  };\n}\n\n/**\n * A good description of why we need these special operations for rotating tensors can be found\n * here: http://www.randygaul.net/2014/04/09/transformations-change-of-basis-matrix/.\n *\n * @param {mat3} output Output param.\n * @param {mat3} tensor\n * @param {quat} rotation\n */\nfunction rotateTensor(output, tensor, rotation) {// TODO: Test this somehow...\n  mat3.fromQuat(_tmpMat, rotation);\n  mat3.multiply(output, _tmpMat, tensor);\n  mat3.invert(_tmpMat, _tmpMat);\n  mat3.multiply(output, output, _tmpMat);\n}\n\n/**\n * @param {Aabb} aabb\n * @param {vec3} point\n * @returns {boolean}\n */\nfunction aabbVsPoint(aabb, point) {\n  return point[0] >= aabb.minX && point[0] <= aabb.maxX &&\n      point[1] >= aabb.minY && point[1] <= aabb.maxY &&\n      point[2] >= aabb.minZ && point[2] <= aabb.maxZ\n}\n\n/**\n * @param {quat} out\n * @param {quat} a\n * @param {quat} b\n * @param {number} scale\n * @returns {quat}\n */\nfunction scaleAndAddQuat(out, a, b, scale) {\n  return quat.set(out,\n      a[0] + b[0] * scale,\n      a[1] + b[1] * scale,\n      a[2] + b[2] * scale,\n      a[3] + b[3] * scale);\n}\n\n/**\n * @param {vec3} a\n * @param {vec3} b\n * @returns {boolean}\n */\nfunction areVec3sClose(a, b) {\n  for (let i = 0; i < 3; i++) {\n    if (a[i] - b[i] > EPSILON || b[i] - a[i] > EPSILON) {\n      return false;\n    }\n  }\n  return true;\n}\n\n// Re-used across the geometry utility functions, so we don't instantiate as many vec3 objects.\nconst _tmpVec1 = vec3.create();\nconst _tmpVec2 = vec3.create();\nconst _tmpVec3 = vec3.create();\nconst _tmpVec4 = vec3.create();\nconst _tmpMat = mat3.create();\n\n// Exposed to consumers, so they don't have to instantiate as many vec3 objects.\nconst tmpVec1 = vec3.create();\nconst tmpVec2 = vec3.create();\nconst tmpVec3 = vec3.create();\nconst tmpVec4 = vec3.create();\n\nconst _geometry = {\n  EPSILON,\n  HALF_PI,\n  TWO_PI,\n  scaleAndAddQuat,\n};\n\nexport {\n  _geometry,\n  tmpVec1,\n  tmpVec2,\n  tmpVec3,\n  tmpVec4,\n  findSquaredDistanceBetweenSegments,\n  findSquaredDistanceFromSegmentToPoint,\n  findClosestPointFromAabbToPoint,\n  findClosestPointFromAabbSurfaceToPoint,\n  findPoiBetweenSegmentAndTriangle,\n  findPoiBetweenSegmentAndPlaneRegion,\n  findClosestPointFromObbToPoint,\n  findClosestPointsFromSegmentToSegment,\n  findClosestPointOnSegmentToPoint,\n  findClosestPointsFromLineToLine,\n  rotateTensor,\n  aabbVsPoint,\n  areVec3sClose,\n};\n","/**\n * This module defines a collection of static utility functions for calculating inertia tensors.\n */\n\nimport {_geometry, rotateTensor} from './geometry';\n\n/**\n * @param {number} radius\n * @param {number} mass\n * @returns {mat3}\n */\nfunction createSphereInertiaTensor(radius, mass) {// TODO: Test this somehow...\n  const tensor = mat3.create();\n  const moment = 2 / 5 * mass * radius * radius;\n  tensor[0] = moment;\n  tensor[4] = moment;\n  tensor[8] = moment;\n  return tensor;\n}\n\n/**\n * @param {number} rangeX\n * @param {number} rangeY\n * @param {number} rangeZ\n * @param {number} mass\n * @returns {mat3}\n */\nfunction createBoxInertiaTensor(rangeX, rangeY, rangeZ, mass) {// TODO: Test this somehow...\n  const tensor = mat3.create();\n  const tmp = mass / 12;\n  const xRangeSquared = rangeX * rangeX;\n  const yRangeSquared = rangeY * rangeY;\n  const zRangeSquared = rangeZ * rangeZ;\n  tensor[0] = tmp * (yRangeSquared + zRangeSquared);\n  tensor[4] = tmp * (xRangeSquared + yRangeSquared);\n  tensor[8] = tmp * (xRangeSquared + zRangeSquared);\n  return tensor;\n}\n\n/**\n * ----------------------------------------------------------------------------\n * Originally based on Bojan Lovrovic's algorithm at\n * http://www.gamedev.net/page/resources/_/technical/math-and-physics/capsule-inertia-tensor-r3856.\n *\n * Copyright 2014 Bojan Lovrovic\n *\n * GameDev.net Open License\n * (http://www.gamedev.net/page/resources/_/gdnethelp/gamedevnet-open-license-r2956)\n *\n * TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n *\n * 1. Definitions.\n *\n * \"Article\" shall refer to any body of text written by Author which describes and documents the use\n * and/or operation of Source. It specifically does not refer to any accompanying Source either\n * embedded within the body of text or attached to the article as a file.\n *\n * \"Author\" means the individual or entity that offers the Work under the terms of this License.\n *\n * \"License\" shall mean the terms and conditions for use, reproduction, and distribution as defined\n * by Sections 1 through 9 of this document.\n *\n * \"Licensor\" shall mean the copyright owner or entity authorized by the copyright owner that is\n * granting the License.\n *\n * \"You\" (or \"Your\") shall mean an individual or entity exercising permissions granted by this\n * License.\n *\n * \"Source\" shall include all software text source code and configuration files used to create\n * executable software\n *\n * \"Object\" shall mean any Source which has been converted into a machine executable software\n *\n * \"Work\" consists of both the Article and Source\n *\n * \"Publisher\" refers to GameDev.net LLC\n *\n * This agreement is between You and Author, the owner and creator of the Work located at\n * Gamedev.net.\n *\n * 2. Fair Dealing Rights.\n *\n * Nothing in this License is intended to reduce, limit, or restrict any uses free from copyright or\n * rights arising from limitations or exceptions that are provided for in connection with the\n * copyright protection under copyright law or other applicable laws.\n *\n * 3. Grant of Copyright License.\n *\n * Subject to the terms and conditions of this License, the Author hereby grants to You a perpetual,\n * worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to the Work\n * under the following stated terms:\n * You may not reproduce the Article on any other website outside of Gamedev.net without express\n * written permission from the Author\n * You may use, copy, link, modify and distribute under Your own terms, binary Object code versions\n * based on the Work in your own software\n * You may reproduce, prepare derivative Works of, publicly display, publicly perform, sublicense,\n * and distribute the Source and such derivative Source in Source form only as part of a larger\n * software distribution and provided that attribution to the original Author is granted.\n * The origin of this Work must not be misrepresented; you must not claim that you wrote the\n * original Source. If you use this Source in a product, an acknowledgment of the Author name would\n * be appreciated but is not required.\n *\n * 4. Restrictions.\n *\n * The license granted in Section 3 above is expressly made subject to and limited by the following\n * restrictions:\n * Altered Source versions must be plainly marked as such, and must not be misrepresented as being\n * the original software.\n * This License must be visibly linked to from any online distribution of the Article by URI and\n * using the descriptive text \"Licensed under the GameDev.net Open License\"\n * Neither the name of the Author of this Work, nor any of their trademarks or service marks, may be\n * used to endorse or promote products derived from this Work without express prior permission of\n * the Author\n * Except as expressly stated herein, nothing in this License grants any license to Author's\n * trademarks, copyrights, patents, trade secrets or any other intellectual property. No license is\n * granted to the trademarks of Author even if such marks are included in the Work. Nothing in this\n * License shall be interpreted to prohibit Author from licensing under terms different from this\n * License any Work that Author otherwise would have a right to license.\n *\n * 5. Grant of Patent License.\n *\n * Subject to the terms and conditions of this License, each Contributor hereby grants to You a\n * perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in\n * this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise\n * transfer the Work, where such license applies only to those patent claims licensable by such\n * Contributor that are necessarily infringed by their Contribution(s) alone or by combination of\n * their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute\n * patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit)\n * alleging that the Work or Source incorporated within the Work constitutes direct or contributory\n * patent infringement, then any patent licenses granted to You under this License for that Work\n * shall terminate as of the date such litigation is filed.\n *\n * 6. Limitation of Liability.\n *\n * In no event and under no legal theory, whether in tort (including negligence), contract, or\n * otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or\n * agreed to in writing, shall any Author or Publisher be liable to You for damages, including any\n * direct, indirect, special, incidental, or consequential damages of any character arising as a\n * result of this License or out of the use or inability to use the Work (including but not limited\n * to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all\n * other commercial damages or losses), even if such Author has been advised of the possibility of\n * such damages.\n *\n * 7. DISCLAIMER OF WARRANTY\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT\n * NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n *\n * 8. Publisher.\n *\n * The parties hereby confirm that the Publisher shall not, under any circumstances, be responsible\n * for and shall not have any liability in respect of the subject matter of this License. The\n * Publisher makes no warranty whatsoever in connection with the Work and shall not be liable to You\n * or any party on any legal theory for any damages whatsoever, including without limitation any\n * general, special, incidental or consequential damages arising in connection to this license. The\n * Publisher reserves the right to cease making the Work available to You at any time without notice\n *\n * 9. Termination\n *\n * This License and the rights granted hereunder will terminate automatically upon any breach by You\n * of the terms of this License. Individuals or entities who have received Deriviative Works from\n * You under this License, however, will not have their licenses terminated provided such\n * individuals or entities remain in full compliance with those licenses. Sections 1, 2, 6, 7, 8 and\n * 9 will survive any termination of this License.\n * Subject to the above terms and conditions, the license granted here is perpetual (for the\n * duration of the applicable copyright in the Work). Notwithstanding the above, Licensor reserves\n * the right to release the Work under different license terms or to stop distributing the Work at\n * any time; provided, however that any such election will not serve to withdraw this License (or\n * any other license that has been, or is required to be, granted under the terms of this License),\n * and this License will continue in full force and effect unless terminated as stated above.\n * ----------------------------------------------------------------------------\n *\n * @param {number} halfDistance\n * @param {number} radius\n * @param {number} mass\n * @returns {mat3}\n */\nfunction createCapsuleInertiaTensor(halfDistance, radius, mass) {// TODO: Test this somehow...\n  const tensor = mat3.create();\n\n  const cylinderHeight = halfDistance * 2;\n  const radiusSquared = radius * radius;\n  const cylinderVolume = Math.PI * radiusSquared * cylinderHeight;\n  const hemisphereCombinedVolume = 4 / 3 * Math.PI * radiusSquared;\n  const cylinderMass = cylinderVolume / (cylinderVolume * hemisphereCombinedVolume) * mass;\n  const hemisphereMass = (mass - cylinderMass) / 2;\n\n  // Contribution from the cylinder.\n  tensor[4] = radiusSquared * cylinderMass / 2;\n  tensor[0] = tensor[4] / 2 + cylinderMass * cylinderHeight * cylinderHeight / 12;\n  tensor[8] = tensor[0];\n\n  // Contributions from the hemispheres.\n  const tmp1 = hemisphereMass * 2 * radiusSquared / 5;\n  tensor[4] += tmp1 * 2;\n  const tmp2 =\n      (tmp1 + hemisphereMass * (halfDistance * halfDistance + 3 / 8 * cylinderHeight * radius)) * 2;\n  tensor[0] += tmp2;\n  tensor[8] += tmp2;\n\n  // The above calculations assume the capsule is aligned along the y-axis. However, our default\n  // capsule orientation is aligned along the z-axis.\n  const rotation = quat.create();\n  quat.rotateX(rotation, rotation, _geometry.HALF_PI);\n  rotateTensor(tensor, tensor, rotation);\n\n  return tensor;\n}\n\n/**\n * @param {Collidable} collidable\n * @param {number} mass\n * @returns {mat3}\n */\nfunction createForCollidable(collidable, mass) {\n  switch (collidable.constructor.name) {\n    case 'Sphere':\n      return createSphereInertiaTensor(collidable.radius, mass);\n    case 'Aabb':\n      return createBoxInertiaTensor(collidable.rangeX, collidable.rangeY, collidable.rangeZ, mass);\n    case 'Capsule':\n      return createCapsuleInertiaTensor(collidable.halfDistance, collidable.radius, mass);\n    case 'Obb':\n      return createBoxInertiaTensor(collidable.halfSideLengths[0] * 2,\n          collidable.halfSideLengths[1] * 2, collidable.halfSideLengths[2] * 2, mass);\n  }\n}\n\nexport {\n  createSphereInertiaTensor,\n  createBoxInertiaTensor,\n  createCapsuleInertiaTensor,\n  createForCollidable,\n};\n","/**\n * This module defines a collection of static general utility functions.\n */\n\n// TODO: This should be set from somewhere else (probably as a param to controller like before; but then I need to make this updatable)\nconst isInDevMode = true;\n\nconst _util = {\n  isInDevMode: isInDevMode\n};\n\nexport {\n  _util,\n};\n","export * from './src/box-config';\nexport * from './src/camera-config';\nexport * from './src/camera-folder-config';\nexport * from './src/capsule-config';\nexport * from './src/general-config';\nexport * from './src/physics-config';\nexport * from './src/physics-folder-config';\nexport * from './src/sphere-config';\nexport * from './src/wall-config';\n","/**\n * This module handles configuration parameters relating to an OBB/ABB object.\n */\n\nconst boxConfig = {};\n\nboxConfig.scale = {\n  start: vec3.fromValues(1, 1, 1),\n  min: vec3.fromValues(0.01, 0.01, 0.01),\n  max: vec3.fromValues(100, 100, 100)\n};\n\nconst boxFolderConfig = {\n  label: 'Box',\n  config: boxConfig,\n  isOpen: true\n};\n\nexport {boxConfig, boxFolderConfig};\n","/**\n * This module handles configuration parameters relating to the camera. This uses the dat.GUI\n * package.\n */\n\n// TODO: Tie this into the folder-config system.\n\nimport {degToRad} from 'gamex';\n\nconst cameraConfig = {};\n\ncameraConfig.fovY = degToRad(70.0);\ncameraConfig.zNear = 0.1;\ncameraConfig.zFar = 4000;\ncameraConfig.defaultAspectRatio = 16 / 9;\ncameraConfig._defaultLookAtDirection = vec3.fromValues(0, 0, -1);\n\nconst fixedCameraConfig = {};\n\nfixedCameraConfig.position = {\n  start: vec3.fromValues(0, -40, 5),\n  min: vec3.fromValues(-200, -200, -200),\n  max: vec3.fromValues(200, 200, 200)\n};\nfixedCameraConfig.viewDirection = {\n  start: vec3.fromValues(0, 1, -.5),\n  min: vec3.fromValues(-1, -1, -1),\n  max: vec3.fromValues(1, 1, 1)\n};\nfixedCameraConfig._up = vec3.fromValues(0, 0, 1);\n\nconst followCameraConfig = {};\n\nfollowCameraConfig.springCoefficient = 0.003;\nfollowCameraConfig.dampingCoefficient = 0.09;\n\nfollowCameraConfig.intendedDistanceFromTarget = {\n  start: 6,\n  min: 0,\n  max: 100\n};\nfollowCameraConfig.intendedRotationAngleFromTarget = {\n  start: -Math.PI * .15,\n  min: 0,\n  max: 2 * Math.PI\n};\nfollowCameraConfig.intendedRotationAxisFromTarget = vec3.fromValues(1, 0, 0);\nfollowCameraConfig._intendedTranslationFromTarget = vec3.create();\n\nfunction updateIntendedTranslationFromTarget() {\n  const transformation = mat4.create();\n  mat4.rotate(\n      transformation,\n      transformation,\n      followCameraConfig.intendedRotationAngleFromTarget,\n      followCameraConfig.intendedRotationAxisFromTarget);\n  mat4.translate(\n      transformation,\n      transformation,\n      vec3.fromValues(0, 0, followCameraConfig.intendedDistanceFromTarget));\n  vec3.transformMat4(\n      followCameraConfig._intendedTranslationFromTarget,\n      followCameraConfig._intendedTranslationFromTarget,\n      transformation);\n}\n\nconst normalizeFixedViewDirection =\n    () => vec3.normalize(fixedCameraConfig.viewDirection, fixedCameraConfig.viewDirection);\nconst normalizeDefaultLookAtDirection =\n    () => vec3.normalize(cameraConfig._defaultLookAtDirection,\n        cameraConfig._defaultLookAtDirection);\n\nconst cameraConfigUpdaters = {\n  updateIntendedTranslationFromTarget: updateIntendedTranslationFromTarget,\n  normalizeFixedViewDirection: normalizeFixedViewDirection,\n  normalizeDefaultLookAtDirection: normalizeDefaultLookAtDirection,\n};\n\nnormalizeDefaultLookAtDirection();\n\nexport {cameraConfig, fixedCameraConfig, followCameraConfig, cameraConfigUpdaters};\n","import {\n  cameraConfig,\n  fixedCameraConfig,\n  followCameraConfig,\n  cameraConfigUpdaters\n} from './camera-config';\n\n/**\n * This module configures the camera dat.GUI menu folder.\n */\n\nconst fixedCameraFolderConfig = {\n  label: 'Fixed Camera',\n  config: fixedCameraConfig,\n  isOpen: true,\n  onChangeListeners: {\n    'viewDirection': cameraConfigUpdaters.normalizeFixedViewDirection\n  }\n};\n\nconst followCameraFolderConfig = {\n  label: 'Follow Camera',\n  config: followCameraConfig,\n  isOpen: false,\n  onChangeListeners: {\n    'intendedDistanceFromTarget': cameraConfigUpdaters.updateIntendedTranslationFromTarget,\n    'intendedRotationAngleFromTarget': cameraConfigUpdaters.updateIntendedTranslationFromTarget,\n    'intendedRotationAxisFromTarget': cameraConfigUpdaters.updateIntendedTranslationFromTarget\n  }\n};\n\nconst cameraFolderConfig = {\n  label: 'Camera',\n  config: cameraConfig,\n  isOpen: true\n};\n\nexport {cameraFolderConfig, fixedCameraFolderConfig, followCameraFolderConfig};\n","/**\n * This module handles configuration parameters relating to a capsule object.\n */\n\nconst capsuleConfig = {};\n\ncapsuleConfig.sphericalTesselationCount = {\n  start: 8,\n  min: 0,\n  max: 20\n};\ncapsuleConfig.radius = {\n  start: 1,\n  min: 0,\n  max: 16\n};\ncapsuleConfig.capsuleEndPointsDistance = {\n  start: 3,\n  min: 0,\n  max: 16\n};\n\nconst capsuleFolderConfig = {\n  label: 'Capsule',\n  config: capsuleConfig,\n  isOpen: true\n};\n\nexport {capsuleConfig, capsuleFolderConfig};\n","/**\n * This module handles general configuration parameters.\n */\n\nconst generalConfig = {};\n\ngeneralConfig.useSmoothShading = false;\ngeneralConfig.texturePath = {\n  start: 'images/textures/test-image.png',\n  options: [\n    'images/textures/test-image.png',\n    'images/textures/metal/metal1.png',\n    'images/textures/metal/metal2.png',\n    'images/textures/metal/metal3.png',\n    'images/textures/metal/metal4.png',\n    'images/textures/metal/metal5.png',\n    'images/textures/metal/metal6.png',\n    'images/textures/metal/metal7.png',\n    'images/textures/metal/metal8.png'\n  ]\n};\ngeneralConfig.shaderProgram = {\n  start: 'general-model-program',\n  options: [\n    'general-model-program',\n    // TODO: Add others\n  ]\n};\n// TODO: Use these\n//generalConfig.color = {\n//   h: ,\n//   s: ,\n//   l:\n// };\n//generalConfig.shader = ;\n//generalConfig.lights = [\n//    {\n//        color: ,\n//        x: ,\n//        y: ,\n//        z:\n//    },\n//    {\n//        color: ,\n//        x: ,\n//        y: ,\n//        z:\n//    },\n//    {\n//        color: ,\n//        x: ,\n//        y: ,\n//        z:\n//    }\n//];\n//generalConfig.cameraType = ;\n// TODO: Add other camera param configs\n\ngeneralConfig.clearObjects = () => {};\n\nconst generalFolderConfig = {\n  label: 'General',\n  config: generalConfig,\n  isOpen: true\n};\n\nexport {generalConfig, generalFolderConfig};\n","/**\n * This module handles configuration parameters relating to the physics engine.\n */\n\nconst physicsConfig = {};\n\nphysicsConfig.timeStepDuration = {\n  start: 10,\n  min: 1,\n  max: 1000\n};\nphysicsConfig.gravity = {\n  start: 0.0001,\n  min: -0.001,\n  max: 0.001\n};\nphysicsConfig._gravityVec = vec3.create();\n\nphysicsConfig.linearDragCoefficient = {\n  start: 0.0001,\n  min: 0.0,\n  max: 1.0\n};\nphysicsConfig.angularDragCoefficient = {\n  start: 0.000005,\n  min: 0.0,\n  max: 1.0\n};\nphysicsConfig.coefficientOfRestitution = {\n  start: 0.8,\n  min: 0.0,\n  max: 1.0\n};\nphysicsConfig.coefficientOfFriction = {\n  start: 0.03,\n  min: 0.0,\n  max: 1.0\n};\nphysicsConfig.lowMomentumSuppressionThreshold = {\n  start: 0.000000002,\n  min: 0.0,\n  max: 2.0\n};\nphysicsConfig.lowAngularMomentumSuppressionThreshold = {\n  start: 0.000000001,\n  min: 0.0,\n  max: 2.0\n};\n\nconst physicsConfigUpdaters = {\n  updateGravity: () => vec3.set(physicsConfig._gravityVec, 0, 0, -physicsConfig.gravity)\n};\n\nexport {physicsConfig, physicsConfigUpdaters};\n","import {physicsConfig, physicsConfigUpdaters} from './physics-config';\n\n/**\n * This module configures the physics dat.GUI menu folder.\n */\n\nconst physicsFolderConfig = {\n  label: 'Physics Engine',\n  config: physicsConfig,\n  isOpen: false,\n  onChangeListeners: {\n    'gravity': physicsConfigUpdaters.updateGravity\n  },\n};\n\nexport {physicsFolderConfig};\n","/**\n * This module handles configuration parameters relating to a sphere object.\n */\n\nconst sphereConfig = {};\n\nsphereConfig.sphericalTesselationCount = {\n  start: 8,\n  min: 0,\n  max: 20\n};\nsphereConfig.radius = {\n  start: 1,\n  min: 0,\n  max: 16\n};\n\nconst sphereFolderConfig = {\n  label: 'Sphere',\n  config: sphereConfig,\n  isOpen: true\n};\n\nexport {sphereConfig, sphereFolderConfig};\n","/**\n * This module handles configuration parameters relating to the floor.\n */\n\nconst wallConfig = {};\n\nwallConfig.halfSideLength = 8000;\nwallConfig.thickness = 8000;\nwallConfig.zPosition = 8000;\nwallConfig.useSmoothShading = false;\nwallConfig.texturePath = 'images/textures/metal/metal8.png';\nwallConfig.shaderProgram = 'general-model-program';\nwallConfig.textureSpan = {\n  minX: 0,\n  minY: 0,\n  maxX: 700,\n  maxY: 700\n};\n\nconst wallFolderConfig = {\n  label: 'Wall',\n  config: wallConfig\n};\n\nexport {wallConfig, wallFolderConfig};\n","import {GameController, PhysicsEngine} from 'gamex';\nimport {physicsConfig} from './config';\nimport {SceneImpl} from './model-controllers/scene/scene-impl';\nimport {generalModelProgramWrapperConfig} from './programs';\n\n/**\n * This script defines the top-level logic that bootstraps the application.\n */\n\nwindow.addEventListener('load', _initApp, false);\n\n/**\n * Initializes the app. This is the event handler for the completion of the DOM loading.\n *\n * @private\n */\nfunction _initApp() {\n  console.debug('onDocumentLoad');\n\n  window.removeEventListener('load', _initApp);\n\n  const canvas = document.getElementById('game-area');\n  const controller = new GameController();\n  const programConfigs = [generalModelProgramWrapperConfig];\n  const textures = [\n    'images/textures/test-image.png',\n    'images/textures/metal/metal1.png',\n    'images/textures/metal/metal2.png',\n    'images/textures/metal/metal3.png',\n    'images/textures/metal/metal4.png',\n    'images/textures/metal/metal5.png',\n    'images/textures/metal/metal6.png',\n    'images/textures/metal/metal7.png',\n    'images/textures/metal/metal8.png'\n  ];\n  PhysicsEngine.create(physicsConfig);\n\n  controller.initialize(canvas, programConfigs, textures, SceneImpl)\n      .then(() => controller.run());\n}\n","import {\n  configController,\n  findIntersectingCollidablesForCollidable,\n  randomVec3InRange,\n} from 'gamex';\n\nimport {SimulationConfigController} from '../simulation-config-controller';\n\nimport {\n  generalConfig,\n  physicsConfig,\n} from '../../config';\nimport {SingleObjectController} from '../single-object/single-object-controller';\nimport {dropObjectConfig, dropObjectFolderConfig} from './drop-object-config';\n\n/**\n * This class updates a drop-object simulation according to configuration-change events triggered\n * through the dat.GUI menu.\n */\nclass DropObjectConfigController extends SimulationConfigController {\n  /**\n   * @param {ModelGroupControllerConfig} params\n   */\n  constructor(params) {\n    super(params);\n\n    configController.createFolder(dropObjectFolderConfig, null, {\n      'triggerDrop': () => this._triggerObjectDrop()\n    });\n  }\n\n  _triggerObjectDrop() {\n    // Turn gravity back on (in case it was off from the collision simulator).\n    vec3.set(physicsConfig._gravityVec, 0, 0, -physicsConfig.gravity);\n\n    for (let i = 0; i < dropObjectConfig.count; i++) {\n      this._createNewObject();\n    }\n  }\n\n  /**\n   * @private\n   */\n  _createNewObject() {\n    const modelControllerParams = {\n      gl: this._gl,\n      getViewMatrix: this._getViewMatrix,\n      getProjectionMatrix: this._getProjectionMatrix,\n      getParentWorldTransform: this._getParentWorldTransform,\n      programWrapperId: generalConfig.shaderProgram,\n      texturePath: generalConfig.texturePath,\n    };\n\n    const dynamicsParams = {\n      position: randomVec3InRange(dropObjectConfig.startPositionAvg,\n          dropObjectConfig.startPositionRange),\n      mass: 1,\n    };\n\n    const object = new SingleObjectController(modelControllerParams, dynamicsParams,\n        dropObjectConfig.shape);\n    this._startModelController(object).then(_ensureObjectIsNotColliding);\n  }\n}\n\n/**\n * Adds a z offset to the new object so that it does not collide with any pre-existing objects.\n *\n * @param {SingleObjectController} object\n * @private\n */\nfunction _ensureObjectIsNotColliding(object) {\n  const collidable = object.physicsJob.collidable;\n  let startPosition = object.position;\n  let collidingCollidables = findIntersectingCollidablesForCollidable(collidable);\n  while (collidingCollidables.length) {\n    startPosition[2] += Math.random() * 200 + 4;\n    object.position = startPosition;\n    collidingCollidables = findIntersectingCollidablesForCollidable(collidable);\n  }\n}\n\nexport {DropObjectConfigController};\n","/**\n * This module handles configuration parameters relating to simulations that drop objects.\n */\n\nconst dropObjectConfig = {};\n\ndropObjectConfig.shape = {\n  start: 'RANDOM',\n  options: [\n    'CUBE',\n    'ICOSAHEDRON',\n    'ICOSPHERE',\n    'LAT_LONG_SPHERE',\n    'CAPSULE',\n    'TETRAHEDRON',\n    'RANDOM'\n  ]\n};\ndropObjectConfig.startPositionAvg = {\n  start: vec3.fromValues(0, 10, 0),\n  min: vec3.fromValues(-100, 0, -100),\n  max: vec3.fromValues(100, 300, 100)\n};\ndropObjectConfig.startPositionRange = {\n  start: vec3.fromValues(30, 30, 30),\n  min: vec3.fromValues(0, 0, 0),\n  max: vec3.fromValues(100, 100, 100)\n};\ndropObjectConfig.count = {\n  start: 30,\n  min: 1,\n  max: 100\n};\ndropObjectConfig.triggerDrop = () => {};\n\nconst dropObjectFolderConfig = {\n  label: 'Drop Simulation',\n  config: dropObjectConfig,\n  isOpen: true\n};\n\nexport {dropObjectConfig, dropObjectFolderConfig};\n","import {cameraConfig} from '../../config';\n\n/**\n * This module handles configuration parameters relating to the overall scene.\n */\n\nconst sceneConfig = {};\n\n// Keep this value correlated with cameraConfig.zFar.\nsceneConfig.renderDistance = 4000;\ncameraConfig.zFar = sceneConfig.renderDistance;\n\nconst sceneFolderConfig = {\n  label: 'Scene',\n  config: sceneConfig\n};\n\nexport {sceneConfig, sceneFolderConfig};\n","import {\n  configController,\n  FixedCamera,\n  GameScene,\n  WallController,\n}\nfrom 'gamex';\n\nimport { sceneConfig } from './scene-config';\nimport {\n  boxFolderConfig,\n  cameraConfig,\n  cameraFolderConfig,\n  capsuleFolderConfig,\n  fixedCameraConfig,\n  fixedCameraFolderConfig,\n  generalConfig,\n  generalFolderConfig,\n  physicsFolderConfig,\n  sphereFolderConfig,\n  wallConfig,\n}\nfrom '../../config';\nimport { TriggerCollisionConfigController } from '../trigger-collision/trigger-collision-config-controller';\nimport { DropObjectConfigController } from '../drop-object/drop-object-config-controller';\n\n/**\n * This class handles the overall scene.\n *\n * This includes:\n * - the background\n * - all objects in the foreground\n * - all light sources\n * - the camera\n */\nclass SceneImpl extends GameScene {\n  /**\n   * @param {ModelGroupControllerConfig} modelControllerParams\n   * @param {GameController} gameCtrl\n   * @param {InputController} inputCtrl\n   */\n  constructor(modelControllerParams, gameCtrl, inputCtrl) {\n    super(modelControllerParams, gameCtrl, inputCtrl, sceneConfig.renderDistance);\n\n    this._wallCtrl = null;\n    this._dropBallCtrl = null;\n    this._triggerCollisionCtrl = null;\n\n    this._createModelControllers();\n    this._createConfigController();\n\n    this._camera = new FixedCamera(fixedCameraConfig, cameraConfig);\n  }\n\n  _createModelControllers() {\n    this._wallCtrl = new WallController({\n      gl: this._gl,\n      getViewMatrix: this._getViewMatrix,\n      getProjectionMatrix: this._getProjectionMatrix,\n      getParentWorldTransform: this._getWorldTransform,\n      programWrapperId: wallConfig.shaderProgram,\n      texturePath: wallConfig.texturePath,\n    }, {\n      x: null,\n      y: null,\n      z: -50,\n      isOpenOnPositiveSide: true,\n      thickness: wallConfig.thickness,\n      halfSideLength: wallConfig.halfSideLength,\n      useSmoothShading: wallConfig.useSmoothShading,\n      textureSpan: wallConfig.textureSpan,\n    });\n    this._dropBallCtrl = new DropObjectConfigController({\n      gl: this._gl,\n      getViewMatrix: this._getViewMatrix,\n      getProjectionMatrix: this._getProjectionMatrix,\n      getParentWorldTransform: this._getWorldTransform,\n    });\n    this._triggerCollisionCtrl = new TriggerCollisionConfigController({\n      gl: this._gl,\n      getViewMatrix: this._getViewMatrix,\n      getProjectionMatrix: this._getProjectionMatrix,\n      getParentWorldTransform: this._getWorldTransform,\n    });\n    this._modelCtrls = [\n      this._wallCtrl,\n      this._dropBallCtrl,\n      this._triggerCollisionCtrl,\n    ];\n  }\n\n  _createConfigController() {\n    configController.createFolder(physicsFolderConfig);\n    configController.createFolder(generalFolderConfig, null, {\n      'texturePath': () => this._updateTexture(),\n      'shaderProgram': () => this._updateProgramWrapper(),\n      'clearObjects': () => this._clearObjects(),\n    });\n    configController.createFolder(boxFolderConfig);\n    configController.createFolder(capsuleFolderConfig);\n    configController.createFolder(sphereFolderConfig);\n    configController.createFolder(cameraFolderConfig);\n    // TODO: Update this to support other types of cameras being selected.\n    configController.createFolder(fixedCameraFolderConfig, null, {\n      // These trigger an update within the camera.\n      'viewDirection': () => this._camera.viewDirection = this._camera.viewDirection,\n      'position': () => this._camera.position = this._camera.position\n    });\n  }\n\n  _updateTexture() {\n    if (this._dropBallCtrl) {\n      this._dropBallCtrl.updateTexture(generalConfig.texturePath);\n    }\n    if (this._triggerCollisionCtrl) {\n      this._triggerCollisionCtrl.updateTexture(generalConfig.texturePath);\n    }\n  }\n\n  _updateProgramWrapper() {\n    if (this._dropBallCtrl) {\n      this._dropBallCtrl.updateProgramWrapper(generalConfig.shaderProgram);\n    }\n    if (this._triggerCollisionCtrl) {\n      this._triggerCollisionCtrl.updateProgramWrapper(generalConfig.shaderProgram);\n    }\n  }\n\n  _clearObjects() {\n    if (this._dropBallCtrl) {\n      this._dropBallCtrl.clearModelControllers();\n    }\n    if (this._triggerCollisionCtrl) {\n      this._triggerCollisionCtrl.clearModelControllers();\n    }\n  }\n}\n\nexport { SceneImpl };\n","import {ModelGroupController} from 'gamex';\n\n/**\n * This class defines some shared simulation behavior.\n */\nclass SimulationConfigController extends ModelGroupController {\n  /**\n   * @param {ModelGroupControllerConfig} modelGroupControllerParams\n   */\n  constructor(modelGroupControllerParams) {\n    super(modelGroupControllerParams);\n\n    // A stationary object to demo the parameters before running a simulation.\n    //this._demoObject = this._createNewObject(true);// TODO: Add the demo object back in.\n\n    // TODO: Remove these after changing the camera type from Follow.\n    this.position = vec3.create();\n    this.orientation = quat.create();\n  }\n\n  reset() {\n    this.clearModelControllers();\n    //this._demoObject.reset();\n  }\n\n  /**\n   * @param {string} texturePath\n   */\n  updateTexture(texturePath) {\n    //this._demoObject.texturePath = texturePath;\n    this._modelCtrls.forEach(object => object.texturePath = texturePath);\n  }\n\n  /**\n   * @param {string} id\n   */\n  updateProgramWrapper(id) {\n    //this._demoObject.id = id;\n    this._modelCtrls.forEach(object => object.programWrapperId = id);\n  }\n}\n\nexport {SimulationConfigController};\n","import {\n  applyGravity,\n  applyAngularDrag,\n  applyLinearDrag,\n  CollidablePhysicsModelController,\n  pickRandom,\n} from 'gamex';\n\nimport {\n  boxConfig,\n  capsuleConfig,\n  generalConfig,\n  physicsConfig,\n  sphereConfig,\n} from '../../config';\n\nconst _shapeConfigs = {\n  'CUBE': boxConfig,\n  'ICOSAHEDRON': sphereConfig,\n  'ICOSPHERE': sphereConfig,\n  'LAT_LONG_SPHERE': sphereConfig,\n  'CAPSULE': capsuleConfig,\n  'TETRAHEDRON': sphereConfig,\n};\n\nconst _renderableShapesToCollidaleShapes = {\n  'CUBE': 'CUBE',\n  'ICOSAHEDRON': 'SPHERE_OR_CAPSULE',\n  'ICOSPHERE': 'SPHERE_OR_CAPSULE',\n  'LAT_LONG_SPHERE': 'SPHERE_OR_CAPSULE',\n  'CAPSULE': 'SPHERE_OR_CAPSULE',\n  'TETRAHEDRON': 'SPHERE_OR_CAPSULE',\n};\n\n/**\n * This class that controls a single object.\n */\nclass SingleObjectController extends CollidablePhysicsModelController {\n  /**\n   * @param {ModelControllerConfig} modelControllerParams\n   * @param {DynamicsConfig} dynamicsParams\n   * @param {string} shapeId\n   */\n  constructor(modelControllerParams, dynamicsParams, shapeId) {\n    shapeId = shapeId === 'RANDOM' ? pickRandom(Object.keys(_shapeConfigs)) : shapeId;\n    const collidableShapeId = _renderableShapesToCollidaleShapes[shapeId];\n    const scale = shapeId === 'CUBE' ? boxConfig.scale : vec3.fromValues(1, 1, 1);\n    const config = _shapeConfigs[shapeId];\n    const shapeParams = {\n      shapeId: shapeId,\n      collidableShapeId: collidableShapeId,\n      isUsingSphericalNormals: generalConfig.useSmoothShading,\n      divisionsCount: config.sphericalTesselationCount,\n      capsuleEndPointsDistance: config.capsuleEndPointsDistance,\n      radius: config.radius,\n      scale: scale,\n      isStationary: false,\n    };\n    const forceAppliers = [\n      applyGravity.bind(null, physicsConfig),\n      applyLinearDrag.bind(null, physicsConfig),\n      applyAngularDrag.bind(null, physicsConfig),\n    ];\n\n    super(modelControllerParams, dynamicsParams, shapeParams, forceAppliers)\n  }\n\n  /**\n   * This callback is triggered in response to a collision.\n   *\n   * @param {Collision} collision\n   * @returns {boolean} True if this needs the standard collision restitution to proceed.\n   */\n  handleCollision(collision) {\n    return true;\n  }\n}\n\nexport {SingleObjectController};\n","import {\n  configController,\n  findIntersectingCollidablesForCollidable,\n} from 'gamex';\n\nimport {SimulationConfigController} from '../simulation-config-controller';\n\nimport {\n  generalConfig,\n  physicsConfig\n} from '../../config';\nimport {SingleObjectController} from '../single-object/single-object-controller';\nimport {\n  triggerCollisionConfig,\n  object1Config,\n  object2Config,\n  triggerCollisionFolderConfig\n} from './trigger-collision-config';\n\n/**\n * This class updates a drop-object simulation according to configuration-change events triggered\n * through the dat.GUI menu.\n */\nclass TriggerCollisionConfigController extends SimulationConfigController {\n  /**\n   * @param {ModelGroupControllerConfig} params\n   */\n  constructor(params) {\n    super(params);\n\n    configController.createFolder(triggerCollisionFolderConfig, null, {\n      'triggerCollision': () => this._triggerCollision()\n    });\n  }\n\n  _triggerCollision() {\n    // Turn off gravity.\n    vec3.set(physicsConfig._gravityVec, 0, 0, 0);\n\n    this._createNewObject(true, object1Config);\n    this._createNewObject(false, object2Config);\n  }\n\n  /**\n   * @param {boolean} isFirstObject\n   * @param {Object} objectConfig\n   * @returns {SingleObjectController}\n   * @private\n   */\n  _createNewObject(isFirstObject, objectConfig) {\n    const modelControllerParams = {\n      gl: this._gl,\n      getViewMatrix: this._getViewMatrix,\n      getProjectionMatrix: this._getProjectionMatrix,\n      getParentWorldTransform: this._getParentWorldTransform,\n      programWrapperId: generalConfig.shaderProgram,\n      texturePath: generalConfig.texturePath,\n    };\n\n    // Set the initial offset.\n    const xOffset = isFirstObject\n        ? -triggerCollisionConfig.distance / 2\n        : triggerCollisionConfig.distance / 2;\n    const startPosition = vec3.fromValues(xOffset, 0, 0);\n    vec3.add(startPosition, startPosition, objectConfig.displacement);\n\n    const dynamicsParams = {\n      position: startPosition,\n      mass: objectConfig.mass,\n    };\n\n    const object = new SingleObjectController(modelControllerParams, dynamicsParams,\n        objectConfig.shape);\n    this._startModelController(object).then(() => {\n      // Set the initial orientation.\n      const orientation = quat.create();\n      quat.rotateX(orientation, orientation, objectConfig.rotationX);\n      quat.rotateX(orientation, orientation, objectConfig.rotationY);\n      quat.rotateX(orientation, orientation, objectConfig.rotationZ);\n      object.physicsJob.previousState.orientation = orientation;\n      object.physicsJob.currentState.orientation = quat.clone(orientation);\n\n      // Set the initial velocity.\n      const xVelocity = isFirstObject ? triggerCollisionConfig.speed : -triggerCollisionConfig.speed;\n      const xMomentum = xVelocity * object.physicsJob.currentState.mass;\n      object.physicsJob.previousState.momentum = vec3.fromValues(xMomentum, 0, 0);\n      object.physicsJob.currentState.momentum = vec3.fromValues(xMomentum, 0, 0);\n\n      _ensureObjectIsNotColliding(object);\n    });\n  }\n}\n\n/**\n * Adds an x offset to the new object so that it does not collide with any pre-existing objects.\n *\n * @param {SingleObjectController} object\n * @private\n */\nfunction _ensureObjectIsNotColliding(object) {\n  const collidable = object.physicsJob.collidable;\n  const startPosition = object.position;\n  let collidingCollidables = findIntersectingCollidablesForCollidable(collidable);\n  while (collidingCollidables.length) {\n    startPosition[0] *= Math.random() + 1;\n    object.position = startPosition;\n    collidingCollidables = findIntersectingCollidablesForCollidable(collidable);\n  }\n}\n\nexport {TriggerCollisionConfigController};\n","/**\n * This module handles configuration parameters relating to simulations that collide two objects.\n */\n\nconst triggerCollisionConfig = {};\n\ntriggerCollisionConfig.distance = {\n  start: 50,\n  min: 0,\n  max: 200\n};\ntriggerCollisionConfig.speed = {\n  start: 0.02,\n  min: 0,\n  max: 1\n};\ntriggerCollisionConfig.triggerCollision = () => {};\n\nconst object1Config = {};\n\nobject1Config.shape = {\n  start: 'CAPSULE',\n  options: [\n    'CUBE',\n    'ICOSAHEDRON',\n    'ICOSPHERE',\n    'LAT_LONG_SPHERE',\n    'CAPSULE',\n    'TETRAHEDRON',\n    'RANDOM'\n  ]\n};\nobject1Config.rotation = {\n  start: vec3.fromValues(0, 0, 0),\n  min: vec3.fromValues(-Math.PI, -Math.PI, -Math.PI),\n  max: vec3.fromValues(Math.PI, Math.PI, Math.PI)\n};\nobject1Config.displacement = {\n  start: vec3.fromValues(0, 0, 0),\n  min: vec3.fromValues(-50, -50, -50),\n  max: vec3.fromValues(50, 50, 50)\n};\nobject1Config.mass = {\n  start: 1,\n  min: 0.1,\n  max: 50\n};\n\nconst object2Config = {};\n\nobject2Config.shape = {\n  start: 'CAPSULE',\n  options: [\n    'CUBE',\n    'ICOSAHEDRON',\n    'ICOSPHERE',\n    'LAT_LONG_SPHERE',\n    'CAPSULE',\n    'TETRAHEDRON',\n    'RANDOM'\n  ]\n};\nobject2Config.rotation = {\n  start: vec3.fromValues(0, 0, 0),\n  min: vec3.fromValues(-Math.PI, -Math.PI, -Math.PI),\n  max: vec3.fromValues(Math.PI, Math.PI, Math.PI)\n};\nobject2Config.displacement = {\n  start: vec3.fromValues(0, 0, 0.9),\n  min: vec3.fromValues(-50, -50, -50),\n  max: vec3.fromValues(50, 50, 50)\n};\nobject2Config.mass = {\n  start: 2,\n  min: 0.1,\n  max: 50\n};\n\nconst object1FolderConfig = {\n  label: 'Object 1',\n  config: object1Config,\n  isOpen: true\n};\n\nconst object2FolderConfig = {\n  label: 'Object 2',\n  config: object2Config,\n  isOpen: true\n};\n\nconst triggerCollisionFolderConfig = {\n  label: 'Collision Simulation',\n  config: triggerCollisionConfig,\n  isOpen: true,\n  childFolders: [\n    object1FolderConfig,\n    object2FolderConfig\n  ]\n};\n\nexport {triggerCollisionConfig, object1Config, object2Config, triggerCollisionFolderConfig};\n","/**\n * This module defines the configuration for a WebGL program that renders a general model--that is,\n * this program renders everything but the stars.\n *\n * This program renders three-dimensional shapes with textures and Blinn-Phong shading.\n */\n\nconst generalModelProgramWrapperConfig = {};\n\ngeneralModelProgramWrapperConfig.id = 'general-model-program';\n\n// The build system moves shader files to dist/shaders/.\ngeneralModelProgramWrapperConfig.vertexShaderPath = 'shaders/general-model-shader.vert';\ngeneralModelProgramWrapperConfig.fragmentShaderPath = 'shaders/general-model-shader.frag';\n\ngeneralModelProgramWrapperConfig.renderPriority = 1;\n\n/**\n * @param {WebGLRenderingContext} gl\n */\ngeneralModelProgramWrapperConfig.webGLStateSetter = gl => {\n  // Turn on depth testing.\n  gl.enable(gl.DEPTH_TEST);\n  gl.depthFunc(gl.LEQUAL);\n};\n\nexport {generalModelProgramWrapperConfig};\n","export * from './general-model-program/general-model-program-config';\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}